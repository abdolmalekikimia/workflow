{
	"info": {
		"_postman_id": "4ac1360a-3cdc-473b-a27b-3c661fdab2a1",
		"name": "Miropay",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48557386",
		"_collection_link": "https://grey-moon-743606.postman.co/workspace/MiroPay~cf035a99-4ed0-46ba-8d8f-2b31af287ddd/collection/36579113-4ac1360a-3cdc-473b-a27b-3c661fdab2a1?action=share&source=collection_link&creator=48557386"
	},
	"item": [
		{
			"name": "Aegisüíö",
			"item": [
				{
					"name": "Staffüíö",
					"item": [
						{
							"name": "Auth üíö",
							"item": [
								{
									"name": "logout",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"customerEmail\": \"n.mahmoudi@terminal101.co\",\n  \"customerPhonenumber\":\"+9647701234567\",\n  \"gateway\": \"ZAIN\"\n}"
										},
										"url": {
											"raw": "{{BASE_URL}}aegis/staff/auth/logout",
											"host": [
												"{{BASE_URL}}aegis"
											],
											"path": [
												"staff",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account üíö",
							"item": [
								{
									"name": "Create staff üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Naeim\",\n    \"lastName\": \"Mahmoudi\",\n    \"email\": \"n.aeim.mahmoudi.8787@gmail.com\",\n    \"role\": \"ADMIN\",\n    \"password\": \"#@MattShaian1377\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/account",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"account"
											]
										}
									},
									"response": []
								},
								{
									"name": "Paginated list üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance Check\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"// üîí 3. Authorization Check\r",
													"pm.test(\"üõ° Authorization header present\", () => {\r",
													"    pm.request.headers.has('Authorization');\r",
													"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
													"});\r",
													"\r",
													"// üì¶ 4. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    // Top-level validation\r",
													"    pm.expect(response).to.be.an('object').with.keys([\r",
													"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
													"    ]);\r",
													"    \r",
													"    // Items array validation\r",
													"    pm.expect(response.items).to.be.an('array');\r",
													"    response.items.forEach(item => {\r",
													"        pm.expect(item).to.include.keys(\r",
													"            'id', 'firstName', 'lastName', 'email',\r",
													"            'role', 'isActive', 'deletedDate'\r",
													"        );\r",
													"    });\r",
													"});\r",
													"\r",
													"// üî¢ 5. Pagination Validation\r",
													"pm.test(\"üî¢ Valid pagination data\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    pm.expect(res.totalItems).to.be.a('number').and.at.least(0);\r",
													"    pm.expect(res.totalPages).to.be.a('number').and.at.least(1);\r",
													"    pm.expect(res.page).to.be.a('number').and.at.least(1);\r",
													"    pm.expect(res.hasNext).to.be.a('boolean');\r",
													"    pm.expect(res.hasPrev).to.be.a('boolean');\r",
													"    \r",
													"    // Consistency checks\r",
													"    pm.expect(res.items.length).to.be.at.most(res.totalItems);\r",
													"    pm.expect(res.page).to.be.at.most(res.totalPages);\r",
													"});\r",
													"\r",
													"\r",
													"// üìß 7. Email Validation\r",
													"pm.test(\"üìß Valid email formats\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üß© 8. Role Validation\r",
													"pm.test(\"üß© Valid role values\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const validRoles = [\"ADMIN\", \"SUPER_ADMIN\", \"SUPPORT\", \"COMPLIANCE\", \"VIEWER\"];\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(validRoles).to.include(item.role);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚úÖ 9. Active Status Filter Validation\r",
													"pm.test(\"‚úÖ All accounts are active\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.isActive).to.be.true;\r",
													"    });\r",
													"});   \r",
													"\r",
													"// üîé 11. Query Parameter Validation\r",
													"pm.test(\"üîé Query parameter filtering works\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Should have at least one item\r",
													"    pm.expect(res.items.length).to.be.greaterThan(0);\r",
													"    \r",
													"    // Verify all accounts are active\r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.isActive).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"// üìä 12. Pagination Flag Accuracy\r",
													"pm.test(\"üìä Pagination flags accuracy\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // hasNext should be true when page < totalPages\r",
													"    pm.expect(res.hasNext).to.equal(res.page < res.totalPages);\r",
													"    \r",
													"    // hasPrev should be true when page > 1\r",
													"    pm.expect(res.hasPrev).to.equal(res.page > 1);\r",
													"});\r",
													"\r",
													"// üìù 13. Environment Variable Storage\r",
													"pm.test(\"üìù Store first account info\", () => {\r",
													"    if (pm.response.json().items.length > 0) {\r",
													"        const firstAccount = pm.response.json().items[0];\r",
													"        pm.environment.set('FIRST_STAFF_ID', firstAccount.id);\r",
													"        pm.environment.set('FIRST_STAFF_EMAIL', firstAccount.email);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîê 14. Security Headers Check\r",
													"// pm.test(\"üîê Security headers present\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"//     pm.response.to.have.header('Strict-Transport-Security');\r",
													"//     pm.response.to.not.have.header('X-Powered-By');\r",
													"// });\r",
													"\r",
													"// üßÆ 15. Data Consistency\r",
													"pm.test(\"üßÆ Data consistency checks\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.firstName.length).to.be.at.least(1);\r",
													"        pm.expect(item.lastName.length).to.be.at.least(1);\r",
													"        pm.expect(item.email.length).to.be.at.least(3);\r",
													"        \r",
													"        if (item.deletedDate !== null) {\r",
													"            pm.expect(item.deletedDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/account?isActive=true",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"account"
											],
											"query": [
												{
													"key": "isActive",
													"value": "true"
												},
												{
													"key": "role",
													"value": "SUPER_ADMIN",
													"disabled": true
												},
												{
													"key": "search",
													"value": "",
													"disabled": true
												},
												{
													"key": "withDeleted",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update staff üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üß™ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance Check\r",
													"pm.test(\"‚è± Response time < 1500ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"// üì¶ 3. Empty Response Validation\r",
													"pm.test(\"üì¶ Response body is empty\", () => {\r",
													"    pm.expect(pm.response.text()).to.be.empty;\r",
													"});\r",
													"\r",
													"// üîê 4. Authorization Header Check\r",
													"pm.test(\"üîê Authorization header present\", () => {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
													"    pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Bearer\");\r",
													"});\r",
													"\r",
													"// üîç 5. Debugging Logs\r",
													"console.log(\"PUT /aegis/staff/account/:id response:\", pm.response.text());\r",
													"console.log(\"Request Body:\", pm.request.body.raw);"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Naeim\",\n    \"lastName\": \"Mahmoudi\",\n    \"role\": \"ADMIN\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/account/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"account",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Me üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance Check\r",
													"pm.test(\"‚è± Response time < 1500ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"// üîí 3. Authorization Check\r",
													"pm.test(\"üõ° Authorization header present\", () => {\r",
													"    pm.request.headers.has('Authorization');\r",
													"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
													"});\r",
													"\r",
													"// üì¶ 4. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    const expectedKeys = [\r",
													"        'id', 'firstName', 'lastName', 'email',\r",
													"        'role', 'isActive', 'deletedDate'\r",
													"    ];\r",
													"    pm.expect(response).to.be.an('object').and.to.have.all.keys(expectedKeys);\r",
													"});\r",
													"\r",
													"// üìß 6. Email Validation\r",
													"pm.test(\"üìß Valid email format\", () => {\r",
													"    const email = pm.response.json().email;\r",
													"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"});\r",
													"\r",
													"// üß© 7. Role Validation\r",
													"pm.test(\"üß© Valid role value\", () => {\r",
													"    const role = pm.response.json().role;\r",
													"    const validRoles = [\"SUPER_ADMIN\", \"ADMIN\", \"SUPPORT\", \"COMPLIANCE\", \"VIEWER\"];\r",
													"    pm.expect(validRoles).to.include(role);\r",
													"});\r",
													"\r",
													"// ‚úÖ 8. Active Status Check\r",
													"pm.test(\"‚úÖ Account is active\", () => {\r",
													"    const isActive = pm.response.json().isActive;\r",
													"    pm.expect(isActive).to.be.true;\r",
													"});\r",
													"\r",
													"// üßæ 13. Data Consistency\r",
													"pm.test(\"üßæ Data consistency checks\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    pm.expect(res.firstName).to.have.lengthOf.at.least(1);\r",
													"    pm.expect(res.lastName).to.have.lengthOf.at.least(1);\r",
													"    pm.expect(res.email).to.have.lengthOf.at.least(3);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/account/me",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"account",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "verify two factor",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"mfaCode\": \"992619\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/account/verify-two-factor/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"account",
												"verify-two-factor",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Account Detailsüíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check",
													"pm.test(\"üü¢ Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate staff account fields",
													"pm.test(\"üë§ Staff account structure is valid\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"firstName\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"lastName\").that.is.a(\"string\");",
													"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");",
													"    pm.expect(jsonData).to.have.property(\"role\").that.is.oneOf([\"SUPER_ADMIN\", \"ADMIN\", \"STAFF\"]);",
													"    pm.expect(jsonData).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"    pm.expect(jsonData).to.have.property(\"deletedDate\");",
													"});",
													"",
													"// üíæ Save staff account ID for future use",
													"pm.environment.set(\"staff_account_id\", jsonData.id);",
													"console.log(\"üìå Saved staff account ID:\", jsonData.id);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/account/:staffAccountId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"account",
												":staffAccountId"
											],
											"variable": [
												{
													"key": "staffAccountId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Token üíö",
							"item": [
								{
									"name": "Rotate üíö",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('‚úÖ afterResponse', function () {",
													"    pm.environment.set('STAFF_ACCESS_TOKEN', pm.response.json().access);",
													"    pm.environment.set('STAFF_REFRESH_TOKEN', pm.response.json().refresh);",
													"});",
													"",
													"// üß™ Check for status 201 Created",
													"pm.test(\"üß™ Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// üìÑ Validate response structure",
													"pm.test(\"üìÑ Response has access and refresh tokens\", function () {",
													"    const res = pm.response.json();",
													"    pm.expect(res).to.have.property(\"access\").that.is.a(\"string\").and.is.not.empty;",
													"    pm.expect(res).to.have.property(\"refresh\").that.is.a(\"string\").and.is.not.empty;",
													"});",
													"",
													"// üîê Confirm Authorization header sent",
													"pm.test(\"üîê Authorization header is included\", function () {",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;",
													"});",
													"",
													"// üéØ Confirm request body contains refresh token",
													"pm.test(\"üéØ Request body includes refresh token\", function () {",
													"    const body = pm.request.body.raw;",
													"    const jsonBody = JSON.parse(body);",
													"    pm.expect(jsonBody).to.have.property(\"refresh\").that.is.a(\"string\").and.is.not.empty;",
													"});",
													"",
													"// üìã Log the new tokens for debugging (optional)",
													"console.log(\"New Access Token:\", pm.response.json().access);",
													"console.log(\"New Refresh Token:\", pm.response.json().refresh);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"refresh\": \"{{STAFF_REFRESH_TOKEN}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/token/rotate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"token",
												"rotate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Refresh",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"refresh\": \"{{STAFF_REFRESH_TOKEN}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/staff/token/refresh",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"staff",
												"token",
												"refresh"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "login email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let secret = pm.environment.get(\"SUPER_ADMIN_SECRET\");",
											"let lamdaUrl = pm.environment.get(\"LAMDA_OTP_GENERATOR_BASE_URL\");",
											"",
											"// Corrected: Use template literals with backticks",
											"const requestUrl = `${lamdaUrl}?secret=${secret}`;",
											"",
											"pm.sendRequest(requestUrl, function (err, res) {",
											"    if (err) {",
											"        console.log(\"OTP fetch failed:\", err);",
											"    } else {",
											"        // Added response status check",
											"        if (res.code === 200) {",
											"            const otp = res.json().token;",
											"            pm.environment.set(\"SUPER_ADMIN_OTP_CODE\", otp);",
											"        } else {",
											"            console.log(\"Failed to get OTP. Status:\", res.code, \"Response:\", res.body);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('‚úÖ After Response', function () {",
											"    pm.environment.set('STAFF_ACCESS_TOKEN', pm.response.json().access);",
											"    pm.environment.set('STAFF_REFRESH_TOKEN', pm.response.json().refresh);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"{{SUPER_ADMIN_EMAIL}}\",\n\t\"password\": \"{{SUPER_ADMIN_PASSWORD}}\",\n\t\"mfaCode\": \"{{SUPER_ADMIN_OTP_CODE}}\"\n}"
								},
								"url": {
									"raw": "{{BASE_URL}}/aegis/staff/auth/login/email",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"aegis",
										"staff",
										"auth",
										"login",
										"email"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Merchantüíö",
					"item": [
						{
							"name": "Auth üíö",
							"item": [
								{
									"name": "Sessionüíö",
									"item": [
										{
											"name": "Get all active sessions  üíö",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ‚úÖ Status code check",
															"pm.test(\"üü¢ Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// üì¶ Parse response",
															"const jsonData = pm.response.json();",
															"",
															"// üìã Validate sessions array",
															"pm.test(\"üìÅ Sessions array is valid\", function () {",
															"    pm.expect(jsonData.sessions).to.be.an(\"array\").with.length.greaterThan(0);",
															"",
															"    jsonData.sessions.forEach((session) => {",
															"        pm.expect(session).to.have.property(\"id\");",
															"        pm.expect(session).to.have.property(\"sessionId\").that.is.a(\"string\");",
															"        pm.expect(session).to.have.property(\"loginIp\").that.matches(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/);",
															"        pm.expect(session).to.have.property(\"browser\").that.is.a(\"string\");",
															"        pm.expect(session).to.have.property(\"osName\").that.is.a(\"string\");",
															"        pm.expect(session).to.have.property(\"platformType\").that.is.a(\"string\");",
															"        pm.expect(session).to.have.property(\"engine\").that.is.a(\"string\");",
															"    });",
															"});",
															"",
															"// üíæ Save latest sessionId for future use",
															"pm.environment.set(\"latest_session_id\", jsonData.sessions[0].sessionId);",
															"console.log(\"üìå Saved latest session ID:\", jsonData.sessions[0].sessionId);",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{MERCHANT_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/auth/session",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"auth",
														"session"
													]
												}
											},
											"response": []
										},
										{
											"name": "Burn session  üíö",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ‚úÖ Accept 200 or 204 for successful deletion",
															"pm.test(\"üü¢ Status code is 200 or 204\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
															"});",
															"",
															"// üßπ Clear sessionId from environment",
															"pm.environment.unset(\"sessionId\");",
															"",
															"// üìã Log confirmation",
															"console.log(\"üßº Session deleted:\", pm.request.url.toString());",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{MERCHANT_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/auth/session/:id",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"auth",
														"session",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "797"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Joogle",
									"item": [
										{
											"name": "Gen Auth URL",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								},
								{
									"name": "Change password üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"password\": \"@AAzzz22DADASHG_\",\n\t\"newPassword\": \"@AAzzz22DADASH_\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/account/change-password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"account",
												"change-password"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout üíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "Sign-up üíö",
									"item": [
										{
											"name": "Signup üíö",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// // üî¢ Generate a random number",
															"// const randomNum = Math.floor(Math.random() * 100000);",
															"",
															"// // üìß Create a fake email using the random number",
															"// const randomEmail = `merchant_${randomNum}@example.test`;",
															"",
															"// // üíæ Set it as an environment variable",
															"// pm.environment.set(\"MERCHANT_EMAIL\", randomEmail);",
															"",
															"// // üõ°Ô∏è Optional: Set a static password if not already defined",
															"// if (!pm.environment.get(\"MERCHANT_PASSWORD\")) {",
															"//     pm.environment.set(\"MERCHANT_PASSWORD\", \"Test@1234\");",
															"// }",
															"",
															"// // üßæ Log the generated email",
															"// console.log(\"Generated email:\", randomEmail);",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ‚úÖ Accept 200 or 201 for successful sign-up",
															"pm.test(\"üü¢ Status code is 200 or 201\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
															"});",
															"",
															"// üì¶ Parse response",
															"const jsonData = pm.response.json();",
															"",
															"// üìã Validate account creation response",
															"pm.test(\"üìÅ Merchant account created successfully\", function () {",
															"    pm.expect(jsonData).to.have.property(\"id\");",
															"    pm.expect(jsonData).to.have.property(\"email\", pm.environment.get(\"MERCHANT_EMAIL\"));",
															"    pm.expect(jsonData).to.have.property(\"createdAt\");",
															"    pm.expect(jsonData).to.have.property(\"isActive\").that.is.a(\"boolean\");",
															"});",
															"",
															"// üíæ Save merchant ID for future use",
															"pm.environment.set(\"merchant_id\", jsonData.id);",
															"console.log(\"üìå Saved merchant ID:\", jsonData.id);",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/11.2.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\": \"{{MERCHANT_EMAIL}}\",\n\t\"password\": \"{{MERCHANT_PASSWORD}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/sign-up",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"sign-up"
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify üíö",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// ‚úÖ Accept 200 or 201 for successful verification",
															"pm.test(\"üü¢ Status code is 200 or 201\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
															"});",
															"",
															"// üì¶ Parse response",
															"const jsonData = pm.response.json();",
															"",
															"// üìã Validate verification response structure",
															"pm.test(\"üìÅ Email verification response is valid\", function () {",
															"    pm.expect(jsonData).to.have.property(\"email\", pm.environment.get(\"MERCHANT_EMAIL\"));",
															"    pm.expect(jsonData).to.have.property(\"verified\").that.is.a(\"boolean\");",
															"});",
															"",
															"// üíæ Optionally store verification status",
															"pm.environment.set(\"email_verified\", jsonData.verified);",
															"console.log(\"üìå Email verified:\", jsonData.verified);",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/11.2.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\": \"{{MERCHANT_EMAIL}}\",\n\t\"code\": \"{{VERIFY_CODE}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/verify-email",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"verify-email"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Reset Password üíö",
									"item": [
										{
											"name": "Request reset password üíö",
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/10.3.1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\": \"{{MERCHANT_EMAIL}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/request-reset-password",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"request-reset-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reset password üíö",
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/10.3.1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\": \"{{MERCHANT_EMAIL}}\",\n\t\"code\": \"660113\",\n\t\"password\": \"{{MERCHANT_PASSWORD}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/reset-password",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"reset-password"
													]
												}
											},
											"response": []
										},
										{
											"name": "Resend verification üíö",
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/11.2.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"email\": \"{{MERCHANT_EMAIL}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/resend-code",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"resend-code"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Verify phonenumber",
									"item": [
										{
											"name": "Verify phone üíö",
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{MERCHANT_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/11.2.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"code\": \"271110\",\n\t\"phonenumber\": \"{{MERCHANT_PHONE_NUMBER}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/verify-phone",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"verify-phone"
													]
												}
											},
											"response": []
										},
										{
											"name": "Request code üíö",
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{MERCHANT_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "User-Agent",
														"value": "insomnia/11.2.0"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"phonenumber\": \"{{MERCHANT_PHONE_NUMBER}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/request-verify-phone",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"request-verify-phone"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Two Factor",
									"item": [
										{
											"name": "Revoke Two Factor",
											"item": [
												{
													"name": "1.Request",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"email\": \"{{MERCHANT_EMAIL}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/aegis/merchant/account/revoke/request-two-factor",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"aegis",
																"merchant",
																"account",
																"revoke",
																"request-two-factor"
															]
														}
													},
													"response": []
												},
												{
													"name": "2.Verify",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{MERCHANT_ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"email\": \"{{MERCHANT_EMAIL}}\",\r\n\t\"code\": \"{{MERCHANT_OTP_CODE}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/aegis/merchant/account/revoke/verify-two-factor",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"aegis",
																"merchant",
																"account",
																"revoke",
																"verify-two-factor"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Request two factor üíö",
											"item": [
												{
													"name": "1.Request üíö",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// ‚úÖ Status code check",
																	"pm.test(\"üü¢ Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"// üì¶ Parse response",
																	"const res = pm.response.json();",
																	"",
																	"// üîç Validate QR code and secret",
																	"pm.test(\"üìÅ Response contains QR code and secret\", () => {",
																	"    pm.expect(res).to.have.property(\"qrCode\").that.is.a(\"string\");",
																	"    pm.expect(res.qrCode).to.match(/^data:image\\/png;base64,/);",
																	"    pm.expect(res).to.have.property(\"secret\").that.is.a(\"string\");",
																	"    pm.expect(res.secret).to.match(/^[A-Z2-7]{16,}$/); // Basic Base32 format",
																	"});",
																	"",
																	"// üíæ Save for chaining or display",
																	"pm.environment.set(\"two_factor_qr\", res.qrCode);",
																	"pm.environment.set(\"two_factor_secret\", res.secret);",
																	"console.log(\"üìå 2FA QR and secret saved:\", res.secret);",
																	""
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"followRedirects": true,
														"disableUrlEncoding": false,
														"disableCookies": false
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{MERCHANT_ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "User-Agent",
																"value": "insomnia/11.2.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/aegis/merchant/account/request-two-factor",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"aegis",
																"merchant",
																"account",
																"request-two-factor"
															]
														}
													},
													"response": []
												},
												{
													"name": "2.Verify üíö",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let secret = pm.environment.get(\"MERCHANT_SECRET\");\r",
																	"let lamdaUrl = pm.environment.get(\"LAMDA_OTP_GENERATOR_BASE_URL\");\r",
																	"\r",
																	"// Corrected: Use template literals with backticks\r",
																	"const requestUrl = `${lamdaUrl}?secret=${secret}`;\r",
																	"\r",
																	"pm.sendRequest(requestUrl, function (err, res) {\r",
																	"    if (err) {\r",
																	"        console.log(\"OTP fetch failed:\", err);\r",
																	"    } else {\r",
																	"        // Added response status check\r",
																	"        if (res.code === 200) {\r",
																	"            const otp = res.json().token;\r",
																	"            pm.environment.set(\"MERCHANT_OTP_CODE\", otp);\r",
																	"        } else {\r",
																	"            console.log(\"Failed to get OTP. Status:\", res.code, \"Response:\", res.body);\r",
																	"        }\r",
																	"    }\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {},
																"requests": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"followRedirects": true,
														"disableUrlEncoding": false,
														"disableCookies": false
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{MERCHANT_ACCESS_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "User-Agent",
																"value": "insomnia/11.2.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"mfaCode\": \"965693\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/aegis/merchant/account/verify-two-factor",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"aegis",
																"merchant",
																"account",
																"verify-two-factor"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Disable Two Factor",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"mfaCode\": \"939939\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/aegis/merchant/account/disable-two-factor",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"aegis",
														"merchant",
														"account",
														"disable-two-factor"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get me üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// === [1] Basic Response Checks ===\r",
													"pm.test(\"‚úÖ Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Response time is under 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Content-Type includes application/json\", function () {\r",
													"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
													"    pm.expect(contentType).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Response has body\", function () {\r",
													"    pm.response.to.have.body();\r",
													"});\r",
													"\r",
													"// === [2] Check Expected Properties ===\r",
													"const data = pm.response.json();\r",
													"const expectedKeys = [\r",
													"    \"createdAt\", \"updatedAt\", \"id\", \"isTwoFactorEnabled\",\r",
													"    \"accountType\", \"email\", \"phonenumber\",\r",
													"    \"isEmailVerified\", \"isPhoneNumberVerified\", \"isKybd\", \"isActive\"\r",
													"];\r",
													"\r",
													"pm.test(\"‚úÖ Response contains all expected fields\", function () {\r",
													"    expectedKeys.forEach(key => {\r",
													"        pm.expect(data).to.have.property(key);\r",
													"    });\r",
													"});\r",
													"\r",
													"// === [3] Field Type & Format Validations ===\r",
													"pm.test(\"‚úÖ createdAt and updatedAt are ISO timestamps\", function () {\r",
													"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
													"    pm.expect(data.createdAt).to.match(isoRegex);\r",
													"    pm.expect(data.updatedAt).to.match(isoRegex);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ ID is a number\", function () {\r",
													"    pm.expect(data.id).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Email format is valid\", function () {\r",
													"    pm.expect(data.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Phone number format is valid (E.164)\", function () {\r",
													"    pm.expect(data.phonenumber).to.match(/^\\+\\d{10,15}$/);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Booleans are correctly typed\", function () {\r",
													"    [\"isTwoFactorEnabled\", \"isEmailVerified\", \"isPhoneNumberVerified\", \"isKybd\", \"isActive\"].forEach(flag => {\r",
													"        pm.expect(data[flag]).to.be.a(\"boolean\");\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ accountType is valid\", function () {\r",
													"    pm.expect([\"CORPORATION\", \"INDIVIDUAL\"]).to.include(data.accountType);\r",
													"});\r",
													"\r",
													"// === [4] Schema Validation ===\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": expectedKeys,\r",
													"    \"properties\": {\r",
													"        \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
													"        \"updatedAt\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
													"        \"id\": { \"type\": \"number\" },\r",
													"        \"isTwoFactorEnabled\": { \"type\": \"boolean\" },\r",
													"        \"accountType\": { \"type\": \"string\", \"enum\": [\"CORPORATION\", \"INDIVIDUAL\"] },\r",
													"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
													"        \"phonenumber\": { \"type\": \"string\" },\r",
													"        \"isEmailVerified\": { \"type\": \"boolean\" },\r",
													"        \"isPhoneNumberVerified\": { \"type\": \"boolean\" },\r",
													"        \"isKybd\": { \"type\": \"boolean\" },\r",
													"        \"isActive\": { \"type\": \"boolean\" }\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"‚úÖ Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"// === [5] Authorization Header Check ===\r",
													"pm.test(\"‚úÖ Authorization header is sent\", function () {\r",
													"    const hasAuth = pm.request.headers.has(\"Authorization\");\r",
													"    pm.expect(hasAuth).to.be.true;\r",
													"});\r",
													"\r",
													"// === [7] General Status Code Range Check ===\r",
													"pm.test(\"‚úÖ Status code is among acceptable values\", function () {\r",
													"    const allowed = [200, 201, 400, 401, 403, 404, 500];\r",
													"    pm.expect(allowed).to.include(pm.response.code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/account/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"account",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get profile üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Test 1: Status Code Should Be 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// // ‚úÖ Test 2: Content-Type is application/json\r",
													"// pm.test(\"Content-Type is application/json\", function () {\r",
													"//     pm.response.to.have.header(\"Content-Type\");\r",
													"//     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"// });\r",
													"\r",
													"// // ‚úÖ Test 3: Response has required profile fields\r",
													"// const json = pm.response.json();\r",
													"\r",
													"// pm.test(\"Profile fields exist\", function () {\r",
													"//     pm.expect(json).to.have.property(\"firstName\");\r",
													"//     pm.expect(json).to.have.property(\"lastName\");\r",
													"//     pm.expect(json).to.have.property(\"merchantAccount\");\r",
													"//     pm.expect(json.merchantAccount).to.have.property(\"email\");\r",
													"//     pm.expect(json.merchantAccount).to.have.property(\"corporationBusinessInfo\");\r",
													"//     pm.expect(json.merchantAccount.corporationBusinessInfo).to.have.property(\"name\");\r",
													"// });\r",
													"\r",
													"// // ‚úÖ Test 4: Data Types Check\r",
													"// pm.test(\"Field types are correct\", function () {\r",
													"//     pm.expect(json.firstName).to.be.a(\"string\");\r",
													"//     pm.expect(json.lastName).to.be.a(\"string\");\r",
													"//     pm.expect(json.createdAt).to.be.a(\"string\");\r",
													"//     pm.expect(json.id).to.be.a(\"number\");\r",
													"//     pm.expect(json.merchantAccount.email).to.be.a(\"string\");\r",
													"// });\r",
													"\r",
													"// // ‚úÖ Test 5: Check 2FA enabled\r",
													"// pm.test(\"2FA is enabled\", function () {\r",
													"//     pm.expect(json.merchantAccount.isTwoFactorEnabled).to.eql(true);\r",
													"// });\r",
													"\r",
													"// // ‚úÖ Test 6: Check Website is valid URL (basic)\r",
													"// pm.test(\"Website is valid\", function () {\r",
													"//     const website = json.merchantAccount.corporationBusinessInfo.website;\r",
													"//     pm.expect(website).to.match(/^https?:\\/\\/|^www\\./);\r",
													"// });\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/merchant/profile",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"profile"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{MERCHANT_ACCESS_TOKEN}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Api üíö",
							"item": [
								{
									"name": "Recreate Test API Creds üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"‚úÖ Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Response is JSON\", function () {\r",
													"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
													"    pm.expect(contentType).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Response contains secret and privateKey\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"secret\");\r",
													"    pm.expect(jsonData).to.have.property(\"privateKey\");\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ secret is a non-empty string\", function () {\r",
													"    const secret = pm.response.json().secret;\r",
													"    pm.expect(secret).to.be.a(\"string\").and.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ privateKey format looks valid\", function () {\r",
													"    const privateKey = pm.response.json().privateKey;\r",
													"    pm.expect(privateKey.startsWith(\"-----BEGIN ENCRYPTED PRIVATE KEY-----\")).to.be.true;\r",
													"    pm.expect(privateKey.endsWith(\"-----END ENCRYPTED PRIVATE KEY-----\\n\")).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.0.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/api/test",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"api",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Recreate **LIVE** API Creds üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"‚úÖ Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Response is JSON\", function () {\r",
													"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
													"    pm.expect(contentType).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ Response contains secret and privateKey\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"secret\");\r",
													"    pm.expect(jsonData).to.have.property(\"privateKey\");\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ secret is a live key and not empty\", function () {\r",
													"    const secret = pm.response.json().secret;\r",
													"    pm.expect(secret).to.be.a(\"string\").and.not.empty;\r",
													"    pm.expect(secret.startsWith(\"live_\")).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"‚úÖ privateKey format looks valid\", function () {\r",
													"    const privateKey = pm.response.json().privateKey;\r",
													"    pm.expect(privateKey.startsWith(\"-----BEGIN ENCRYPTED PRIVATE KEY-----\")).to.be.true;\r",
													"    pm.expect(privateKey.endsWith(\"-----END ENCRYPTED PRIVATE KEY-----\\n\")).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.0.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/api/live",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"api",
												"live"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tokenüíö",
							"item": [
								{
									"name": "Refresh üíö",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('‚úÖ Store Tokens', function () {",
													"    pm.environment.set('MERCHANT_ACCESS_TOKEN', pm.response.json().access);",
													"});",
													"pm.test(\"‚úÖ Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"‚úÖ Response is JSON\", function () {",
													"    const contentType = pm.response.headers.get(\"Content-Type\");",
													"    pm.expect(contentType).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"‚úÖ Response contains access and refresh tokens\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"access\");",
													"});",
													"",
													"pm.test(\"‚úÖ Access tokens format\", function () {",
													"    const access = pm.response.json().access;",
													"",
													"",
													"    pm.expect(access).to.be.a(\"string\").and.not.empty;",
													"",
													"    pm.expect(access.startsWith(\"v1.0.\")).to.be.true;",
													"});",
													"",
													"pm.test(\"‚úÖ Access token includes 'aegiszeus' at the end\", function () {",
													"    const access = pm.response.json().access;",
													"    pm.expect(access.endsWith(\"aegiszeus\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"refresh\": \"{{MERCHANT_REFRESH_TOKEN}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/token/refresh",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"token",
												"refresh"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rotate üíö",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('‚úÖ Store Tokens', function () {",
													"    pm.environment.set('MERCHANT_ACCESS_TOKEN', pm.response.json().access);",
													"    pm.environment.set('MERCHANT_REFRESH_TOKEN', pm.response.json().refresh);",
													"});",
													"pm.test(\"‚úÖ Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"‚úÖ Response is JSON\", function () {",
													"    const contentType = pm.response.headers.get(\"Content-Type\");",
													"    pm.expect(contentType).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"‚úÖ Response contains access and refresh tokens\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"access\");",
													"    pm.expect(jsonData).to.have.property(\"refresh\");",
													"});",
													"",
													"pm.test(\"‚úÖ Access and Refresh tokens format\", function () {",
													"    const access = pm.response.json().access;",
													"    const refresh = pm.response.json().refresh;",
													"",
													"    pm.expect(access).to.be.a(\"string\").and.not.empty;",
													"    pm.expect(refresh).to.be.a(\"string\").and.not.empty;",
													"",
													"    pm.expect(access.startsWith(\"v1.0.\")).to.be.true;",
													"    pm.expect(refresh.startsWith(\"v1.0.\")).to.be.true;",
													"});",
													"",
													"pm.test(\"‚úÖ Access token includes 'aegiszeus' at the end\", function () {",
													"    const access = pm.response.json().access;",
													"    pm.expect(access.endsWith(\"aegiszeus\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"refresh\": \"{{MERCHANT_REFRESH_TOKEN}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/aegis/merchant/token/rotate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"aegis",
												"merchant",
												"token",
												"rotate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Login by email üíö",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let secret = pm.environment.get(\"MERCHANT_SECRET\");",
											"let lamdaUrl = pm.environment.get(\"LAMDA_OTP_GENERATOR_BASE_URL\");",
											"",
											"// Corrected: Use template literals with backticks",
											"const requestUrl = `${lamdaUrl}?secret=${secret}`;",
											"",
											"pm.sendRequest(requestUrl, function (err, res) {",
											"    if (err) {",
											"        console.log(\"OTP fetch failed:\", err);",
											"    } else {",
											"        // Added response status check",
											"        if (res.code === 200) {",
											"            const otp = res.json().token;",
											"            pm.environment.set(\"MERCHANT_OTP_CODE\", otp);",
											"        } else {",
											"            console.log(\"Failed to get OTP. Status:\", res.code, \"Response:\", res.body);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('‚úÖ After Response', function () {",
											"    pm.environment.set('MERCHANT_ACCESS_TOKEN', pm.response.json().access);",
											"    pm.environment.set('MERCHANT_REFRESH_TOKEN', pm.response.json().refresh);",
											"});",
											"pm.test(\"‚úÖ Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"‚úÖ Response is JSON\", function () {",
											"    const contentType = pm.response.headers.get(\"Content-Type\");",
											"    pm.expect(contentType).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"‚úÖ Response contains access and refresh tokens\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"access\");",
											"    pm.expect(jsonData).to.have.property(\"refresh\");",
											"    pm.expect(jsonData.access).to.be.a(\"string\").and.not.empty;",
											"    pm.expect(jsonData.refresh).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.test(\"‚úÖ Access token structure is valid\", function () {",
											"    const jsonData = pm.response.json();",
											"    const access = jsonData.access;",
											"    pm.expect(access.split('.').length).to.be.above(1); // Not a strict JWT check but structure",
											"});",
											"",
											"pm.test(\"‚úÖ Refresh token structure is valid\", function () {",
											"    const jsonData = pm.response.json();",
											"    const refresh = jsonData.refresh;",
											"    pm.expect(refresh.split('.').length).to.be.above(1);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{MERCHANT_EMAIL}}\",\n  \"password\": \"{{MERCHANT_PASSWORD}}\",\n  \"mfaCode\": \"{{MERCHANT_OTP_CODE}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/aegis/merchant/auth/login/email",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"aegis",
										"merchant",
										"auth",
										"login",
										"email"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{MERCHANT_ACCESS_TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Gateway üíö",
					"item": [
						{
							"name": "Update üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ PATCH /staff/gateway/:id ‚Äì Update Gateway Details\r",
											"\r",
											"pm.test(\"üîê Auth | Staff access token is valid\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"});\r",
											"\r",
											"// üì¶ Only proceed if body is not empty\r",
											"const hasBody = pm.response.text().length > 0;\r",
											"\r",
											"// pm.test(\"üì¶ Response Format | Should be valid JSON (if body exists)\", function () {\r",
											"//     if (hasBody) {\r",
											"//         pm.response.to.be.withBody;\r",
											"//         pm.response.to.be.json;\r",
											"//     } else {\r",
											"//         console.warn(\"No response body to validate.\");\r",
											"//     }\r",
											"// });\r",
											"\r",
											"if (hasBody) {\r",
											"    let jsonData;\r",
											"    try {\r",
											"        jsonData = pm.response.json();\r",
											"\r",
											"        // ‚úÖ Required fields\r",
											"        pm.test(\"üßæ Response Fields | Should include name, isActive, feePercent, feeConstant\", function () {\r",
											"            pm.expect(jsonData).to.have.property(\"name\");\r",
											"            pm.expect(jsonData).to.have.property(\"isActive\");\r",
											"            pm.expect(jsonData).to.have.property(\"feePercent\");\r",
											"            pm.expect(jsonData).to.have.property(\"feeConstant\");\r",
											"        });\r",
											"\r",
											"        // üî¢ Type checks\r",
											"        pm.test(\"üî¢ Field Types | Fields should have correct types\", function () {\r",
											"            pm.expect(jsonData.name).to.be.a(\"string\");\r",
											"            pm.expect(jsonData.isActive).to.be.a(\"boolean\");\r",
											"            pm.expect(jsonData.feePercent).to.be.a(\"number\");\r",
											"            pm.expect(jsonData.feeConstant).to.be.a(\"number\");\r",
											"        });\r",
											"\r",
											"        // üß™ Value check\r",
											"        pm.test(\"üß™ Updated Values | Should reflect updated input\", function () {\r",
											"            pm.expect(jsonData.name).to.eql(\"FIB\");\r",
											"            pm.expect(jsonData.isActive).to.eql(true);\r",
											"            pm.expect(jsonData.feePercent).to.eql(10.5655);\r",
											"            pm.expect(jsonData.feeConstant).to.eql(10);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.error(\"‚ùå Failed to parse JSON:\", err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ‚è±Ô∏è Performance test (Optional)\r",
											"pm.test(\"‚è±Ô∏è Response Time | Should be fast\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// üîí Security headers\r",
											"// pm.test(\"üîí Security Headers | X-Content-Type-Options is set\", function () {\r",
											"//     pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.eql(\"nosniff\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"üîí Security Headers | X-Frame-Options is set\", function () {\r",
											"//     pm.expect(pm.response.headers.has(\"X-Frame-Options\")).to.be.true;\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"FIB\",\n\t\"isActive\": true,\n\t\"feePercent\": 1,\n\t\"feeConstant\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/staff/gateway/{{STAFF_GATEWAY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"gateway",
										"{{STAFF_GATEWAY_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Staff Traces Paginated üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// üü¢ 1. Status Code Check \r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// ‚è± 2. Performance Check\r",
											"pm.test(\"‚è± Response time < 1500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"// üîí 3. Authorization Check\r",
											"pm.test(\"üõ° Authorization header present\", () => {\r",
											"    pm.request.headers.has('Authorization');\r",
											"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
											"});\r",
											"\r",
											"// üì¶ 4. Response Structure Validation\r",
											"pm.test(\"üì¶ Valid response structure\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object').with.keys([\r",
											"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
											"    ]);\r",
											"    \r",
											"    pm.expect(response.items).to.be.an('array');\r",
											"    response.items.forEach(item => {\r",
											"        pm.expect(item).to.include.keys(\r",
											"            'id', 'createdAt', 'updatedAt', 'description'\r",
											"        );\r",
											"    });\r",
											"});\r",
											"\r",
											"// üî¢ 5. Pagination Validation (FIXED)\r",
											"pm.test(\"üî¢ Valid pagination data\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    pm.expect(res.totalItems).to.be.a('number').and.at.least(1);\r",
											"    pm.expect(res.totalPages).to.be.a('number').and.at.least(1);\r",
											"    pm.expect(res.page).to.be.a('number').and.at.least(1);\r",
											"    pm.expect(res.hasNext).to.be.a('boolean');\r",
											"    pm.expect(res.hasPrev).to.be.a('boolean');\r",
											"    \r",
											"    // Dynamic checks instead of fixed values\r",
											"    pm.expect(res.items.length).to.be.at.most(res.totalItems);\r",
											"    pm.expect(res.page).to.be.at.most(res.totalPages);\r",
											"    pm.expect(res.hasPrev).to.equal(res.page > 1);\r",
											"});\r",
											"\r",
											"// üîç 6. Data Type Validation\r",
											"pm.test(\"üîç Correct data types in items\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.items.forEach(item => {\r",
											"        pm.expect(item.id).to.be.a('number');\r",
											"        pm.expect(item.createdAt).to.be.a('string');\r",
											"        pm.expect(item.updatedAt).to.be.a('string');\r",
											"        pm.expect(item.description).to.be.a('string');\r",
											"        \r",
											"        pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"        pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üìú 7. Description Content Validation\r",
											"pm.test(\"üìú Valid description format\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.items.forEach(item => {\r",
											"        pm.expect(item.description).to.include('Staff');\r",
											"        pm.expect(item.description).to.include('gateway [');\r",
											"        pm.expect(item.description).to.include('updated the gateway');\r",
											"        pm.expect(item.description).to.include('as follows:');\r",
											"    });\r",
											"});\r",
											"\r",
											"// üîÑ 8. Chronological Order Validation\r",
											"pm.test(\"üîÑ Items in reverse chronological order\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    for (let i = 0; i < res.items.length - 1; i++) {\r",
											"        const currentDate = new Date(res.items[i].createdAt);\r",
											"        const nextDate = new Date(res.items[i + 1].createdAt);\r",
											"        pm.expect(currentDate.getTime()).to.be.greaterThan(nextDate.getTime());\r",
											"    }\r",
											"});\r",
											"\r",
											"// üìä 9. Pagination Flag Accuracy\r",
											"pm.test(\"üìä Pagination flags accuracy\", () => {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.hasNext).to.equal(res.page < res.totalPages);\r",
											"    pm.expect(res.hasPrev).to.equal(res.page > 1);\r",
											"});\r",
											"\r",
											"// üßæ 10. Trace ID Validation\r",
											"pm.test(\"üßæ Valid trace IDs\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.items.forEach(item => {\r",
											"        pm.expect(item.id).to.be.a('number').and.above(0);\r",
											"    });\r",
											"    \r",
											"    const ids = res.items.map(item => item.id);\r",
											"    const uniqueIds = [...new Set(ids)];\r",
											"    pm.expect(ids.length).to.equal(uniqueIds.length);\r",
											"});\r",
											"\r",
											"// üìù 12. Environment Variable Storage\r",
											"pm.test(\"üìù Store trace references\", () => {\r",
											"    if (pm.response.json().items.length > 0) {\r",
											"        const firstTrace = pm.response.json().items[0];\r",
											"        pm.environment.set('FIRST_TRACE_ID', firstTrace.id);\r",
											"        pm.environment.set('FIRST_TRACE_CREATED_AT', firstTrace.createdAt);\r",
											"    }\r",
											"});\r",
											"\r",
											"// üßÆ 13. Data Consistency\r",
											"pm.test(\"üßÆ CreatedAt and UpdatedAt consistency\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.items.forEach(item => {\r",
											"        const createdAt = new Date(item.createdAt);\r",
											"        const updatedAt = new Date(item.updatedAt);\r",
											"        pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
											"    });\r",
											"});\r",
											"\r",
											"// üìÖ 14. Recent Activity Check\r",
											"pm.test(\"üìÖ Recent traces are included\", () => {\r",
											"    const res = pm.response.json();\r",
											"    const currentTime = new Date();\r",
											"    \r",
											"    const recentTraces = res.items.filter(item => {\r",
											"        const traceDate = new Date(item.createdAt);\r",
											"        return (currentTime - traceDate) / (1000 * 60 * 60 * 24) <= 7;\r",
											"    });\r",
											"    \r",
											"    pm.expect(recentTraces.length).to.be.at.least(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/staff/gateway/traces/1",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"gateway",
										"traces",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// üü¢ 1. Status Code Check\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// ‚è± 2. Performance Check\r",
											"pm.test(\"‚è± Response time < 1000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// üîí 3. Authorization Check\r",
											"pm.test(\"üõ° Authorization header present\", () => {\r",
											"    pm.request.headers.has('Authorization');\r",
											"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
											"});\r",
											"\r",
											"// üì¶ 4. Response Structure Validation\r",
											"pm.test(\"üì¶ Valid response structure\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.an('object').with.keys(['gateways']);\r",
											"    pm.expect(response.gateways).to.be.an('array');\r",
											"    \r",
											"    response.gateways.forEach(gateway => {\r",
											"        pm.expect(gateway).to.include.keys([\r",
											"            'id', 'code', 'name', 'feePercent', 'feeConstant',\r",
											"            'isActive', 'createdAt', 'updatedAt'\r",
											"        ]);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üîç 5. Data Type Validation\r",
											"pm.test(\"üîç Correct data types\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.gateways.forEach(gateway => {\r",
											"        pm.expect(gateway.id).to.be.a('number');\r",
											"        pm.expect(gateway.code).to.be.a('string');\r",
											"        pm.expect(gateway.name).to.be.a('string');\r",
											"        pm.expect(gateway.feePercent).to.be.a('number');\r",
											"        pm.expect(gateway.feeConstant).to.be.a('number');\r",
											"        pm.expect(gateway.isActive).to.be.a('boolean');\r",
											"        pm.expect(gateway.createdAt).to.be.a('string');\r",
											"        pm.expect(gateway.updatedAt).to.be.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"// üí∞ 6. Fee Validation\r",
											"pm.test(\"üí∞ Valid fee values\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.gateways.forEach(gateway => {\r",
											"        pm.expect(gateway.feePercent).to.be.a('number').and.at.least(0);\r",
											"        pm.expect(gateway.feeConstant).to.be.a('number').and.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üìÖ 7. Timestamp Validation\r",
											"pm.test(\"üìÖ Valid ISO 8601 timestamps\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.gateways.forEach(gateway => {\r",
											"        pm.expect(gateway.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"        pm.expect(gateway.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"        \r",
											"        // UpdatedAt should be >= createdAt\r",
											"        const createdAt = new Date(gateway.createdAt);\r",
											"        const updatedAt = new Date(gateway.updatedAt);\r",
											"        pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
											"    });\r",
											"});\r",
											"\r",
											"// üè∑Ô∏è 8. Gateway Code Validation\r",
											"pm.test(\"üè∑Ô∏è Valid gateway codes\", () => {\r",
											"    const res = pm.response.json();\r",
											"    const validCodes = [\"FIB\", \"ZAIN\"];\r",
											"    \r",
											"    res.gateways.forEach(gateway => {\r",
											"        pm.expect(validCodes).to.include(gateway.code);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üîÑ 9. Name-Code Consistency\r",
											"pm.test(\"üîÑ Name and code consistency\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.gateways.forEach(gateway => {\r",
											"        pm.expect(gateway.name).to.equal(gateway.code);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üîê 10. Security Headers Check\r",
											"// pm.test(\"üîê Security headers present\", () => {\r",
											"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
											"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
											"//     pm.response.to.have.header('Strict-Transport-Security');\r",
											"//     pm.response.to.not.have.header('X-Powered-By');\r",
											"// });\r",
											"\r",
											"// üìù 11. Environment Variable Storage\r",
											"pm.test(\"üìù Store gateway references\", () => {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    \r",
											"    if (gateways.length > 0) {\r",
											"        // Store all gateway codes\r",
											"        const gatewayCodes = gateways.map(g => g.code);\r",
											"        pm.environment.set('GATEWAY_CODES', gatewayCodes.join(','));\r",
											"        \r",
											"        // Store first gateway details\r",
											"        const firstGateway = gateways[0];\r",
											"        pm.environment.set('FIRST_GATEWAY_ID', firstGateway.id);\r",
											"        pm.environment.set('FIRST_GATEWAY_CODE', firstGateway.code);\r",
											"        \r",
											"        // Store FIB gateway details if available\r",
											"        const fibGateway = gateways.find(g => g.code === 'FIB');\r",
											"        if (fibGateway) {\r",
											"            pm.environment.set('FIB_GATEWAY_ID', fibGateway.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"// ‚úÖ 12. Active Gateway Check\r",
											"pm.test(\"‚úÖ At least one active gateway\", () => {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    const activeGateways = gateways.filter(g => g.isActive);\r",
											"    pm.expect(activeGateways.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"// üßæ 13. ID Validation\r",
											"pm.test(\"üßæ Valid gateway IDs\", () => {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    \r",
											"    gateways.forEach(gateway => {\r",
											"        pm.expect(gateway.id).to.be.a('number').and.above(0);\r",
											"    });\r",
											"    \r",
											"    // Check IDs are unique\r",
											"    const ids = gateways.map(g => g.id);\r",
											"    const uniqueIds = [...new Set(ids)];\r",
											"    pm.expect(ids.length).to.equal(uniqueIds.length);\r",
											"});\r",
											"\r",
											"// üìä 14. Gateway Count Check\r",
											"pm.test(\"üìä Minimum gateway count\", () => {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    pm.expect(gateways.length).to.be.at.least(2);\r",
											"});\r",
											"\r",
											"// ‚öôÔ∏è 15. Configuration Consistency\r",
											"pm.test(\"‚öôÔ∏è Gateway configuration consistency\", () => {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    \r",
											"    gateways.forEach(gateway => {\r",
											"        pm.expect(gateway.name.length).to.be.at.least(3);\r",
											"        pm.expect(gateway.code.length).to.be.at.least(3);\r",
											"        pm.expect(gateway.feePercent + gateway.feeConstant).to.be.at.least(0);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/staff/gateway?isCreditCard=true",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"gateway"
									],
									"query": [
										{
											"key": "isCreditCard",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credit Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ PATCH /staff/gateway/:id ‚Äì Update Gateway Details",
											"",
											"pm.test(\"üîê Auth | Staff access token is valid\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"",
											"// üì¶ Only proceed if body is not empty",
											"const hasBody = pm.response.text().length > 0;",
											"",
											"// pm.test(\"üì¶ Response Format | Should be valid JSON (if body exists)\", function () {",
											"//     if (hasBody) {",
											"//         pm.response.to.be.withBody;",
											"//         pm.response.to.be.json;",
											"//     } else {",
											"//         console.warn(\"No response body to validate.\");",
											"//     }",
											"// });",
											"",
											"if (hasBody) {",
											"    let jsonData;",
											"    try {",
											"        jsonData = pm.response.json();",
											"",
											"        // ‚úÖ Required fields",
											"        pm.test(\"üßæ Response Fields | Should include name, isActive, feePercent, feeConstant\", function () {",
											"            pm.expect(jsonData).to.have.property(\"name\");",
											"            pm.expect(jsonData).to.have.property(\"isActive\");",
											"            pm.expect(jsonData).to.have.property(\"feePercent\");",
											"            pm.expect(jsonData).to.have.property(\"feeConstant\");",
											"        });",
											"",
											"        // üî¢ Type checks",
											"        pm.test(\"üî¢ Field Types | Fields should have correct types\", function () {",
											"            pm.expect(jsonData.name).to.be.a(\"string\");",
											"            pm.expect(jsonData.isActive).to.be.a(\"boolean\");",
											"            pm.expect(jsonData.feePercent).to.be.a(\"number\");",
											"            pm.expect(jsonData.feeConstant).to.be.a(\"number\");",
											"        });",
											"",
											"        // üß™ Value check",
											"        pm.test(\"üß™ Updated Values | Should reflect updated input\", function () {",
											"            pm.expect(jsonData.name).to.eql(\"FIB\");",
											"            pm.expect(jsonData.isActive).to.eql(true);",
											"            pm.expect(jsonData.feePercent).to.eql(10.5655);",
											"            pm.expect(jsonData.feeConstant).to.eql(10);",
											"        });",
											"",
											"    } catch (err) {",
											"        console.error(\"‚ùå Failed to parse JSON:\", err);",
											"    }",
											"}",
											"",
											"// ‚è±Ô∏è Performance test (Optional)",
											"pm.test(\"‚è±Ô∏è Response Time | Should be fast\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"// üîí Security headers",
											"// pm.test(\"üîí Security Headers | X-Content-Type-Options is set\", function () {",
											"//     pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.eql(\"nosniff\");",
											"// });",
											"",
											"// pm.test(\"üîí Security Headers | X-Frame-Options is set\", function () {",
											"//     pm.expect(pm.response.headers.has(\"X-Frame-Options\")).to.be.true;",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": true\n}√ü",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/staff/gateway/credit-card/{{STAFF_GATEWAY_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"gateway",
										"credit-card",
										"{{STAFF_GATEWAY_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Merchant",
					"item": [
						{
							"name": "Gateway",
							"item": [
								{
									"name": "Get üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance Check\r",
													"pm.test(\"‚è± Response time < 1500ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"// üîí 3. Authorization Check\r",
													"pm.test(\"üõ° Authorization header present\", () => {\r",
													"    pm.request.headers.has('Authorization');\r",
													"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
													"});\r",
													"\r",
													"// üì¶ 4. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.be.an('object').with.keys(['gateways']);\r",
													"    pm.expect(response.gateways).to.be.an('array');\r",
													"    \r",
													"    response.gateways.forEach(gateway => {\r",
													"        pm.expect(gateway).to.include.keys([\r",
													"            'id', 'code', 'name', 'feePercent', 'feeConstant',\r",
													"            'isActive', 'isEnabledByStaff'\r",
													"        ]);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîç 5. Data Type Validation\r",
													"pm.test(\"üîç Correct data types\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.gateways.forEach(gateway => {\r",
													"        pm.expect(gateway.id).to.be.a('string');\r",
													"        pm.expect(gateway.code).to.be.a('string');\r",
													"        pm.expect(gateway.name).to.be.a('string');\r",
													"        pm.expect(gateway.feePercent).to.be.a('number');\r",
													"        pm.expect(gateway.feeConstant).to.be.a('number');\r",
													"        pm.expect(gateway.isActive).to.be.a('boolean');\r",
													"        pm.expect(gateway.isEnabledByStaff).to.be.a('boolean');\r",
													"    });\r",
													"});\r",
													"\r",
													"// üí∞ 6. Fee Validation\r",
													"pm.test(\"üí∞ Valid fee values\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.gateways.forEach(gateway => {\r",
													"        pm.expect(gateway.feePercent).to.be.a('number').and.at.least(0);\r",
													"        pm.expect(gateway.feeConstant).to.be.a('number').and.at.least(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üè∑Ô∏è 7. Gateway Code Validation\r",
													"pm.test(\"üè∑Ô∏è Valid gateway codes\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const validCodes = [\"FIB\", \"ZAIN\", \"MTN\", \"ZIRA\", \"MANUAL\"];\r",
													"    \r",
													"    res.gateways.forEach(gateway => {\r",
													"        pm.expect(validCodes).to.include(gateway.code);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîÑ 8. Name-Code Consistency\r",
													"pm.test(\"üîÑ Name and code consistency\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.gateways.forEach(gateway => {\r",
													"        pm.expect(gateway.name).to.equal(gateway.code);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚úÖ 9. Active Status Check\r",
													"pm.test(\"‚úÖ Active gateways present\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const activeGateways = res.gateways.filter(g => g.isActive);\r",
													"    pm.expect(activeGateways.length).to.be.at.least(1);\r",
													"});\r",
													"\r",
													"// üîê 10. Security Headers Check\r",
													"// pm.test(\"üîê Security headers present\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"//     pm.response.to.have.header('Strict-Transport-Security');\r",
													"//     pm.response.to.not.have.header('X-Powered-By');\r",
													"// });\r",
													"\r",
													"// üìù 11. Environment Variable Storage\r",
													"pm.test(\"üìù Store gateway references\", () => {\r",
													"    const gateways = pm.response.json().gateways;\r",
													"    \r",
													"    if (gateways.length > 0) {\r",
													"        // Store merchant's gateway IDs\r",
													"        const gatewayIds = gateways.map(g => g.id);\r",
													"        pm.environment.set('MERCHANT_GATEWAY_IDS', gatewayIds.join(','));\r",
													"        \r",
													"        // Store FIB gateway details\r",
													"        const fibGateway = gateways.find(g => g.code === 'FIB');\r",
													"        if (fibGateway) {\r",
													"            pm.environment.set('MERCHANT_FIB_ID', fibGateway.id);\r",
													"            pm.environment.set('MERCHANT_FIB_ENABLED', fibGateway.isEnabledByStaff);\r",
													"        }\r",
													"        \r",
													"        // Store ZAIN gateway details\r",
													"        const zainGateway = gateways.find(g => g.code === 'ZAIN');\r",
													"        if (zainGateway) {\r",
													"            pm.environment.set('MERCHANT_ZAIN_ID', zainGateway.id);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"// ‚öôÔ∏è 13. Staff Enablement Check\r",
													"pm.test(\"‚öôÔ∏è Staff-enabled gateways\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const staffEnabled = res.gateways.filter(g => g.isEnabledByStaff);\r",
													"    pm.expect(staffEnabled.length).to.be.at.least(1);\r",
													"});\r",
													"\r",
													"// üìä 14. Gateway Count Check\r",
													"pm.test(\"üìä Minimum gateway count\", () => {\r",
													"    const gateways = pm.response.json().gateways;\r",
													"    pm.expect(gateways.length).to.be.at.least(2);\r",
													"});\r",
													"\r",
													"// üîó 15. Merchant ID Consistency\r",
													"// pm.test(\"üîó Merchant ID matches request\", () => {\r",
													"//     const merchantId = pm.request.url.path.get(-1); // Get last path segment\r",
													"//     pm.expect(merchantId).to.match(/^\\d+$/); // Should be numeric\r",
													"//     pm.environment.set('CURRENT_MERCHANT_ID', merchantId);\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/gateway/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"gateway",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const text = pm.response.text();\r",
													"const hasBody = text && text.trim().length > 0;\r",
													"const safeJson = (txt) => {\r",
													"    try { return JSON.parse(txt); } catch (e) { return null; }\r",
													"};\r",
													"const json = hasBody ? safeJson(text) : null;\r",
													"\r",
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì° 2. Request method should be GET\r",
													"pm.test(\"üì° Request method is PATCH\", function () {\r",
													"    pm.expect(pm.request.method).to.eql(\"PATCH\");\r",
													"});\r",
													"\r",
													"// üõ° 3. Authorization Check\r",
													"pm.test(\"üõ° Authorization header present and Bearer token used\", function () {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
													"    const auth = pm.request.headers.get(\"Authorization\") || \"\";\r",
													"    pm.expect(auth).to.include(\"Bearer\");\r",
													"    // optionally store token (trim \"Bearer \")\r",
													"    if (auth.toLowerCase().startsWith(\"bearer \")) {\r",
													"        pm.environment.set(\"LAST_STAFF_AUTH_TOKEN\", auth.split(\" \")[1]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üß≠ 4. Request URL / ID presence\r",
													"pm.test(\"üß≠ Request URL contains an ID path segment\", function () {\r",
													"    // pm.request.url.path is an array of path segments\r",
													"    const path = pm.request.url && pm.request.url.path ? pm.request.url.path : [];\r",
													"    const lastSeg = path.length ? path[path.length - 1] : \"\";\r",
													"    pm.expect(lastSeg).to.match(/^\\d+$/);\r",
													"    pm.environment.set(\"LAST_REQUESTED_STAFF_MERCHANT_GATEWAY_ID\", lastSeg);\r",
													"});\r",
													"\r",
													"// ‚ö†Ô∏è 5. GET should not include a request body (warning)\r",
													"pm.test(\"‚ö†Ô∏è GET request should ideally not have a body (informational)\", function () {\r",
													"    const body = pm.request.body ? (pm.request.body.raw || \"\") : \"\";\r",
													"    if (body && body.trim().length > 0) {\r",
													"        // Log a warning but don't fail the whole test-suite\r",
													"        console.warn(\"GET request contains a body ‚Äî consider using query params or POST/PATCH instead.\");\r",
													"        pm.expect(true).to.be.true; // keep test green but log warning to console\r",
													"    } else {\r",
													"        pm.expect(true).to.be.true;\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚è± 6. Performance Check\r",
													"pm.test(\"‚è± Response time is acceptable (< 1500ms)\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"// üì¶ 7. Response is empty OR valid JSON\r",
													"pm.test(\"üì¶ Response body is empty or valid JSON\", function () {\r",
													"    if (!hasBody) {\r",
													"        pm.expect(text).to.eql(\"\");\r",
													"    } else {\r",
													"        pm.response.to.be.json;\r",
													"        pm.expect(json).to.be.an(\"object\");\r",
													"    }\r",
													"});\r",
													"\r",
													"// üßæ 8. If JSON: expected fields & types (tolerant)\r",
													"if (hasBody && json) {\r",
													"    pm.test(\"üßæ Response contains expected top-level fields if present\", function () {\r",
													"        // We don't know exact schema; check for common/important fields if they exist\r",
													"        const candidateKeys = [\r",
													"            \"id\", \"merchantAccountId\", \"isEnabledByStaff\",\r",
													"            \"gatewayId\", \"isEnabled\", \"createdAt\", \"updatedAt\"\r",
													"        ];\r",
													"        candidateKeys.forEach(k => {\r",
													"            if (Object.prototype.hasOwnProperty.call(json, k)) {\r",
													"                pm.expect(json[k]).to.not.be.undefined;\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"\r",
													"    pm.test(\"üî¢ Field types (if present) are reasonable\", function () {\r",
													"        if (\"id\" in json) pm.expect(json.id).to.be.a(\"number\");\r",
													"        if (\"merchantAccountId\" in json) pm.expect(json.merchantAccountId).to.be.a(\"number\");\r",
													"        if (\"isEnabledByStaff\" in json) pm.expect(typeof json.isEnabledByStaff).to.be.oneOf([\"boolean\", \"string\"]);\r",
													"        if (\"createdAt\" in json) pm.expect(json.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T/);\r",
													"        if (\"updatedAt\" in json) pm.expect(json.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T/);\r",
													"    });\r",
													"\r",
													"    pm.test(\"üîé If 'description' exists, it should be a non-empty string\", function () {\r",
													"        if (\"description\" in json) {\r",
													"            pm.expect(json.description).to.be.a(\"string\");\r",
													"            pm.expect(json.description.trim().length).to.be.above(0);\r",
													"        }\r",
													"    });\r",
													"\r",
													"    // Store some useful values for later requests/tests\r",
													"    if (\"id\" in json) pm.environment.set(\"LAST_STAFF_MERCHANT_GATEWAY_RESPONSE_ID\", json.id);\r",
													"    if (\"merchantAccountId\" in json) pm.environment.set(\"LAST_MERCHANT_ACCOUNT_ID\", json.merchantAccountId);\r",
													"}\r",
													"\r",
													"// üîê 9. Security Headers (check if present ‚Äî do not fail if absent, but assert correct values if they exist)\r",
													"// pm.test(\"üîê Security headers (if present) have expected values\", function () {\r",
													"//     const headers = pm.response.headers;\r",
													"//     const xcto = headers.get(\"X-Content-Type-Options\");\r",
													"//     const xfo = headers.get(\"X-Frame-Options\");\r",
													"//     const hsts = headers.get(\"Strict-Transport-Security\");\r",
													"\r",
													"//     if (xcto !== null) pm.expect(xcto.toLowerCase()).to.eql(\"nosniff\");\r",
													"//     if (xfo !== null) pm.expect(typeof xfo).to.be.a(\"string\");\r",
													"//     if (hsts !== null) pm.expect(hsts).to.match(/max-age=\\d+/);\r",
													"// });\r",
													"\r",
													"// üîé 10. CORS & caching suggestions (informational)\r",
													"pm.test(\"üîé Informational: CORS & Cache headers (logged if present)\", function () {\r",
													"    const cache = pm.response.headers.get(\"Cache-Control\");\r",
													"    const cors = pm.response.headers.get(\"Access-Control-Allow-Origin\");\r",
													"    if (cache) console.log(\"Cache-Control:\", cache);\r",
													"    if (cors) console.log(\"CORS allowed origin:\", cors);\r",
													"    pm.expect(true).to.be.true;\r",
													"});\r",
													"\r",
													"// üßÆ 11. Consistency: updatedAt >= createdAt (if both present)\r",
													"if (hasBody && json && json.createdAt && json.updatedAt) {\r",
													"    pm.test(\"üßÆ updatedAt is >= createdAt\", function () {\r",
													"        const c = new Date(json.createdAt).getTime();\r",
													"        const u = new Date(json.updatedAt).getTime();\r",
													"        pm.expect(u).to.be.at.least(c);\r",
													"    });\r",
													"}\r",
													"\r",
													"// üßæ 12. Final: Helpful Console Output\r",
													"console.log(\"GET /staff/merchant/gateway/:id ‚Äî hasBody:\", hasBody, \"responseTime(ms):\", pm.response.responseTime);\r",
													"if (hasBody) console.log(\"Response JSON keys:\", Object.keys(json));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"merchantAccountId\": 2,\n\t\"isEnabledByStaff\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/gateway/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"gateway",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Merchant Traces Paginated üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// -----------------------------\r",
													"// GET /staff/merchant/gateway/traces/:merchantAccountId\r",
													"// Comprehensive Postman Tests (English) ‚Äî tolerant & safe\r",
													"// -----------------------------\r",
													"\r",
													"// Helpers\r",
													"const rawText = pm.response.text();\r",
													"const hasBody = rawText && rawText.trim().length > 0;\r",
													"const safeJson = (txt) => {\r",
													"    try { return JSON.parse(txt); } catch (e) { return null; }\r",
													"};\r",
													"const res = hasBody ? safeJson(rawText) : null;\r",
													"\r",
													"// üü¢ 1. Status Code\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì° 2. Request method check\r",
													"pm.test(\"üì° Request method is GET\", function () {\r",
													"    pm.expect(pm.request.method).to.eql(\"GET\");\r",
													"});\r",
													"\r",
													"// üõ° 3. Authorization header\r",
													"pm.test(\"üõ° Authorization header present and Bearer token used\", function () {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
													"    const auth = pm.request.headers.get(\"Authorization\") || \"\";\r",
													"    pm.expect(auth).to.include(\"Bearer\");\r",
													"    if (auth.toLowerCase().startsWith(\"bearer \")) {\r",
													"        pm.environment.set(\"LAST_STAFF_AUTH_TOKEN\", auth.split(\" \")[1]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üß≠ 4. URL contains merchantAccountId path segment\r",
													"pm.test(\"üß≠ Request path includes merchantAccountId\", function () {\r",
													"    const path = pm.request.url && pm.request.url.path ? pm.request.url.path : [];\r",
													"    const lastSeg = path.length ? path[path.length - 1] : \"\";\r",
													"    // If environment variable exists, match it; otherwise just assert there's a numeric id\r",
													"    const expectedMerchantId = pm.environment.get(\"MERCHANT_ACCOUNT_ID\");\r",
													"    if (expectedMerchantId) {\r",
													"        pm.expect(lastSeg).to.eql(String(expectedMerchantId));\r",
													"    } else {\r",
													"        pm.expect(lastSeg).to.match(/^\\d+$/);\r",
													"        pm.environment.set(\"MERCHANT_ACCOUNT_ID\", lastSeg);\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚è± 5. Performance\r",
													"pm.test(\"‚è± Response time is acceptable (< 1500ms)\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"// üì¶ 6. Body is empty OR valid JSON\r",
													"pm.test(\"üì¶ Response body is empty or valid JSON\", function () {\r",
													"    if (!hasBody) {\r",
													"        pm.expect(rawText).to.eql(\"\");\r",
													"    } else {\r",
													"        pm.response.to.be.json;\r",
													"        pm.expect(res).to.be.an(\"object\");\r",
													"    }\r",
													"});\r",
													"\r",
													"// If we have JSON, validate structure and content\r",
													"if (hasBody && res) {\r",
													"\r",
													"    // üì¶ 7. Top-level structure\r",
													"    pm.test(\"üì¶ Top-level fields exist (items, totalItems, totalPages, page, hasNext, hasPrev)\", function () {\r",
													"        pm.expect(res).to.be.an(\"object\");\r",
													"        pm.expect(res).to.have.property(\"items\").that.is.an(\"array\");\r",
													"        pm.expect(res).to.have.property(\"totalItems\");\r",
													"        pm.expect(res).to.have.property(\"totalPages\");\r",
													"        pm.expect(res).to.have.property(\"page\");\r",
													"        pm.expect(res).to.have.property(\"hasNext\");\r",
													"        pm.expect(res).to.have.property(\"hasPrev\");\r",
													"    });\r",
													"\r",
													"    // üî¢ 8. Pagination numeric types & sanity\r",
													"    pm.test(\"üî¢ Pagination fields are numbers / booleans and sane\", function () {\r",
													"        pm.expect(res.totalItems).to.be.a(\"number\");\r",
													"        pm.expect(res.totalPages).to.be.a(\"number\");\r",
													"        pm.expect(res.page).to.be.a(\"number\");\r",
													"        pm.expect(res.hasNext).to.be.a(\"boolean\");\r",
													"        pm.expect(res.hasPrev).to.be.a(\"boolean\");\r",
													"\r",
													"        // Basic consistency\r",
													"        pm.expect(res.items.length).to.be.at.most(res.totalItems);\r",
													"        pm.expect(res.page).to.be.at.most(Math.max(1, res.totalPages));\r",
													"        pm.expect(res.hasNext).to.eql(res.page < res.totalPages);\r",
													"        pm.expect(res.hasPrev).to.eql(res.page > 1);\r",
													"    });\r",
													"\r",
													"    // üßæ 9. Items content & types\r",
													"    pm.test(\"üßæ Each item has id (number), createdAt & updatedAt (ISO string), description (non-empty string)\", function () {\r",
													"        res.items.forEach(item => {\r",
													"            pm.expect(item).to.have.property(\"id\");\r",
													"            pm.expect(item.id).to.be.a(\"number\").and.to.be.above(0);\r",
													"\r",
													"            pm.expect(item).to.have.property(\"createdAt\");\r",
													"            pm.expect(item.createdAt).to.be.a(\"string\");\r",
													"            pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"\r",
													"            pm.expect(item).to.have.property(\"updatedAt\");\r",
													"            pm.expect(item.updatedAt).to.be.a(\"string\");\r",
													"            pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"\r",
													"            pm.expect(item).to.have.property(\"description\");\r",
													"            pm.expect(item.description).to.be.a(\"string\");\r",
													"            pm.expect(item.description.trim().length).to.be.above(0);\r",
													"\r",
													"            // updatedAt must be >= createdAt\r",
													"            const c = new Date(item.createdAt).getTime();\r",
													"            const u = new Date(item.updatedAt).getTime();\r",
													"            pm.expect(u).to.be.at.least(c);\r",
													"        });\r",
													"    });\r",
													"\r",
													"    // üîÑ 10. Reverse chronological order (newest first)\r",
													"    pm.test(\"üîÑ Items are in reverse chronological order (createdAt descending)\", function () {\r",
													"        for (let i = 0; i < res.items.length - 1; i++) {\r",
													"            const cur = new Date(res.items[i].createdAt).getTime();\r",
													"            const next = new Date(res.items[i + 1].createdAt).getTime();\r",
													"            pm.expect(cur).to.be.at.least(next);\r",
													"        }\r",
													"    });\r",
													"\r",
													"    // üîç 11. Description format checks\r",
													"    pm.test(\"üîç Description contains 'updated the gateway' and bracketed gateway name\", function () {\r",
													"        const bracketRegex = /\\[([^\\]]+)\\]/; // captures what's inside brackets\r",
													"        res.items.forEach(item => {\r",
													"            pm.expect(item.description).to.match(/updated the gateway/i);\r",
													"            pm.expect(item.description).to.match(bracketRegex);\r",
													"        });\r",
													"    });\r",
													"\r",
													"    // üßæ 12. IDs are unique\r",
													"    pm.test(\"üßæ Item IDs are unique\", function () {\r",
													"        const ids = res.items.map(i => i.id);\r",
													"        const uniqueIds = [...new Set(ids)];\r",
													"        pm.expect(uniqueIds.length).to.eql(ids.length);\r",
													"    });\r",
													"\r",
													"    // üìÖ 13. Recent activity: at least one item in last 30 days (adjust threshold as needed)\r",
													"    pm.test(\"üìÖ At least one trace in the last 30 days (informational)\", function () {\r",
													"        const now = Date.now();\r",
													"        const days30 = 30 * 24 * 60 * 60 * 1000;\r",
													"        const recent = res.items.filter(i => (now - new Date(i.createdAt).getTime()) <= days30);\r",
													"        pm.expect(recent.length).to.be.at.least(+0);\r",
													"    });\r",
													"\r",
													"    // üìù 14. Save first item to environment for chaining\r",
													"    if (res.items.length > 0) {\r",
													"        const first = res.items[0];\r",
													"        pm.environment.set(\"FIRST_TRACE_ID\", first.id);\r",
													"        pm.environment.set(\"FIRST_TRACE_CREATED_AT\", first.createdAt);\r",
													"    }\r",
													"\r",
													"    // üßÆ 15. Sanity: totalItems equals reported value (flexible)\r",
													"    pm.test(\"üßÆ totalItems matches returned count (page-level)\", function () {\r",
													"        // If totalItems equals full dataset count across pages, just ensure it's >= current items\r",
													"        pm.expect(res.totalItems).to.be.at.least(res.items.length);\r",
													"    });\r",
													"}\r",
													"\r",
													"// üîê 16. Conditional security header checks (won't fail if absent)\r",
													"// pm.test(\"üîê Security headers (if present) have expected forms\", function () {\r",
													"//     const xcto = pm.response.headers.get(\"X-Content-Type-Options\");\r",
													"//     const xfo = pm.response.headers.get(\"X-Frame-Options\");\r",
													"//     const hsts = pm.response.headers.get(\"Strict-Transport-Security\");\r",
													"\r",
													"//     if (xcto !== null) pm.expect(xcto.toLowerCase()).to.eql(\"nosniff\");\r",
													"//     if (xfo !== null) pm.expect(typeof xfo).to.eql(\"string\");\r",
													"//     if (hsts !== null) pm.expect(hsts).to.match(/max-age=\\d+/);\r",
													"// });\r",
													"\r",
													"// ‚úÖ Final log for debugging\r",
													"console.log(\"GET /staff/merchant/gateway/traces/:merchantAccountId ‚Äî hasBody:\", hasBody, \"items:\", hasBody && res ? res.items.length : 0, \"responseTime(ms):\", pm.response.responseTime);\r",
													"if (hasBody && res) console.log(\"Top-level keys:\", Object.keys(res));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/gateway/traces/{{MERCHANT_ACCOUNT_ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"gateway",
												"traces",
												"{{MERCHANT_ACCOUNT_ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ticket üíö",
							"item": [
								{
									"name": "Create ticket üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// -----------------------------\r",
													"// POST /staff/merchant/ticket?= ‚Äî Comprehensive Postman Tests\r",
													"// -----------------------------\r",
													"\r",
													"// Helpers\r",
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"const safeJson = txt => { try { return JSON.parse(txt); } catch (e) { return null; } };\r",
													"const data = hasBody ? safeJson(raw) : null;\r",
													"\r",
													"// try to extract merchantId from request form-data (if available)\r",
													"let requestMerchantId = null;\r",
													"try {\r",
													"    if (pm.request && pm.request.body && pm.request.body.mode === 'formdata' && pm.request.body.formdata) {\r",
													"        const members = pm.request.body.formdata.members || pm.request.body.formdata;\r",
													"        // members may be array of {key, value}\r",
													"        if (Array.isArray(members)) {\r",
													"            members.forEach(m => {\r",
													"                if (String(m.key || m.name) === 'merchantId') requestMerchantId = String(m.value);\r",
													"            });\r",
													"        } else if (typeof members === 'object') {\r",
													"            // fallback: try iterate properties\r",
													"            Object.values(members).forEach(m => {\r",
													"                if (m && (m.key === 'merchantId' || m.name === 'merchantId')) requestMerchantId = String(m.value || m.value);\r",
													"            });\r",
													"        }\r",
													"    }\r",
													"} catch (e) {\r",
													"    // ignore extraction errors\r",
													"}\r",
													"\r",
													"// If env var MERCHANT_ID exists use it as expected merchantId\r",
													"const envMerchantId = pm.environment.get('MERCHANT_ID') || pm.collectionVariables.get('MERCHANT_ID') || null;\r",
													"\r",
													"// ---------- Tests ----------\r",
													"\r",
													"// üü¢ 1. Status code (created or ok)\r",
													"pm.test(\"‚úÖ Status code is 201 Created or 200 OK\", () => {\r",
													"    pm.expect([200, 201]).to.include(pm.response.code);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"// üîí 3. Authorization header present\r",
													"pm.test(\"üîí Authorization header present and Bearer token used\", () => {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
													"    const auth = pm.request.headers.get(\"Authorization\") || \"\";\r",
													"    pm.expect(auth).to.be.a('string').and.to.include(\"Bearer\");\r",
													"    if (auth.toLowerCase().startsWith(\"bearer \")) {\r",
													"        pm.environment.set(\"LAST_STAFF_TOKEN\", auth.split(\" \")[1]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üìÆ 4. Request body mode (FormData) ‚Äî soft check\r",
													"pm.test(\"üìÆ Request was sent as form-data\", () => {\r",
													"    // this is a soft check ‚Äî if not formdata, we log and continue\r",
													"    if (pm.request && pm.request.body) {\r",
													"        pm.expect(pm.request.body.mode === 'formdata' || pm.request.body.mode === 'raw' || pm.request.body.mode === 'urlencoded').to.be.true;\r",
													"    } else {\r",
													"        pm.expect(true).to.be.true; // can't inspect request body, don't fail\r",
													"    }\r",
													"});\r",
													"\r",
													"// üì¶ 5. Content-Type includes application/json (response)\r",
													"pm.test(\"üì¶ Content-Type includes application/json (if body present)\", () => {\r",
													"    const ct = pm.response.headers.get('content-type');\r",
													"    if (hasBody) {\r",
													"        pm.expect(ct && ct.toLowerCase()).to.include('application/json');\r",
													"    } else {\r",
													"        // If body empty, fail this test to surface unexpected empty body\r",
													"        pm.expect(hasBody, \"Expected non-empty JSON response body\").to.be.true;\r",
													"    }\r",
													"});\r",
													"\r",
													"// üìú 6. Response is valid JSON and top-level fields\r",
													"pm.test(\"üìú Response is valid JSON and includes expected fields\", () => {\r",
													"    pm.response.to.be.json;\r",
													"    pm.expect(data).to.be.an('object');\r",
													"    const expectedKeys = [\r",
													"        \"id\",\r",
													"        \"createdAt\",\r",
													"        \"updatedAt\",\r",
													"        \"title\",\r",
													"        \"subject\",\r",
													"        \"status\",\r",
													"        \"canAnswer\",\r",
													"        \"merchantAccount\"\r",
													"    ];\r",
													"    expectedKeys.forEach(k => pm.expect(data).to.have.property(k));\r",
													"});\r",
													"\r",
													"// üî¢ 7. Field types & values\r",
													"pm.test(\"üî¢ Field types & basic values\", () => {\r",
													"    pm.expect(data.id).to.be.a('number').and.to.be.above(0);\r",
													"    pm.expect(data.title).to.be.a('string').and.not.empty;\r",
													"    pm.expect(data.subject).to.be.a('string').and.not.empty;\r",
													"    pm.expect(data.status).to.be.a('string');\r",
													"    pm.expect(data.canAnswer).to.be.a('boolean');\r",
													"\r",
													"    // repliedAt may be null or ISO string ‚Äî if present, must be valid ISO\r",
													"    if (data.repliedAt !== null && data.repliedAt !== undefined) {\r",
													"        pm.expect(data.repliedAt).to.be.a('string');\r",
													"        pm.expect(data.repliedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    }\r",
													"\r",
													"    // createdAt / updatedAt ISO format\r",
													"    pm.expect(data.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    pm.expect(data.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"});\r",
													"\r",
													"// üîó 8. Relationship: merchantAccount.id matches requested merchantId (if available)\r",
													"pm.test(\"üîó merchantAccount.id matches provided merchantId (if provided)\", () => {\r",
													"    pm.expect(data.merchantAccount, \"merchantAccount must exist\").to.be.an('object');\r",
													"    pm.expect(data.merchantAccount.id).to.be.a('number').and.to.be.above(0);\r",
													"\r",
													"    if (requestMerchantId) {\r",
													"        pm.expect(String(data.merchantAccount.id)).to.eql(String(requestMerchantId));\r",
													"    } else if (envMerchantId) {\r",
													"        pm.expect(String(data.merchantAccount.id)).to.eql(String(envMerchantId));\r",
													"    } else {\r",
													"        // no merchantId in request or env ‚Äî just assert presence\r",
													"        pm.expect(true).to.be.true;\r",
													"    }\r",
													"\r",
													"    // Save merchant id for chaining\r",
													"    pm.environment.set('NEW_STAFF_TICKET_MERCHANT_ID', String(data.merchantAccount.id));\r",
													"});\r",
													"\r",
													"// üß≠ 9. Status correctness ‚Äî expect IN_PROGRESS or OPEN for staff created ticket\r",
													"pm.test(\"üß≠ Ticket status is valid and expected\", () => {\r",
													"    const allowed = ['OPEN','IN_PROGRESS','CLOSED','PENDING','RESOLVED'];\r",
													"    pm.expect(allowed).to.include(data.status);\r",
													"    // if canAnswer=true, typically status should be IN_PROGRESS or OPEN (soft expectation)\r",
													"    if (data.canAnswer === true) {\r",
													"        pm.expect(['IN_PROGRESS','OPEN']).to.include(data.status);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üßæ 10. createdAt == updatedAt for newly created resource (common expectation)\r",
													"pm.test(\"üßæ createdAt and updatedAt are equal for new resource (if just created)\", () => {\r",
													"    const created = new Date(data.createdAt).getTime();\r",
													"    const updated = new Date(data.updatedAt).getTime();\r",
													"    pm.expect(updated).to.eql(created);\r",
													"});\r",
													"\r",
													"// üß™ 11. ID uniqueness saved & environment storage\r",
													"pm.test(\"üß™ Save ticket id and createdAt to environment for chaining\", () => {\r",
													"    pm.environment.set('NEW_STAFF_TICKET_ID', String(data.id));\r",
													"    pm.environment.set('NEW_STAFF_TICKET_CREATED_AT', String(data.createdAt));\r",
													"    pm.expect(Number(data.id)).to.be.a('number').and.to.be.above(0);\r",
													"});\r",
													"\r",
													"// üîê 12. Security headers (non-strict, optional)\r",
													"// pm.test(\"üîê Security headers (optional checks)\", () => {\r",
													"//     const xcto = pm.response.headers.get(\"x-content-type-options\");\r",
													"//     const xfo  = pm.response.headers.get(\"x-frame-options\");\r",
													"//     const hsts = pm.response.headers.get(\"strict-transport-security\");\r",
													"//     if (xcto) pm.expect(xcto.toLowerCase()).to.eql(\"nosniff\");\r",
													"//     if (xfo) pm.expect(typeof xfo).to.eql(\"string\");\r",
													"//     if (hsts) pm.expect(hsts).to.match(/max-age=\\d+/);\r",
													"// });\r",
													"\r",
													"// ‚úâÔ∏è 13. Response content sanity ‚Äî title/subject/text reflect input (best-effort)\r",
													"pm.test(\"‚úâÔ∏è Response content sanity matches request (best-effort)\", () => {\r",
													"    // Best-effort: try to read request form-data values if available\r",
													"    try {\r",
													"        if (pm.request && pm.request.body && pm.request.body.mode === 'formdata') {\r",
													"            const members = pm.request.body.formdata.members || pm.request.body.formdata;\r",
													"            const mObj = {};\r",
													"            if (Array.isArray(members)) {\r",
													"                members.forEach(m => { mObj[m.key || m.name] = m.value; });\r",
													"            } else if (typeof members === 'object') {\r",
													"                Object.values(members).forEach(m => { mObj[m.key || m.name] = m.value; });\r",
													"            }\r",
													"            if (mObj.title) pm.expect(String(data.title)).to.eql(String(mObj.title));\r",
													"            if (mObj.subject) pm.expect(String(data.subject)).to.eql(String(mObj.subject));\r",
													"        }\r",
													"    } catch (e) {\r",
													"        // not fatal ‚Äî best-effort only\r",
													"        console.log(\"‚úâÔ∏è Could not assert request -> response content equality:\", e);\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚úÖ 14. Final debug print\r",
													"console.log(\"POST /staff/merchant/ticket ‚Äî status:\", pm.response.code, \"bodyPresent:\", hasBody, \"ticketId:\", data && data.id, \"merchantId:\", data && data.merchantAccount && data.merchantAccount.id);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "issue with login"
												},
												{
													"key": "subject",
													"value": "TECHNICAL_SUPPORT"
												},
												{
													"key": "text",
													"value": "Hi, This is a Test Ticket"
												},
												{
													"key": "merchantId",
													"value": "2"
												},
												{
													"key": "files",
													"type": "file",
													"src": "postman-cloud:///1f075cee-0725-4f30-8275-6918e600ae65"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/ticket?=",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"ticket"
											],
											"query": [
												{
													"key": "",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Message üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üõ†Ô∏è Basic Status Check\r",
													"pm.test(\"‚úÖ Status Code is 201 Created\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// üì¶ Response Format\r",
													"pm.test(\"üì¶ Response should be empty\", function () {\r",
													"    pm.expect(pm.response.text().trim()).to.eql('');\r",
													"});\r",
													"\r",
													"// üîí Security: Should not expose sensitive headers\r",
													"// pm.test(\"üîí No sensitive headers exposed\", function () {\r",
													"//     const forbiddenHeaders = ['X-Powered-By', 'Server', 'Set-Cookie'];\r",
													"//     forbiddenHeaders.forEach(header => {\r",
													"//         pm.expect(pm.response.headers.has(header)).to.eql(false, `${header} should not be exposed`);\r",
													"//     });\r",
													"// });\r",
													"\r",
													"// ‚è±Ô∏è Performance: Response time should be reasonable\r",
													"pm.test(\"‚è±Ô∏è Response time is under 1 second\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"// üìú Method Validation\r",
													"pm.test(\"üìú Request method should be POST\", function () {\r",
													"    pm.expect(pm.request.method).to.eql(\"POST\");\r",
													"});\r",
													"\r",
													"// üîë Authentication: Access token should be present\r",
													"pm.test(\"üîë Auth token is set\", function () {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.eql(true);\r",
													"    pm.expect(pm.request.headers.get(\"Authorization\")).to.match(/^Bearer\\s.+/);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "text",
													"value": "enjoy b"
												},
												{
													"key": "files",
													"type": "file",
													"src": "postman-cloud:///1f07693d-2a27-4e60-8ab7-09620318cef4",
													"disabled": true
												},
												{
													"key": "files",
													"type": "file",
													"src": "postman-cloud:///1f07693d-384e-4f20-917b-7c1eb4c69b3b",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/ticket/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"ticket",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "36"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Close üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// -----------------------------\r",
													"// PATCH /staff/merchant/ticket/:id ‚Äî Comprehensive Postman Tests\r",
													"// -----------------------------\r",
													"\r",
													"// Helper utilities (defensive)\r",
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"const safeJson = txt => { try { return JSON.parse(txt); } catch (e) { return null; } };\r",
													"const body = hasBody ? safeJson(raw) : null;\r",
													"\r",
													"// Extract :id from request URL last path segment\r",
													"let pathId = null;\r",
													"try {\r",
													"    const urlSegments = pm.request.url.path;\r",
													"    if (Array.isArray(urlSegments) && urlSegments.length) {\r",
													"        pathId = urlSegments[urlSegments.length - 1];\r",
													"    } else if (typeof urlSegments === 'string') {\r",
													"        const segs = urlSegments.split('/');\r",
													"        pathId = segs[segs.length - 1];\r",
													"    }\r",
													"} catch (e) {\r",
													"    // ignore\r",
													"}\r",
													"\r",
													"// ---------- Basic checks ----------\r",
													"\r",
													"// üü¢ 1. Status code allowed (200 OK or 409 Conflict)\r",
													"pm.test(\"‚úÖ Status code is 200 OK or 409 Conflict\", () => {\r",
													"    pm.expect([200, 409]).to.include(pm.response.code);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Response time ‚Äî performance\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"// üîí 3. Authorization header present & Bearer token\r",
													"pm.test(\"üîí Authorization header present and Bearer token used\", () => {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
													"    const auth = pm.request.headers.get(\"Authorization\") || \"\";\r",
													"    pm.expect(auth).to.be.a('string').and.to.include(\"Bearer\");\r",
													"    if (auth.toLowerCase().startsWith(\"bearer \")) {\r",
													"        pm.environment.set(\"LAST_STAFF_TOKEN\", auth.split(\" \")[1]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚úèÔ∏è 4. HTTP method is PATCH\r",
													"pm.test(\"‚úèÔ∏è HTTP method must be PATCH\", () => {\r",
													"    pm.expect(pm.request.method).to.eql(\"PATCH\");\r",
													"});\r",
													"\r",
													"// üì¶ 5. Content-Type includes application/json only if body is present\r",
													"pm.test(\"üì¶ Content-Type includes application/json when response body present\", () => {\r",
													"    const ct = pm.response.headers.get('content-type') || '';\r",
													"    if (hasBody) {\r",
													"        pm.expect(ct.toLowerCase()).to.include('application/json');\r",
													"    } else {\r",
													"        // allow empty body for 200 responses but assert header not required\r",
													"        pm.expect(true).to.be.true;\r",
													"    }\r",
													"});\r",
													"\r",
													"// ---------- Branch: 409 Conflict (expected JSON error) ----------\r",
													"if (pm.response.code === 409) {\r",
													"    // üõë 6. Error response JSON validity\r",
													"    pm.test(\"üõë Error response should be valid JSON\", () => {\r",
													"        pm.expect(hasBody, \"Expected JSON body for 409 error\").to.be.true;\r",
													"        pm.expect(body).to.be.an('object');\r",
													"    });\r",
													"\r",
													"    // üßæ 7. Error payload fields & types\r",
													"    pm.test(\"üßæ Error payload contains status (409) and message\", () => {\r",
													"        pm.expect(body).to.have.property('status');\r",
													"        pm.expect(body.status).to.eql(409);\r",
													"        pm.expect(body).to.have.property('message');\r",
													"        pm.expect(body.message).to.be.a('string').and.not.empty;\r",
													"    });\r",
													"\r",
													"    // üîç 8. Specific error message (soft)\r",
													"    pm.test(\"üîç Error message equals 'Ticket is closed.' (if that scenario)\", () => {\r",
													"        // soft check: server might return different phrasing; only assert if exact message exists\r",
													"        if (body && body.message) {\r",
													"            pm.expect(body.message).to.match(/Ticket is closed/i);\r",
													"        } else {\r",
													"            pm.expect(true).to.be.true;\r",
													"        }\r",
													"    });\r",
													"\r",
													"    // üßæ 9. Log for debugging\r",
													"    console.log(\"PATCH ticket -> 409 conflict body:\", body);\r",
													"}\r",
													"\r",
													"// ---------- Branch: 200 OK (success) ----------\r",
													"if (pm.response.code === 200) {\r",
													"    // ‚úÖ 10. Accept empty body OR JSON\r",
													"    pm.test(\"‚úÖ 200 OK - body may be empty or JSON\", () => {\r",
													"        pm.expect(pm.response.code).to.eql(200);\r",
													"        // don't force body existence; just ensure no parse error when present\r",
													"        if (hasBody) pm.expect(body).to.be.an('object');\r",
													"    });\r",
													"\r",
													"    // üî¢ 11. If JSON present, validate expected ticket fields (best-effort)\r",
													"    if (hasBody) {\r",
													"        pm.test(\"üî¢ Response JSON: check ticket shape if present\", () => {\r",
													"            // Example of plausible returned fields for a ticket patch detail\r",
													"            const expectedFields = [\"id\", \"status\", \"updatedAt\", \"messages\", \"merchantAccount\"];\r",
													"            expectedFields.forEach(f => pm.expect(body).to.have.property(f));\r",
													"        });\r",
													"\r",
													"        pm.test(\"üìÖ Dates are ISO strings when present\", () => {\r",
													"            if (body.updatedAt) pm.expect(body.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"            if (body.createdAt) pm.expect(body.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        });\r",
													"\r",
													"        pm.test(\"üßæ If id present it should match path id (when numeric)\", () => {\r",
													"            if (body.id && pathId && /^\\d+$/.test(String(pathId))) {\r",
													"                pm.expect(String(body.id)).to.eql(String(pathId));\r",
													"            } else {\r",
													"                pm.expect(true).to.be.true;\r",
													"            }\r",
													"        });\r",
													"\r",
													"        // Save updated ticket id/time for chaining\r",
													"        if (body.id) pm.environment.set(\"LAST_UPDATED_STAFF_TICKET_ID\", String(body.id));\r",
													"        if (body.updatedAt) pm.environment.set(\"LAST_UPDATED_STAFF_TICKET_AT\", String(body.updatedAt));\r",
													"    }\r",
													"}\r",
													"\r",
													"// ---------- Common checks for both branches ----------\r",
													"\r",
													"// üîê 12. Security headers (soft)\r",
													"// pm.test(\"üîê Security headers (soft checks)\", () => {\r",
													"//     const xcto = pm.response.headers.get(\"x-content-type-options\");\r",
													"//     const xfo  = pm.response.headers.get(\"x-frame-options\");\r",
													"//     const hsts = pm.response.headers.get(\"strict-transport-security\");\r",
													"//     if (xcto) pm.expect(xcto.toLowerCase()).to.eql(\"nosniff\");\r",
													"//     if (xfo) pm.expect(typeof xfo).to.eql(\"string\");\r",
													"//     if (hsts) pm.expect(hsts).to.match(/max-age=\\d+/);\r",
													"// });\r",
													"\r",
													"// üßØ 13. Prevent sensitive leakage (look for common secrets)\r",
													"pm.test(\"üßØ Response must not contain obvious secrets (keys/tokens)\", () => {\r",
													"    const text = raw || \"\";\r",
													"    const secretsRegex = /(private_key|privatekey|-----BEGIN PRIVATE KEY-----|secret|api[_-]?key|token[:=]|access[_-]?token|refresh[_-]?token)/i;\r",
													"    pm.expect(text).to.not.match(secretsRegex);\r",
													"});\r",
													"\r",
													"// üìù 14. Save request/response debug info for chaining\r",
													"pm.test(\"üìù Save useful context to environment (if available)\", () => {\r",
													"    if (pathId && /^\\d+$/.test(String(pathId))) pm.environment.set(\"PATCHED_TICKET_ID\", String(pathId));\r",
													"    pm.environment.set(\"PATCH_TICKET_STATUS_CODE\", String(pm.response.code));\r",
													"    pm.environment.set(\"PATCH_TICKET_BODY_PRESENT\", hasBody ? \"true\" : \"false\");\r",
													"});\r",
													"\r",
													"// üîö 15. Final debug log\r",
													"console.log(\"PATCH /staff/merchant/ticket/:id ‚Äî status:\", pm.response.code, \"pathId:\", pathId, \"bodyPresent:\", hasBody, \"body:\", body);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/ticket/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"ticket",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{NEW_STAFF_TICKET_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Ticket details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Defensive parsing helpers\r",
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"const tryJson = txt => {\r",
													"    try { return JSON.parse(txt); } catch (e) { return null; }\r",
													"};\r",
													"const body = hasBody ? tryJson(raw) : null;\r",
													"\r",
													"// ISO 8601 check\r",
													"const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
													"\r",
													"// ---------- Basic checks ----------\r",
													"\r",
													"// üü¢ 1. Status Code\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance\r",
													"pm.test(\"‚è± Response time < 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"// üîí 3. Content-Type\r",
													"pm.test(\"üîí Content-Type header includes application/json\", function () {\r",
													"    const ct = (pm.response.headers.get(\"Content-Type\") || pm.response.headers.get(\"content-type\") || \"\").toLowerCase();\r",
													"    pm.expect(ct).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"// üõ° 4. Authorization header used (request)\r",
													"pm.test(\"üõ° Authorization header present and Bearer token used\", function () {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\") || pm.request.headers.has(\"authorization\")).to.be.true;\r",
													"    const auth = pm.request.headers.get(\"Authorization\") || pm.request.headers.get(\"authorization\") || \"\";\r",
													"    pm.expect(auth).to.be.a(\"string\").and.to.match(/^Bearer\\s+/);\r",
													"});\r",
													"\r",
													"// ---------- Body existence & JSON ----------\r",
													"\r",
													"// üßæ 5. Body is present and valid JSON\r",
													"pm.test(\"üßæ Response body must be present and valid JSON\", function () {\r",
													"    pm.expect(hasBody, \"Response body is empty\").to.be.true;\r",
													"    pm.expect(body, \"Response body is not valid JSON\").to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"// ---------- Top-level structure ----------\r",
													"\r",
													"pm.test(\"üì¶ Top-level fields exist\", function () {\r",
													"    pm.expect(body).to.have.property(\"id\");\r",
													"    pm.expect(body).to.have.property(\"status\");\r",
													"    pm.expect(body).to.have.property(\"subject\");\r",
													"    pm.expect(body).to.have.property(\"title\");\r",
													"    pm.expect(body).to.have.property(\"merchantAccount\");\r",
													"    pm.expect(body).to.have.property(\"messages\");\r",
													"    pm.expect(body).to.have.property(\"createdAt\");\r",
													"    pm.expect(body).to.have.property(\"updatedAt\");\r",
													"});\r",
													"\r",
													"// ---------- Merchant account validation ----------\r",
													"\r",
													"// üßæ 6. Merchant account shape & types\r",
													"pm.test(\"üè∑ MerchantAccount has required fields and types\", function () {\r",
													"    const m = body.merchantAccount;\r",
													"    pm.expect(m).to.be.an(\"object\");\r",
													"    [\"id\",\"email\",\"phonenumber\",\"isEmailVerified\",\"isPhoneNumberVerified\",\"isKybd\",\"isActive\",\"accountType\",\"createdAt\",\"updatedAt\"].forEach(k => {\r",
													"        pm.expect(m).to.have.property(k);\r",
													"    });\r",
													"\r",
													"    pm.expect(m.id).to.be.a(\"number\");\r",
													"    pm.expect(m.email).to.be.a(\"string\").and.to.match(/@/);\r",
													"    pm.expect(m.phonenumber).to.be.a(\"string\");\r",
													"    pm.expect(m.isEmailVerified).to.be.a(\"boolean\");\r",
													"    pm.expect(m.isPhoneNumberVerified).to.be.a(\"boolean\");\r",
													"    pm.expect(m.isKybd).to.be.a(\"boolean\");\r",
													"    pm.expect(m.isActive).to.be.a(\"boolean\");\r",
													"    pm.expect(m.accountType).to.be.a(\"string\");\r",
													"    pm.expect(m.createdAt).to.match(isoRegex);\r",
													"    pm.expect(m.updatedAt).to.match(isoRegex);\r",
													"});\r",
													"\r",
													"// ---------- Messages array ----------\r",
													"\r",
													"// üì® 7. Messages array and item shape\r",
													"pm.test(\"üì® Messages array structure and item types\", function () {\r",
													"    pm.expect(body.messages).to.be.an(\"array\");\r",
													"    pm.expect(body.messages.length).to.be.at.least(1);\r",
													"\r",
													"    const ids = [];\r",
													"    body.messages.forEach((msg, idx) => {\r",
													"        pm.expect(msg).to.have.property(\"id\");\r",
													"        pm.expect(msg).to.have.property(\"createdAt\");\r",
													"        pm.expect(msg).to.have.property(\"text\");\r",
													"        pm.expect(msg).to.have.property(\"attachments\");\r",
													"        pm.expect(msg.id).to.be.a(\"number\");\r",
													"        pm.expect(msg.createdAt).to.match(isoRegex);\r",
													"        pm.expect(msg.text).to.be.a(\"string\");\r",
													"        pm.expect(msg.attachments).to.be.an(\"array\");\r",
													"\r",
													"        // collect id uniqueness\r",
													"        ids.push(msg.id);\r",
													"\r",
													"        // If staffAccount present, validate shape\r",
													"        if (msg.staffAccount !== null) {\r",
													"            pm.expect(msg.staffAccount).to.be.an(\"object\");\r",
													"            pm.expect(msg.staffAccount).to.have.property(\"id\");\r",
													"            pm.expect(msg.staffAccount).to.have.property(\"firstName\");\r",
													"            pm.expect(msg.staffAccount).to.have.property(\"lastName\");\r",
													"            pm.expect(msg.staffAccount).to.have.property(\"email\");\r",
													"            pm.expect(msg.staffAccount.id).to.be.a(\"number\");\r",
													"            pm.expect(msg.staffAccount.firstName).to.be.a(\"string\");\r",
													"            pm.expect(msg.staffAccount.email).to.match(/@/);\r",
													"        }\r",
													"    });\r",
													"\r",
													"    // üî¢ 8. Message IDs are unique\r",
													"    const uniqueIds = [...new Set(ids)];\r",
													"    pm.expect(uniqueIds.length).to.equal(ids.length);\r",
													"});\r",
													"\r",
													"// üìé 9. Attachments inside messages\r",
													"pm.test(\"üìé Attachments have id and url (https) and are valid\", function () {\r",
													"    body.messages.forEach(msg => {\r",
													"        msg.attachments.forEach(att => {\r",
													"            pm.expect(att).to.have.property(\"id\");\r",
													"            pm.expect(att).to.have.property(\"url\");\r",
													"            pm.expect(att.id).to.be.a(\"number\");\r",
													"            pm.expect(att.url).to.be.a(\"string\").and.to.match(/^https?:\\/\\/.+/);\r",
													"\r",
													"            // Optional: verify S3 signed-url pattern exists (if applicable)\r",
													"            // If URL contains X-Amz-Signature or X-Amz-Expires it's likely a signed S3 url\r",
													"            if (att.url.indexOf(\"X-Amz-Signature\") !== -1 || att.url.indexOf(\"X-Amz-Expires\") !== -1) {\r",
													"                pm.expect(att.url).to.include(\"X-Amz-\");\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// üìÖ 10. Messages chronological order (createdAt ascending)\r",
													"pm.test(\"üìÖ Messages are in chronological order (oldest first)\", function () {\r",
													"    const dates = body.messages.map(m => new Date(m.createdAt).getTime());\r",
													"    for (let i = 1; i < dates.length; i++) {\r",
													"        pm.expect(dates[i]).to.be.at.least(dates[i - 1]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// ---------- Dates & timestamps ----------\r",
													"\r",
													"// ‚è≥ 11. CreatedAt/UpdatedAt format and consistency\r",
													"pm.test(\"‚è≥ createdAt/updatedAt are ISO and updatedAt >= createdAt\", function () {\r",
													"    pm.expect(body.createdAt).to.match(isoRegex);\r",
													"    pm.expect(body.updatedAt).to.match(isoRegex);\r",
													"    const created = new Date(body.createdAt).getTime();\r",
													"    const updated = new Date(body.updatedAt).getTime();\r",
													"    pm.expect(updated).to.be.at.least(created);\r",
													"});\r",
													"\r",
													"// ---------- Status & flags ----------\r",
													"\r",
													"// üîé 12. Status and canAnswer fields types\r",
													"pm.test(\"üîé status and canAnswer types\", function () {\r",
													"    pm.expect(body.status).to.be.a(\"string\");\r",
													"    pm.expect(body.canAnswer).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"// ---------- Security checks ----------\r",
													"\r",
													"// üîê 13. Response must not leak common secrets\r",
													"pm.test(\"üîê Response should not contain obvious secrets\", function () {\r",
													"    const txt = raw || \"\";\r",
													"    const secretRegex = /(-----BEGIN PRIVATE KEY-----|private_key|secret|api[_-]?key|access[_-]?token|refresh[_-]?token)/i;\r",
													"    pm.expect(txt).to.not.match(secretRegex);\r",
													"});\r",
													"\r",
													"// üßæ 14. Attachment URLs should not expose AWS credentials in plain text (soft)\r",
													"pm.test(\"üßæ Attachment URLs should be signed (soft check) or safe\", function () {\r",
													"    body.messages.forEach(msg => {\r",
													"        msg.attachments.forEach(att => {\r",
													"            // It's OK for signed URLs to contain query params; just ensure they are HTTPS\r",
													"            pm.expect(att.url.startsWith(\"https://\")).to.be.true;\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// ---------- Environment variables for chaining ----------\r",
													"\r",
													"// üìù 15. Save useful environment variables\r",
													"pm.test(\"üìù Save TICKET and MERCHANT ids to environment\", function () {\r",
													"    if (body.id) pm.environment.set(\"LAST_STAFF_TICKET_ID\", String(body.id));\r",
													"    if (body.merchantAccount && body.merchantAccount.id) pm.environment.set(\"LAST_MERCHANT_ACCOUNT_ID\", String(body.merchantAccount.id));\r",
													"    // save last message id\r",
													"    const lastMessage = body.messages.length ? body.messages[body.messages.length - 1] : null;\r",
													"    if (lastMessage && lastMessage.id) pm.environment.set(\"LAST_TICKET_MESSAGE_ID\", String(lastMessage.id));\r",
													"});\r",
													"\r",
													"// üß™ 16. Extra debug log\r",
													"console.log(\"GET staff/merchant/ticket/:id ‚Äî status:\", pm.response.code, \"ticketId:\", body && body.id);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/ticket/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"ticket",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "97"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Paginated üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// -----------------------------\r",
													"// GET /staff/merchant/ticket/?merchantId=127 ‚Äî Postman Tests\r",
													"// -----------------------------\r",
													"\r",
													"// Helper: safe JSON parse\r",
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"const tryJson = (txt) => {\r",
													"    try { return JSON.parse(txt); } catch (e) { return null; }\r",
													"};\r",
													"const body = hasBody ? tryJson(raw) : null;\r",
													"\r",
													"// ISO 8601 (ms) regex\r",
													"const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
													"\r",
													"// ---------- Basic checks ----------\r",
													"\r",
													"// üü¢ 1. Status Code\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance\r",
													"pm.test(\"‚è± Response time < 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"// üîí 3. Content-Type header\r",
													"pm.test(\"üîí Content-Type header includes application/json\", function () {\r",
													"    const ct = (pm.response.headers.get(\"Content-Type\") || pm.response.headers.get(\"content-type\") || \"\").toLowerCase();\r",
													"    pm.expect(ct).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"// üõ° 4. Authorization header used (request)\r",
													"pm.test(\"üõ° Authorization header present and Bearer token used\", function () {\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\") || pm.request.headers.has(\"authorization\")).to.be.true;\r",
													"    const auth = pm.request.headers.get(\"Authorization\") || pm.request.headers.get(\"authorization\") || \"\";\r",
													"    pm.expect(auth).to.be.a(\"string\").and.to.match(/^Bearer\\s+/);\r",
													"});\r",
													"\r",
													"// ---------- Body existence & JSON ----------\r",
													"\r",
													"// üßæ 5. Body exists and is valid JSON\r",
													"pm.test(\"üßæ Response body must be present and valid JSON\", function () {\r",
													"    pm.expect(hasBody, \"Response body is empty\").to.be.true;\r",
													"    pm.expect(body, \"Response is not valid JSON\").to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"// If body is invalid, stop further tests gracefully\r",
													"if (!body) {\r",
													"    console.log(\"No valid JSON body ‚Äî skipping body-dependent tests.\");\r",
													"    return;\r",
													"}\r",
													"\r",
													"// ---------- Top-level structure ----------\r",
													"\r",
													"// üì¶ 6. Top-level pagination fields exist\r",
													"pm.test(\"üì¶ Top-level pagination fields exist\", function () {\r",
													"    pm.expect(body).to.have.property(\"items\");\r",
													"    pm.expect(body).to.have.property(\"totalItems\");\r",
													"    pm.expect(body).to.have.property(\"totalPages\");\r",
													"    pm.expect(body).to.have.property(\"page\");\r",
													"    pm.expect(body).to.have.property(\"hasNext\");\r",
													"    pm.expect(body).to.have.property(\"hasPrev\");\r",
													"});\r",
													"\r",
													"// ---------- Types & basic pagination logic ----------\r",
													"\r",
													"// üî¢ 7. Pagination field types and sane values\r",
													"pm.test(\"üî¢ Pagination types and basic consistency\", function () {\r",
													"    pm.expect(body.totalItems).to.satisfy(v => typeof v === \"number\" || typeof v === \"string\");\r",
													"    pm.expect(body.totalPages).to.satisfy(v => typeof v === \"number\" || typeof v === \"string\");\r",
													"    pm.expect(body.page).to.satisfy(v => typeof v === \"number\" || typeof v === \"string\");\r",
													"    pm.expect(body.hasNext).to.be.a(\"boolean\");\r",
													"    pm.expect(body.hasPrev).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"// üìä 8. Pagination flags accuracy (logical)\r",
													"pm.test(\"üìä Pagination flags accuracy\", function () {\r",
													"    const totalPages = Number(body.totalPages);\r",
													"    const page = Number(body.page);\r",
													"    pm.expect(body.hasNext).to.equal(page < totalPages);\r",
													"    pm.expect(body.hasPrev).to.equal(page > 1);\r",
													"});\r",
													"\r",
													"// ---------- Items array and content ----------\r",
													"\r",
													"// üß© 9. Items is an array and not empty\r",
													"pm.test(\"üß© Items array exists and has elements\", function () {\r",
													"    pm.expect(body.items).to.be.an(\"array\");\r",
													"    pm.expect(body.items.length).to.be.at.least(0);\r",
													"});\r",
													"\r",
													"// üßæ 10. Each item has required fields and types\r",
													"pm.test(\"üßæ Each item has required fields and correct types\", function () {\r",
													"    body.items.forEach(item => {\r",
													"        pm.expect(item).to.be.an(\"object\");\r",
													"        // Required fields\r",
													"        [\"id\",\"createdAt\",\"updatedAt\",\"status\",\"subject\",\"title\",\"merchantAccount\",\"canAnswer\"].forEach(k => {\r",
													"            pm.expect(item).to.have.property(k);\r",
													"        });\r",
													"\r",
													"        // Types\r",
													"        pm.expect(item.id).to.be.a('number');\r",
													"        pm.expect(item.createdAt).to.be.a('string').and.to.match(isoRegex);\r",
													"        pm.expect(item.updatedAt).to.be.a('string').and.to.match(isoRegex);\r",
													"        pm.expect(item.status).to.be.a('string');\r",
													"        pm.expect(item.subject).to.be.a('string');\r",
													"        pm.expect(item.title).to.be.a('string');\r",
													"        pm.expect(item.canAnswer).to.be.a('boolean');\r",
													"        pm.expect(item.merchantAccount).to.be.an('object');\r",
													"    });\r",
													"});\r",
													"\r",
													"// üßæ 11. merchantId query match ‚Äî all items should belong to merchantId 127\r",
													"pm.test(\"üè∑ All items belong to requested merchantId=127\", function () {\r",
													"    const expected = 127;\r",
													"    body.items.forEach(item => {\r",
													"        pm.expect(item.merchantAccount).to.have.property('id');\r",
													"        pm.expect(item.merchantAccount.id).to.equal(expected);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîÅ 12. Items are in reverse chronological order (newest first)\r",
													"pm.test(\"üîÅ Items sorted in reverse chronological order (newest first)\", function () {\r",
													"    const timestamps = body.items.map(i => new Date(i.createdAt).getTime());\r",
													"    for (let i = 0; i < timestamps.length - 1; i++) {\r",
													"        pm.expect(timestamps[i]).to.be.at.least(timestamps[i + 1]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîé 13. Unique item IDs\r",
													"pm.test(\"üîé Item IDs are unique\", function () {\r",
													"    const ids = body.items.map(i => i.id);\r",
													"    const unique = [...new Set(ids)];\r",
													"    pm.expect(unique.length).to.equal(ids.length);\r",
													"});\r",
													"\r",
													"// üìú 14. If there's a 'closedAt' field it must be valid ISO or null\r",
													"pm.test(\"üìú closedAt (if present) is valid ISO or null\", function () {\r",
													"    body.items.forEach(item => {\r",
													"        if (item.hasOwnProperty(\"closedAt\") && item.closedAt !== null) {\r",
													"            pm.expect(item.closedAt).to.match(isoRegex);\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// üßæ 15. merchantAccount nested fields types\r",
													"pm.test(\"üßæ merchantAccount nested fields types\", function () {\r",
													"    body.items.forEach(item => {\r",
													"        const m = item.merchantAccount;\r",
													"        [\"id\",\"email\",\"phonenumber\",\"isEmailVerified\",\"isPhoneNumberVerified\",\"isKybd\",\"isActive\",\"accountType\",\"createdAt\",\"updatedAt\"].forEach(k => {\r",
													"            pm.expect(m).to.have.property(k);\r",
													"        });\r",
													"        pm.expect(m.id).to.be.a('number');\r",
													"        pm.expect(m.email).to.be.a('string').and.to.match(/@/);\r",
													"        pm.expect(m.phonenumber).to.be.a('string');\r",
													"        pm.expect(m.isEmailVerified).to.be.a('boolean');\r",
													"        pm.expect(m.isPhoneNumberVerified).to.be.a('boolean');\r",
													"        pm.expect(m.isKybd).to.be.a('boolean');\r",
													"        pm.expect(m.isActive).to.be.a('boolean');\r",
													"        pm.expect(m.accountType).to.be.a('string');\r",
													"        pm.expect(m.createdAt).to.match(isoRegex);\r",
													"        pm.expect(m.updatedAt).to.match(isoRegex);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ---------- Security & content checks ----------\r",
													"\r",
													"// üîê 16. Response should not leak secrets (soft check)\r",
													"pm.test(\"üîê Response should not contain obvious secrets\", function () {\r",
													"    const s = raw || \"\";\r",
													"    const secretRegex = /(-----BEGIN PRIVATE KEY-----|private_key|secret|api[_-]?key|access[_-]?token|refresh[_-]?token)/i;\r",
													"    pm.expect(s).to.not.match(secretRegex);\r",
													"});\r",
													"\r",
													"// üìé 17. merchantAccount email format sanity check\r",
													"pm.test(\"üìé merchantAccount email looks valid\", function () {\r",
													"    body.items.forEach(item => {\r",
													"        pm.expect(item.merchantAccount.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ---------- Environment variables for chaining ----------\r",
													"\r",
													"// üìù 18. Save pagination & first item ID for chaining\r",
													"pm.test(\"üìù Save pagination and first item id to environment\", function () {\r",
													"    pm.environment.set(\"LAST_TICKETS_TOTAL\", String(body.totalItems));\r",
													"    pm.environment.set(\"LAST_TICKETS_PAGE\", String(body.page));\r",
													"    if (body.items.length > 0) {\r",
													"        pm.environment.set(\"LAST_TICKET_ID\", String(body.items[0].id));\r",
													"    }\r",
													"});\r",
													"\r",
													"// üß™ 19. Debug log\r",
													"console.log(\"GET staff/merchant/ticket/?merchantId=127 ‚Äî status:\", pm.response.code, \"items:\", body.items.length);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/ticket/?status=OPEN&merchantId=8",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"ticket",
												""
											],
											"query": [
												{
													"key": "status",
													"value": "OPEN"
												},
												{
													"key": "subject",
													"value": "KYB",
													"disabled": true
												},
												{
													"key": "canAnswer",
													"value": "true",
													"disabled": true
												},
												{
													"key": "merchantId",
													"value": "8"
												},
												{
													"key": "assigneeId",
													"value": "1",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "2025-07-16T00:00:00.000Z",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "2025-07-17T00:00:00.000Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "KYB üíö",
							"item": [
								{
									"name": "Change status üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"isConfirmed\": true,\n\t\"note\": \"It's done.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/kyb/change-status/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"kyb",
												"change-status",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "39"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f075cf6-25bf-4880-bfaa-ce0514cddf5b"
												},
												{
													"key": "target",
													"value": "2"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/kyb/upload/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"kyb",
												"upload",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload paginated üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/kyb/upload?limit=10&page=1&order=DESC&merchantId=2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"kyb",
												"upload"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "order",
													"value": "DESC"
												},
												{
													"key": "target",
													"value": "3",
													"disabled": true
												},
												{
													"key": "merchantId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Paginated üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// -----------------------------\r",
													"// POST /staff/merchant/ticket ‚Äî Flexible Test\r",
													"// -----------------------------\r",
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"let body = null;\r",
													"try { body = hasBody ? JSON.parse(raw) : null; } catch (e) {}\r",
													"\r",
													"const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
													"\r",
													"// Helper: works for { items: [...] } or single object\r",
													"function extractTicket(data) {\r",
													"    if (!data) return null;\r",
													"    if (Array.isArray(data.items) && data.items.length > 0) return data.items[0];\r",
													"    return data;\r",
													"}\r",
													"const ticket = extractTicket(body);\r",
													"\r",
													"// ---------- Basic checks ----------\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => pm.response.to.have.status(200));\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => pm.expect(pm.response.responseTime).to.be.below(2000));\r",
													"pm.test(\"üîí Content-Type includes application/json\", () => {\r",
													"    const ct = (pm.response.headers.get(\"Content-Type\") || \"\").toLowerCase();\r",
													"    pm.expect(ct).to.include(\"application/json\");\r",
													"});\r",
													"pm.test(\"üßæ Response body is JSON\", () => {\r",
													"    pm.expect(hasBody).to.be.true;\r",
													"    pm.expect(body).to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"// ---------- Ticket checks ----------\r",
													"pm.test(\"üì¶ Ticket object exists\", () => {\r",
													"    pm.expect(ticket, \"No ticket object found in response\").to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"if (ticket) {\r",
													"    pm.test(\"üî¢ Field types and formats (only check what exists)\", () => {\r",
													"        // Always expected\r",
													"        pm.expect(ticket).to.have.property(\"id\").that.is.a(\"string\");\r",
													"\r",
													"        // Optional fields\r",
													"        if (\"status\" in ticket) pm.expect(ticket.status).to.be.a(\"string\");\r",
													"        if (\"subject\" in ticket) pm.expect(ticket.subject).to.be.a(\"string\");\r",
													"        if (\"title\" in ticket) pm.expect(ticket.title).to.be.a(\"string\");\r",
													"        if (\"canAnswer\" in ticket) pm.expect(ticket.canAnswer).to.be.a(\"boolean\");\r",
													"        if (\"createdAt\" in ticket) pm.expect(ticket.createdAt).to.match(isoRegex);\r",
													"        if (\"updatedAt\" in ticket) pm.expect(ticket.updatedAt).to.match(isoRegex);\r",
													"    });\r",
													"\r",
													"    pm.test(\"üìå Save ticket ID\", () => {\r",
													"        pm.environment.set(\"LAST_TICKET_ID\", String(ticket.id));\r",
													"        if (\"status\" in ticket) {\r",
													"            pm.environment.set(\"LAST_TICKET_STATUS\", ticket.status);\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"// ---------- No sensitive data ----------\r",
													"pm.test(\"üîê No sensitive information leaked\", () => {\r",
													"    const s = raw || \"\";\r",
													"    const secretRegex = /(-----BEGIN PRIVATE KEY-----|private_key|secret|api[_-]?key|access[_-]?token|refresh[_-]?token)/i;\r",
													"    pm.expect(s).to.not.match(secretRegex);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/kyb?merchantId=2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"kyb"
											],
											"query": [
												{
													"key": "limit",
													"value": "2",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "order",
													"value": "DESC",
													"disabled": true
												},
												{
													"key": "status",
													"value": "IN_PROGRESS",
													"disabled": true
												},
												{
													"key": "merchantId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// -----------------------------\r",
													"// GET /staff/merchant/kyb/details/:id ‚Äî Test Script\r",
													"// -----------------------------\r",
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"let body = null;\r",
													"\r",
													"try { body = hasBody ? JSON.parse(raw) : null; } catch (e) {}\r",
													"\r",
													"const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
													"\r",
													"// ---------- Basic checks ----------\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => pm.response.to.have.status(200));\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => pm.expect(pm.response.responseTime).to.be.below(2000));\r",
													"pm.test(\"üîí Content-Type includes application/json\", () => {\r",
													"    const ct = (pm.response.headers.get(\"Content-Type\") || \"\").toLowerCase();\r",
													"    pm.expect(ct).to.include(\"application/json\");\r",
													"});\r",
													"pm.test(\"üßæ Response body is JSON\", () => {\r",
													"    pm.expect(hasBody).to.be.true;\r",
													"    pm.expect(body).to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"// ---------- Top-level fields ----------\r",
													"pm.test(\"üì¶ Required top-level fields exist\", () => {\r",
													"    pm.expect(body).to.have.property(\"id\").that.is.a(\"string\");\r",
													"    if (\"createdAt\" in body) pm.expect(body.createdAt).to.match(isoRegex);\r",
													"    if (\"status\" in body) pm.expect(body.status).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"// ---------- Merchant account ----------\r",
													"if (body.merchantAccount) {\r",
													"    pm.test(\"üè¢ Merchant account structure is valid\", () => {\r",
													"        const m = body.merchantAccount;\r",
													"        pm.expect(m).to.have.property(\"id\").that.is.a(\"number\");\r",
													"        if (\"email\" in m) pm.expect(m.email).to.be.a(\"string\");\r",
													"        if (\"phonenumber\" in m) pm.expect(m.phonenumber).to.be.a(\"string\");\r",
													"        if (\"isEmailVerified\" in m) pm.expect(m.isEmailVerified).to.be.a(\"boolean\");\r",
													"        if (\"isPhoneNumberVerified\" in m) pm.expect(m.isPhoneNumberVerified).to.be.a(\"boolean\");\r",
													"        if (\"accountType\" in m) pm.expect(m.accountType).to.be.a(\"string\");\r",
													"    });\r",
													"}\r",
													"\r",
													"// ---------- Primary contact info ----------\r",
													"if (body.primaryContactInfo) {\r",
													"    pm.test(\"üë§ Primary contact info is valid\", () => {\r",
													"        const p = body.primaryContactInfo;\r",
													"        if (\"firstName\" in p) pm.expect(p.firstName).to.be.a(\"string\");\r",
													"        if (\"lastName\" in p) pm.expect(p.lastName).to.be.a(\"string\");\r",
													"        if (\"nationality\" in p) pm.expect(p.nationality).to.be.a(\"string\");\r",
													"        if (\"gender\" in p) pm.expect(p.gender).to.be.a(\"string\");\r",
													"        if (\"birthDate\" in p) pm.expect(p.birthDate).to.match(isoRegex);\r",
													"    });\r",
													"}\r",
													"\r",
													"// ---------- Corporate business info ----------\r",
													"if (body.corporateBusinessInfo) {\r",
													"    pm.test(\"üè¢ Corporate business info is valid\", () => {\r",
													"        const c = body.corporateBusinessInfo;\r",
													"\r",
													"        if (\"businessName\" in c && c.businessName !== null) pm.expect(c.businessName).to.be.a(\"string\");\r",
													"        if (\"industryType\" in c && c.industryType !== null) pm.expect(c.industryType).to.be.a(\"string\");\r",
													"        if (\"country\" in c && c.country !== null) pm.expect(c.country).to.be.a(\"string\");\r",
													"        if (\"province\" in c && c.province !== null) pm.expect(c.province).to.be.a(\"string\");\r",
													"        if (\"city\" in c && c.city !== null) pm.expect(c.city).to.be.a(\"string\");\r",
													"        if (\"address\" in c && c.address !== null) pm.expect(c.address).to.be.a(\"string\");\r",
													"\r",
													"        if (\"geoLocation\" in c && c.geoLocation !== null) {\r",
													"            pm.expect(c.geoLocation).to.be.an(\"object\");\r",
													"            if (\"lat\" in c.geoLocation && c.geoLocation.lat !== null) pm.expect(c.geoLocation.lat).to.be.a(\"number\");\r",
													"            if (\"lng\" in c.geoLocation && c.geoLocation.lng !== null) pm.expect(c.geoLocation.lng).to.be.a(\"number\");\r",
													"        }\r",
													"\r",
													"        if (\"website\" in c && c.website !== null) pm.expect(c.website).to.be.a(\"string\");\r",
													"        if (\"vatNumber\" in c && c.vatNumber !== null) pm.expect(c.vatNumber).to.be.a(\"string\");\r",
													"        if (\"businessPhoneNumber\" in c && c.businessPhoneNumber !== null) pm.expect(c.businessPhoneNumber).to.be.a(\"string\");\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"// ---------- Bank info ----------\r",
													"if (body.bankInfo) {\r",
													"    pm.test(\"üè¶ Bank info is valid\", () => {\r",
													"        const b = body.bankInfo;\r",
													"        if (\"bankName\" in b) pm.expect(b.bankName).to.be.a(\"string\");\r",
													"        if (\"cardHolderName\" in b) pm.expect(b.cardHolderName).to.be.a(\"string\");\r",
													"        if (\"iban\" in b) pm.expect(b.iban).to.be.a(\"string\");\r",
													"    });\r",
													"}\r",
													"\r",
													"// ---------- No sensitive data ----------\r",
													"pm.test(\"üîê No sensitive information leaked\", () => {\r",
													"    const s = raw || \"\";\r",
													"    const secretRegex = /(-----BEGIN PRIVATE KEY-----|private_key|secret|api[_-]?key|access[_-]?token|refresh[_-]?token)/i;\r",
													"    pm.expect(s).to.not.match(secretRegex);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/kyb/details/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"kyb",
												"details",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "9"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// // üü¢ 1. Status Code Check\r",
													"// pm.test(\"‚úÖ Status code is 200\", () => {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// // ‚è± 2. Performance Check\r",
													"// pm.test(\"‚è± Response time < 1000ms\", () => {\r",
													"//     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"// });\r",
													"\r",
													"// // üõ° 3. Authorization Validation\r",
													"// pm.test(\"üõ° Authorization header present\", () => {\r",
													"//     pm.expect(pm.request.headers.has('Authorization')).to.be.true;\r",
													"//     pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
													"// });\r",
													"\r",
													"// // üì¶ 4. Empty Response Validation\r",
													"// pm.test(\"üì¶ Response body is empty\", () => {\r",
													"//     pm.expect(pm.response.text()).to.be.empty;\r",
													"// });\r",
													"\r",
													"// // üîí 5. Security Headers Check\r",
													"// // pm.test(\"üîí Security headers present\", () => {\r",
													"// //     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"// //     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"// //     pm.response.to.have.header('Strict-Transport-Security');\r",
													"// // });\r",
													"\r",
													"// // üìù 6. Request Method Validation\r",
													"// pm.test(\"üìù Correct request method\", () => {\r",
													"//     pm.expect(pm.request.method).to.equal('PUT');\r",
													"// });\r",
													"\r",
													"// // üîç 7. Debugging Logs\r",
													"// console.log(\"GET /staff/merchant/kyb/:id response:\", pm.response.text());\r",
													"// console.log(\"Response size:\", pm.response.responseSize);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"primaryContactInfo\": {\n        \"firstName\": \"Naeim\",\n        \"lastName\": \"Mahmoudi\",\n        \"nationality\": \"IQ\",\n        \"gender\": \"MALE\",\n        \"birthDate\": \"1991-05-31\"\n    },\n    \"corporateBusinessInfo\": {\n        \"businessName\": \"MiroShop\",\n        \"industryType\": \"FINANCIAL_SERVICES\",\n        \"country\": \"Iraq\",\n        \"province\": \"Erbil\",\n        \"city\": \"Erbil\",\n        \"address\": \"100M Street - MiroTech, Erbil, Erbil Governorate, 44001, Iraq\",\n        \"geoLocation\": {\n            \"lat\": 36.216722,\n            \"lng\": 43.983812\n        },\n        \"website\": \"https://mirotech.com/\",\n        \"vatNumber\": \"35155152d\",\n        \"businessPhoneNumber\": \"+9647701234567\"\n    },\n    \"bankInfo\": {\n        \"bankName\": \"RT Bank\",\n        \"cardHolderName\": \"Naeim Mahmoudi\",\n        \"iban\": \"IQ20CBIQ861800101010500\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/kyb/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"kyb",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Settlementüíö",
							"item": [
								{
									"name": "Paginate all üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì¶ 2. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Top-level validation\r",
													"    pm.expect(res).to.be.an('object').with.keys([\r",
													"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
													"    ]);\r",
													"    \r",
													"    // Pagination validation\r",
													"    pm.expect(res.totalItems).to.be.a('number').and.at.least(0);\r",
													"    pm.expect(res.totalPages).to.be.a('number').and.at.least(0);\r",
													"    pm.expect(res.page).to.be.a('number').and.at.least(1);\r",
													"    pm.expect(res.hasNext).to.be.a('boolean');\r",
													"    pm.expect(res.hasPrev).to.be.a('boolean');\r",
													"    \r",
													"    console.log(`üìÑ Pagination: ${res.totalItems} items | Page ${res.page}/${res.totalPages}`);\r",
													"});\r",
													"\r",
													"// üîç 3. Settlement Item Structure\r",
													"pm.test(\"üîç Each settlement has required fields\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach((item, index) => {\r",
													"        // Updated required fields for settlements\r",
													"        pm.expect(item).to.include.keys([\r",
													"            \"id\", \"amount\", \"status\", \"bankName\", \"iban\", \"cardHolderName\",\r",
													"            \"createdAt\", \"updatedAt\", \"merchantAccount\", \"canceledAt\", \"paidAt\", \"rejectedAt\"\r",
													"        ]);\r",
													"        \r",
													"        console.log(`‚úîÔ∏è Settlement ${index + 1}: ${item.bankName} | ${item.amount} ${item.status}`);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üü© 4. Status Value Validation\r",
													"pm.test(\"üü© Valid status values\", () => {\r",
													"    const validStatuses = [\"PAID\", \"CANCELED\", \"PENDING\", \"REJECTED\"];\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        pm.expect(validStatuses).to.include(item.status);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚è± 5. Chronological Order Validation\r",
													"pm.test(\"‚è± Items in reverse chronological order (newest first)\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    for (let i = 0; i < items.length - 1; i++) {\r",
													"        const current = new Date(items[i].createdAt).getTime();\r",
													"        const next = new Date(items[i + 1].createdAt).getTime();\r",
													"        pm.expect(current).to.be.greaterThan(next);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üè¶ 6. Bank Information Validation\r",
													"pm.test(\"üè¶ Valid bank information\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        pm.expect(item.bankName).to.be.a('string').and.not.empty;\r",
													"        pm.expect(item.cardHolderName).to.be.a('string').and.not.empty;\r",
													"        pm.expect(item.iban).to.be.a('string').and.not.empty;\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîÑ 7. Status Timestamp Consistency\r",
													"pm.test(\"üîÑ Status timestamp consistency\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        const createdAt = new Date(item.createdAt).getTime();\r",
													"        const updatedAt = new Date(item.updatedAt).getTime();\r",
													"        \r",
													"        // UpdatedAt should be >= createdAt\r",
													"        pm.expect(updatedAt).to.be.at.least(createdAt);\r",
													"        \r",
													"        // Status-specific timestamp checks\r",
													"        if (item.status === \"CANCELED\" && item.canceledAt) {\r",
													"            const canceledAt = new Date(item.canceledAt).getTime();\r",
													"            pm.expect(canceledAt).to.be.at.least(createdAt);\r",
													"        }\r",
													"        \r",
													"        if (item.status === \"PAID\" && item.paidAt) {\r",
													"            const paidAt = new Date(item.paidAt).getTime();\r",
													"            pm.expect(paidAt).to.be.at.least(createdAt);\r",
													"        }\r",
													"        \r",
													"        if (item.status === \"REJECTED\" && item.rejectedAt) {\r",
													"            const rejectedAt = new Date(item.rejectedAt).getTime();\r",
													"            pm.expect(rejectedAt).to.be.at.least(createdAt);\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// üë§ 8. Merchant Account Validation\r",
													"pm.test(\"üë§ Valid merchant account structure\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        const merchant = item.merchantAccount;\r",
													"        \r",
													"        pm.expect(merchant).to.be.an('object').with.keys([\r",
													"            'id', 'email', 'phonenumber', 'isEmailVerified', \r",
													"            'isPhoneNumberVerified', 'isKybd', 'isActive',\r",
													"            'accountType', 'createdAt', 'updatedAt'\r",
													"        ]);\r",
													"        \r",
													"        // Data types\r",
													"        pm.expect(merchant.id).to.be.a('number');\r",
													"        pm.expect(merchant.email).to.be.a('string');\r",
													"        pm.expect(merchant.phonenumber).to.be.a('string');\r",
													"        pm.expect(merchant.isEmailVerified).to.be.a('boolean');\r",
													"        pm.expect(merchant.isPhoneNumberVerified).to.be.a('boolean');\r",
													"        pm.expect(merchant.isKybd).to.be.a('boolean');\r",
													"        pm.expect(merchant.isActive).to.be.a('boolean');\r",
													"        pm.expect(merchant.accountType).to.be.a('string');\r",
													"        \r",
													"        // ISO Date format\r",
													"        pm.expect(merchant.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        pm.expect(merchant.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üî¢ 9. Pagination Parameters Enforcement\r",
													"pm.test(\"üî¢ Pagination parameters enforced\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const params = pm.request.url.query;\r",
													"    \r",
													"    const page = parseInt(params.get('page'), 25) || 1;\r",
													"    const limit = parseInt(params.get('limit'), 25) || 25;\r",
													"    \r",
													"    // Handle last page case\r",
													"    const expectedLength = page < res.totalPages ? limit : res.totalItems % limit;\r",
													"    \r",
													"    if (page <= res.totalPages) {\r",
													"        pm.expect(res.items.length).to.be.at.most(limit);\r",
													"    }\r",
													"    \r",
													"    pm.expect(res.page).to.eql(page);\r",
													"});\r",
													"\r",
													"// üí∞ 10. Amount Format Validation\r",
													"pm.test(\"üí∞ Valid amount format\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        // Should be numeric string\r",
													"        pm.expect(item.amount).to.match(/^\\d+$/);\r",
													"        \r",
													"        // Convert to number and check positive\r",
													"        const amountNum = parseInt(item.amount);\r",
													"        pm.expect(amountNum).to.be.a('number').and.at.least(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üìù 11. Store First Settlement for Later Use\r",
													"pm.test(\"üìù Store first settlement data\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    if (items.length > 0) {\r",
													"        const first = items[0];\r",
													"        pm.environment.set('first_settlement_id', first.id);\r",
													"        pm.environment.set('first_settlement_status', first.status);\r",
													"        pm.environment.set('first_merchant_id', first.merchantAccount.id);\r",
													"        console.log(`üíæ Stored settlement: ${first.id} (${first.status})`);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîí 12. Security Headers Check\r",
													"// pm.test(\"üîí Security headers present\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"// });\r",
													"\r",
													"// üìõ 13. Merchant Account Validity\r",
													"pm.test(\"üìõ Active merchant accounts\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        const merchant = item.merchantAccount;\r",
													"        pm.expect(merchant.isActive).to.be.true;\r",
													"        pm.expect(merchant.isEmailVerified).to.be.true;\r",
													"        pm.expect(merchant.isPhoneNumberVerified).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚öñÔ∏è 14. Status-Specific Field Validation\r",
													"pm.test(\"‚öñÔ∏è Status-specific field validation\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        if (item.status === \"PAID\") {\r",
													"            pm.expect(item.paidAt).to.not.be.null;\r",
													"        }\r",
													"        if (item.status === \"CANCELED\") {\r",
													"            pm.expect(item.canceledAt).to.not.be.null;\r",
													"        }\r",
													"        if (item.status === \"REJECTED\") {\r",
													"            pm.expect(item.rejectedAt).to.not.be.null;\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/settlement?status=PAID",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"settlement"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "ASC",
													"disabled": true
												},
												{
													"key": "staffAccountId",
													"value": "1",
													"disabled": true
												},
												{
													"key": "merchantAccountId",
													"value": "1",
													"disabled": true
												},
												{
													"key": "amountFrom",
													"value": "2000",
													"disabled": true
												},
												{
													"key": "amountTo",
													"value": "2000",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "",
													"disabled": true
												},
												{
													"key": "status",
													"value": "PAID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance Check\r",
													"pm.test(\"‚è± Response time < 1500ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"// üõ° 3. Authorization Validation\r",
													"pm.test(\"üõ° Authorization header present\", () => {\r",
													"    pm.expect(pm.request.headers.has('Authorization')).to.be.true;\r",
													"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
													"});\r",
													"\r",
													"// üì¶ 4. Response Structure Validation (UPDATED)\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    // Required keys (without checking for exact match)\r",
													"    const requiredKeys = [\r",
													"        'id', 'amount', 'status', 'bankName', 'cardHolderName', 'iban',\r",
													"        'createdAt', 'updatedAt', 'canceledAt', 'paidAt', 'rejectedAt',\r",
													"        'resultNote', 'isCreatedBySystem', 'attachmentUrl', 'merchantAccount', 'traces'\r",
													"    ];\r",
													"    \r",
													"    // Check that all required keys are present\r",
													"    requiredKeys.forEach(key => {\r",
													"        pm.expect(response).to.have.property(key);\r",
													"    });\r",
													"    \r",
													"    // Merchant account validation\r",
													"    pm.expect(response.merchantAccount).to.be.an('object');\r",
													"    ['id', 'email', 'phonenumber', 'isEmailVerified', 'isPhoneNumberVerified',\r",
													"     'isKybd', 'isActive', 'accountType', 'createdAt', 'updatedAt'].forEach(key => {\r",
													"        pm.expect(response.merchantAccount).to.have.property(key);\r",
													"    });\r",
													"    \r",
													"    // Traces array validation\r",
													"    pm.expect(response.traces).to.be.an('array');\r",
													"    response.traces.forEach(trace => {\r",
													"        ['id', 'createdAt', 'updatedAt', 'status', 'description'].forEach(key => {\r",
													"            pm.expect(trace).to.have.property(key);\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîç 5. Data Type Validation\r",
													"pm.test(\"üîç Correct data types\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Settlement fields\r",
													"    pm.expect(res.id).to.be.a('number');\r",
													"    pm.expect(res.amount).to.be.a('string').and.match(/^\\d+$/);\r",
													"    pm.expect(res.status).to.be.a('string');\r",
													"    pm.expect(res.bankName).to.be.a('string');\r",
													"    pm.expect(res.cardHolderName).to.be.a('string');\r",
													"    pm.expect(res.iban).to.be.a('string');\r",
													"    pm.expect(res.isCreatedBySystem).to.be.a('boolean');\r",
													"    \r",
													"    // ISO date validation\r",
													"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    pm.expect(res.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    \r",
													"    // Nullable fields\r",
													"    ['canceledAt', 'paidAt', 'rejectedAt', 'resultNote', 'attachmentUrl'].forEach(field => {\r",
													"        pm.expect(res[field]).to.satisfy(val => \r",
													"            val === null || typeof val === 'string'\r",
													"        );\r",
													"    });\r",
													"    \r",
													"    // Optional fields\r",
													"    ['trackingId', 'transferId', 'transferDate'].forEach(field => {\r",
													"        if (res.hasOwnProperty(field)) {\r",
													"            pm.expect(res[field]).to.satisfy(val => \r",
													"                val === null || typeof val === 'string'\r",
													"            );\r",
													"        }\r",
													"    });\r",
													"    \r",
													"    // Merchant account validation\r",
													"    const merchant = res.merchantAccount;\r",
													"    pm.expect(merchant.id).to.be.a('number');\r",
													"    pm.expect(merchant.email).to.be.a('string');\r",
													"    pm.expect(merchant.phonenumber).to.be.a('string');\r",
													"    pm.expect(merchant.isEmailVerified).to.be.a('boolean');\r",
													"    pm.expect(merchant.isPhoneNumberVerified).to.be.a('boolean');\r",
													"    pm.expect(merchant.isKybd).to.be.a('boolean');\r",
													"    pm.expect(merchant.isActive).to.be.a('boolean');\r",
													"    pm.expect(merchant.accountType).to.be.a('string');\r",
													"    pm.expect(merchant.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    pm.expect(merchant.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    \r",
													"    // Traces validation\r",
													"    res.traces.forEach(trace => {\r",
													"        pm.expect(trace.id).to.be.a('number');\r",
													"        pm.expect(trace.status).to.be.a('string');\r",
													"        pm.expect(trace.description).to.be.a('string');\r",
													"        pm.expect(trace.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        pm.expect(trace.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üß™ 6. Status Value Validation\r",
													"pm.test(\"üß™ Valid status values\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const validStatuses = ['PENDING', 'PAID', 'CANCELED', 'REJECTED'];\r",
													"    const validTraceStatuses = ['PENDING', 'IN_PROGRESS', 'PAID', 'CANCELED', 'REJECTED'];\r",
													"    \r",
													"    // Settlement status\r",
													"    pm.expect(validStatuses).to.include(res.status);\r",
													"    \r",
													"    // Traces statuses\r",
													"    res.traces.forEach(trace => {\r",
													"        pm.expect(validTraceStatuses).to.include(trace.status);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîÑ 7. Timestamp Consistency\r",
													"pm.test(\"üîÑ Timestamp consistency\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Settlement timestamps\r",
													"    const createdAt = new Date(res.createdAt);\r",
													"    const updatedAt = new Date(res.updatedAt);\r",
													"    pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
													"    \r",
													"    // Status-specific timestamps\r",
													"    if (res.status === 'PAID' && res.paidAt) {\r",
													"        const paidAt = new Date(res.paidAt);\r",
													"        pm.expect(paidAt.getTime()).to.be.at.least(createdAt.getTime());\r",
													"    }\r",
													"    if (res.status === 'CANCELED' && res.canceledAt) {\r",
													"        const canceledAt = new Date(res.canceledAt);\r",
													"        pm.expect(canceledAt.getTime()).to.be.at.least(createdAt.getTime());\r",
													"    }\r",
													"    if (res.status === 'REJECTED' && res.rejectedAt) {\r",
													"        const rejectedAt = new Date(res.rejectedAt);\r",
													"        pm.expect(rejectedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
													"    }\r",
													"    \r",
													"    // Traces chronological order\r",
													"    for (let i = 0; i < res.traces.length - 1; i++) {\r",
													"        const current = new Date(res.traces[i].createdAt);\r",
													"        const next = new Date(res.traces[i + 1].createdAt);\r",
													"        pm.expect(current.getTime()).to.be.lessThan(next.getTime());\r",
													"    }\r",
													"});\r",
													"\r",
													"// üìä 8. Status Consistency\r",
													"pm.test(\"üìä Status consistency checks\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Check status-specific fields\r",
													"    if (res.status === 'PAID') {\r",
													"        pm.expect(res.paidAt).to.not.be.null;\r",
													"        pm.expect(res.canceledAt).to.be.null;\r",
													"        pm.expect(res.rejectedAt).to.be.null;\r",
													"    }\r",
													"    else if (res.status === 'CANCELED') {\r",
													"        pm.expect(res.canceledAt).to.not.be.null;\r",
													"        pm.expect(res.paidAt).to.be.null;\r",
													"        pm.expect(res.rejectedAt).to.be.null;\r",
													"    }\r",
													"    else if (res.status === 'REJECTED') {\r",
													"        pm.expect(res.rejectedAt).to.not.be.null;\r",
													"        pm.expect(res.paidAt).to.be.null;\r",
													"        pm.expect(res.canceledAt).to.be.null;\r",
													"    }\r",
													"    \r",
													"    // Last trace should match current status\r",
													"    if (res.traces.length > 0) {\r",
													"        const lastTrace = res.traces[res.traces.length - 1];\r",
													"        pm.expect(lastTrace.status).to.equal(res.status);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üåê 9. IBAN Validation\r",
													"pm.test(\"üåê Valid IBAN format\", () => {\r",
													"    const res = pm.response.json();\r",
													"    // Simplified IBAN validation (country code + digits)\r",
													"    pm.expect(res.iban).to.match(/^[A-Z]{2}\\d{2}[A-Z0-9]{10,30}$/);\r",
													"});\r",
													"\r",
													"// üí∞ 10. Amount Validation\r",
													"pm.test(\"üí∞ Valid amount format\", () => {\r",
													"    const res = pm.response.json();\r",
													"    // Should be numeric string\r",
													"    pm.expect(res.amount).to.match(/^\\d+$/);\r",
													"    const amountNum = parseInt(res.amount);\r",
													"    pm.expect(amountNum).to.be.a('number').and.at.least(0);\r",
													"});\r",
													"\r",
													"// üîí 11. Security Headers\r",
													"// pm.test(\"üîí Security headers present\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"//     pm.response.to.have.header('Strict-Transport-Security');\r",
													"// });\r",
													"\r",
													"// üíæ 12. Store Settlement Data\r",
													"pm.test(\"üíæ Store settlement data\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.environment.set('settlement_id', res.id);\r",
													"    pm.environment.set('merchant_id', res.merchantAccount.id);\r",
													"    pm.environment.set('last_trace_id', res.traces[res.traces.length - 1]?.id || null);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/settlement/details/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"settlement",
												"details",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Traces üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check",
													"pm.test(\"üü¢ Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate pagination metadata",
													"pm.test(\"üìä Pagination metadata is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"totalItems\");",
													"    pm.expect(jsonData).to.have.property(\"totalPages\");",
													"    pm.expect(jsonData).to.have.property(\"page\");",
													"    pm.expect(jsonData).to.have.property(\"hasNext\");",
													"    pm.expect(jsonData).to.have.property(\"hasPrev\");",
													"});",
													"",
													"// üîç Validate items array",
													"pm.test(\"üìÅ Items array contains expected settlement traces\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\").with.lengthOf(3);",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"status\").that.is.oneOf([\"PENDING\", \"IN_PROGRESS\", \"REJECTED\"]);",
													"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");",
													"        pm.expect(item).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(item).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// üíæ Optionally save last trace ID",
													"pm.environment.set(\"last_trace_id\", jsonData.items[jsonData.items.length - 1].id);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/settlement/traces/:id?limit=10&order=ASC",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"settlement",
												"traces",
												":id"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "search",
													"value": "",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ASC"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reject üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"note\": \"I don't like you \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/settlement/reject/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"settlement",
												"reject",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": " Approve üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/settlement/approve/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"settlement",
												"approve",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "19"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Settle (mark as paid) üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f075cfd-32ff-4160-94eb-bd005ceb6969"
												},
												{
													"key": "transferDate",
													"value": "2025-06-20T00:00:00.000Z"
												},
												{
													"key": "transferId",
													"value": "325435"
												},
												{
													"key": "trackingId",
													"value": "rfgwerge515501"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/settlement/settle/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"settlement",
												"settle",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "19"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "External Payment",
							"item": [
								{
									"name": "Paginated üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1: Verify successful response status\r",
													"pm.test(\"Status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test 2: Verify response structure\r",
													"pm.test(\"Response has correct structure\", function() {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.have.all.keys(\r",
													"        'items',\r",
													"        'totalItems',\r",
													"        'totalPages',\r",
													"        'page',\r",
													"        'hasNext',\r",
													"        'hasPrev'\r",
													"    );\r",
													"});\r",
													"\r",
													"// Test 3: Validate pagination metadata\r",
													"pm.test(\"Pagination metadata is valid\", function() {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    pm.expect(response.totalItems).to.be.a('number').above(0);\r",
													"    pm.expect(response.totalPages).to.be.a('number').above(0);\r",
													"    pm.expect(response.page).to.be.a('number').above(0);\r",
													"    pm.expect(response.hasNext).to.be.a('boolean');\r",
													"    pm.expect(response.hasPrev).to.be.a('boolean');\r",
													"});\r",
													"\r",
													"// Test 4: Validate items array structure\r",
													"pm.test(\"Items array has valid structure\", function() {\r",
													"    const { items } = pm.response.json();\r",
													"    \r",
													"    pm.expect(items).to.be.an('array');\r",
													"    items.forEach(item => {\r",
													"        pm.expect(item).to.include.keys(\r",
													"            'id',\r",
													"            'gateway',\r",
													"            'amount',\r",
													"            'status',\r",
													"            'isEligible',\r",
													"            'referenceCode'\r",
													"        );\r",
													"        \r",
													"        // Validate critical field types\r",
													"        pm.expect(item.id).to.be.a('number');\r",
													"        pm.expect(item.gateway).to.be.a('string');\r",
													"        pm.expect(item.amount).to.be.a('string');\r",
													"        pm.expect(item.status).to.be.a('string');\r",
													"        pm.expect(item.isEligible).to.be.a('boolean');\r",
													"        pm.expect(item.referenceCode).to.be.a('string');\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test 6: Verify pagination parameters\r",
													"pm.test(\"Pagination parameters are applied correctly\", function() {\r",
													"    const response = pm.response.json();\r",
													"    const params = pm.request.url.query;\r",
													"    \r",
													"    const page = parseInt(params.get('page'), 10) || 1;\r",
													"    const limit = parseInt(params.get('limit'), 10) || 10;\r",
													"    \r",
													"    pm.expect(response.items).to.have.lengthOf(limit);\r",
													"    pm.expect(response.page).to.eql(page);\r",
													"});\r",
													"\r",
													"// Test 7: Validate date formats\r",
													"pm.test(\"All date fields have valid ISO format\", function() {\r",
													"    const { items } = pm.response.json();\r",
													"    const dateFields = [\r",
													"        'createdAt', \r",
													"        'updatedAt', \r",
													"        'expirationDateTime', \r",
													"        'paidAt'\r",
													"    ];\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        dateFields.forEach(field => {\r",
													"            if (item[field]) {\r",
													"                pm.expect(item[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test 8: Validate amount calculations\r",
													"pm.test(\"Amount calculations are consistent\", function() {\r",
													"    const { items } = pm.response.json();\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        const payable = parseFloat(item.payableAmount);\r",
													"        const payout = parseFloat(item.payoutAmount);\r",
													"        const ourFee = parseFloat(item.ourFeeAmount);\r",
													"        const fee = parseFloat(item.feeAmount);\r",
													"        \r",
													"        // Check payout calculation\r",
													"        pm.expect(payable - ourFee - fee).to.eql(payout);\r",
													"        \r",
													"        // Check realAmount consistency\r",
													"        pm.expect(parseFloat(item.realAmount)).to.eql(payable);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test 9: Verify gateway values\r",
													"pm.test(\"Gateways have valid values\", function() {\r",
													"    const { items } = pm.response.json();\r",
													"    const validGateways = ['FIB', 'ZAIN']; // Add others as needed\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        pm.expect(validGateways).to.include(item.gateway);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test 10: Validate status values\r",
													"pm.test(\"Status values are valid\", function() {\r",
													"    const { items } = pm.response.json();\r",
													"    const validStatuses = ['PAID', 'TIMED_OUT', 'PENDING', 'FAILED']; // Add others as needed\r",
													"    \r",
													"    items.forEach(item => {\r",
													"        pm.expect(validStatuses).to.include(item.status);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/external-payment?page=1&limit=10&order=ASC&status=PAID",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"external-payment"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "order",
													"value": "ASC"
												},
												{
													"key": "status",
													"value": "PAID"
												},
												{
													"key": "referenceCode",
													"value": "test_1",
													"disabled": true
												},
												{
													"key": "isEligible",
													"value": "true",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "2025-06-29T00:00:00.000Z",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "2025-07-02T00:00:00.000Z",
													"disabled": true
												},
												{
													"key": "amountFrom",
													"value": "",
													"disabled": true
												},
												{
													"key": "amountTo",
													"value": "",
													"disabled": true
												},
												{
													"key": "settlementId",
													"value": "",
													"disabled": true
												},
												{
													"key": "internalPaymentId",
													"value": "",
													"disabled": true
												},
												{
													"key": "merchantAccountId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì¶ 2. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res).to.be.an('object').with.keys([\r",
													"        'gateway', 'amount', 'payoutAmount', 'payableAmount', 'ourFeeAmount',\r",
													"        'ourFeePercent', 'ourFeeConstant', 'feeAmount', 'feePercent', 'feeConstant',\r",
													"        'status', 'expirationDateTime', 'srfc', 'customerPhoneNumber', 'customerEmail',\r",
													"        'isEligible', 'isSettled', 'realAmount', 'referenceCode', 'erc', 'email',\r",
													"        'phonenumber', 'paidAt', 'createdAt', 'updatedAt', 'id', 'internalPayment',\r",
													"        'traces', 'settlement'\r",
													"    ]);\r",
													"});\r",
													"\r",
													"// üü© 3. Status Value Validation\r",
													"pm.test(\"üü© Valid status value\", () => {\r",
													"    const validStatuses = [\"PAID\", \"TIMED_OUT\", \"PENDING\", \"FAILED\", \"CANCELED\"];\r",
													"    pm.expect(validStatuses).to.include(pm.response.json().status);\r",
													"});\r",
													"\r",
													"// üè¶ 5. Gateway Validation\r",
													"pm.test(\"üè¶ Valid gateway value\", () => {\r",
													"    const validGateways = [\"FIB\", \"ZAIN\", \"OTHER\"];\r",
													"    pm.expect(validGateways).to.include(pm.response.json().gateway);\r",
													"});\r",
													"\r",
													"// üìÖ 6. Date Format Validation\r",
													"pm.test(\"üìÖ Valid ISO date formats\", () => {\r",
													"    const p = pm.response.json();\r",
													"    ['createdAt', 'updatedAt', 'expirationDateTime', 'paidAt'].forEach(field => {\r",
													"        if (p[field]) {\r",
													"            pm.expect(p[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîÑ 7. UpdatedAt after createdAt\r",
													"pm.test(\"üîÑ UpdatedAt after createdAt\", () => {\r",
													"    const p = pm.response.json();\r",
													"    pm.expect(new Date(p.updatedAt).getTime()).to.be.at.least(new Date(p.createdAt).getTime());\r",
													"});\r",
													"\r",
													"// üìù 9. Store Payment Data\r",
													"pm.test(\"üìù Store payment data\", () => {\r",
													"    const p = pm.response.json();\r",
													"    pm.environment.set('payment_id', p.id);\r",
													"    pm.environment.set('payment_status', p.status);\r",
													"    pm.environment.set('payment_reference', p.referenceCode);\r",
													"    pm.environment.set('payment_erc', p.erc);\r",
													"});\r",
													"\r",
													"// üîç 10. Internal Payment Validation\r",
													"pm.test(\"üîç Internal payment structure valid\", () => {\r",
													"    const ip = pm.response.json().internalPayment;\r",
													"    if (ip) {\r",
													"        pm.expect(ip).to.be.an('object').with.keys([\r",
													"            'createdAt', 'updatedAt', 'id', 'referenceCode', 'amount', 'gateways',\r",
													"            'collectCustomerEmail', 'collectCustomerPhoneNumber', 'collectFeeFromCustomer',\r",
													"            'title', 'description', 'creationSource', 'isActive', 'paymentLink'\r",
													"        ]);\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚öñÔ∏è 11. Status-specific field validation\r",
													"pm.test(\"‚öñÔ∏è Status-specific field validation\", () => {\r",
													"    const p = pm.response.json();\r",
													"    if (p.status === \"PAID\") {\r",
													"        pm.expect(p.paidAt).to.not.be.null;\r",
													"    } else if (p.status === \"TIMED_OUT\") {\r",
													"        pm.expect(p.paidAt).to.be.null;\r",
													"    }\r",
													"    if (p.status === \"CANCELED\" || p.status === \"FAILED\") {\r",
													"        pm.expect(p.traces).to.not.be.empty;\r",
													"    }\r",
													"});\r",
													"\r",
													"// üìä 12. Correct fee calculations (Relaxed)\r",
													"pm.test(\"üìä Correct fee calculations\", () => {\r",
													"    const p = pm.response.json();\r",
													"    const ourFee = parseFloat(p.ourFeeAmount);\r",
													"    const fee = parseFloat(p.feeAmount);\r",
													"\r",
													"    // Just ensure they're non-negative and match constants if provided\r",
													"    pm.expect(ourFee).to.be.at.least(0);\r",
													"    pm.expect(fee).to.be.at.least(0);\r",
													"\r",
													"    if (p.ourFeeConstant) {\r",
													"        pm.expect(parseFloat(p.ourFeeConstant)).to.be.at.least(0);\r",
													"    }\r",
													"    if (p.feeConstant) {\r",
													"        pm.expect(parseFloat(p.feeConstant)).to.be.at.least(0);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîó 13. ERC Validation\r",
													"pm.test(\"üîó Valid ERC format\", () => {\r",
													"    const erc = pm.response.json().erc;\r",
													"    if (erc) {\r",
													"        const isUUID = /^[0-9a-f-]{36}$/i.test(erc);\r",
													"        const isHex = /^[0-9a-f]{24}$/i.test(erc);\r",
													"        pm.expect(isUUID || isHex).to.be.true;\r",
													"    }\r",
													"});\r",
													"\r",
													"// üë§ 14. Customer Information Validation\r",
													"pm.test(\"üë§ Valid customer information\", () => {\r",
													"    const p = pm.response.json();\r",
													"    if (p.email) pm.expect(p.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"    if (p.phonenumber) pm.expect(p.phonenumber).to.match(/^\\+?\\d{7,15}$/);\r",
													"});\r",
													"\r",
													"// üïí 15. Expiration date after creation\r",
													"pm.test(\"üïí Expiration date after creation\", () => {\r",
													"    const p = pm.response.json();\r",
													"    pm.expect(new Date(p.expirationDateTime).getTime()).to.be.greaterThan(new Date(p.createdAt).getTime());\r",
													"});\r",
													"\r",
													"// üîÑ 16. Traces array validation (Adjusted rule)\r",
													"pm.test(\"üîÑ Traces array validation\", () => {\r",
													"    const p = pm.response.json();\r",
													"    pm.expect(p.traces).to.be.an('array');\r",
													"    if (p.status === \"FAILED\") {\r",
													"        pm.expect(p.traces.length).to.be.greaterThan(0);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/external-payment/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"external-payment",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Paid (forcefully) üíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/external-payment/set/paid/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"external-payment",
												"set",
												"paid",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "181"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sync Status ü§é",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Fix Error Handeling and send Lasr Payment Status"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/external-payment/sync/status/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"external-payment",
												"sync",
												"status",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "79"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Change Status (DEPRECATED)",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"status\": \"TIMED_OUT\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/external-payment/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"external-payment",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "221"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Status",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/external-payment/status/2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"external-payment",
												"status",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "2fa Revocation",
									"item": [
										{
											"name": "Reject",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{STAFF_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/staff/merchant/account/2fa/accept/:merchantAccountId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"staff",
														"merchant",
														"account",
														"2fa",
														"accept",
														":merchantAccountId"
													],
													"variable": [
														{
															"key": "merchantAccountId",
															"value": "{{MERCHANT_ACCOUNT_ID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{STAFF_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/staff/merchant/account/2fa/accept/:merchantAccountId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"staff",
														"merchant",
														"account",
														"2fa",
														"accept",
														":merchantAccountId"
													],
													"variable": [
														{
															"key": "merchantAccountId",
															"value": "{{MERCHANT_ACCOUNT_ID}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update account üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"isActive\": true,\n\t\"isKybd\": true,\n\t\"canSettle\": true,\n\t\"isEmailVerified\": true,\n\t\"isPhoneNumberVerified\": true,\n\t\"profile\": {\n\t\t\"firstName\": \"Naeim\",\n        \"lastName\": \"Mahmoudi\",\n        \"nationality\": \"IQ\",\n        \"zipCode\": \"285482\",\n        \"gender\": \"MALE\",\n        \"birthDate\": \"1991-05-31\"\n\t}, \n\t\"corporateBusinessInfo\": {\n\t\t \"businessName\": \"MiroShop\",\n        \"industryType\": \"FINANCIAL_SERVICES\",\n        \"country\": \"Iraq\",\n        \"province\": \"Erbil\",\n        \"city\": \"Erbil\",\n        \"address\": \"100M Street - MiroTech, Erbil, Erbil Governorate, 44001, Iraq\",\n        \"geoLocation\": {\n            \"lat\": 36.216722,\n            \"lng\": 43.983812\n        },\n        \"website\": \"https://mirotech.com/\",\n        \"vatNumber\": \"35155152d\",\n        \"businessPhoneNumber\": \"+9647701234567\"\n\t},\n    \"bankInfo\": {\n        \"bankName\": \"RT Bank\",\n        \"cardHolderName\": \"Naeim Mahmoudi\",\n        \"iban\": \"IQ20CBIQ861800101010500\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/account/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"account",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/account/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"account",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì¶ 2. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Top-level validation\r",
													"    pm.expect(res).to.be.an('object').with.keys([\r",
													"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
													"    ]);\r",
													"    \r",
													"    // Pagination validation\r",
													"    pm.expect(res.totalItems).to.be.a('number').and.at.least(0);\r",
													"    pm.expect(res.totalPages).to.be.a('number').and.at.least(0);\r",
													"    pm.expect(res.page).to.be.a('number').and.at.least(1);\r",
													"    pm.expect(res.hasNext).to.be.a('boolean');\r",
													"    pm.expect(res.hasPrev).to.be.a('boolean');\r",
													"    \r",
													"    console.log(`üìÑ Pagination: ${res.totalItems} accounts | Page ${res.page}/${res.totalPages}`);\r",
													"});\r",
													"\r",
													"// üîç 3. Account Structure Validation (UPDATED)\r",
													"pm.test(\"üîç Each account has required fields\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach((account, index) => {\r",
													"        // Main account fields\r",
													"        pm.expect(account).to.include.keys([\r",
													"            'id', 'email', 'phonenumber', 'isEmailVerified', 'isPhoneNumberVerified',\r",
													"            'isKybd', 'isActive', 'accountType', 'createdAt', 'updatedAt', 'profile'\r",
													"        ]);\r",
													"        \r",
													"        // Profile fields - now using include.keys instead of with.keys\r",
													"        pm.expect(account.profile).to.be.an('object').that.includes.keys([\r",
													"            'id', 'firstName', 'lastName', 'nationality', 'logo', 'birthDate', 'gender'\r",
													"        ]);\r",
													"        \r",
													"        console.log(`‚úîÔ∏è Account ${index + 1}: ${account.email} | Active: ${account.isActive}`);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚úÖ 4. Filter Validation\r",
													"pm.test(\"‚úÖ Filter parameters applied correctly\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    const params = pm.request.url.query;\r",
													"    \r",
													"    // Verify all accounts match filter criteria\r",
													"    items.forEach(account => {\r",
													"        pm.expect(account.isKybd).to.be.true;\r",
													"        pm.expect(account.isActive).to.be.true;\r",
													"    });\r",
													"    \r",
													"    // Verify query parameters in request\r",
													"    pm.expect(params.get('isKybd')).to.eql('true');\r",
													"    pm.expect(params.get('isActive')).to.eql('true');\r",
													"});\r",
													"\r",
													"// üè¶ 5. Account Type Validation\r",
													"pm.test(\"üè¶ Valid account types\", () => {\r",
													"    const validTypes = [\"INDIVIDUAL\", \"CORPORATION\", \"PARTNERSHIP\"];\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        pm.expect(validTypes).to.include(account.accountType);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚è± 6. Chronological Order Validation\r",
													"pm.test(\"‚è± Items in reverse chronological order\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    for (let i = 0; i < items.length - 1; i++) {\r",
													"        const current = new Date(items[i].createdAt).getTime();\r",
													"        const next = new Date(items[i + 1].createdAt).getTime();\r",
													"        pm.expect(current).to.be.greaterThan(next);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîÑ 7. Timestamp Consistency\r",
													"pm.test(\"üîÑ UpdatedAt after createdAt\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        const created = new Date(account.createdAt).getTime();\r",
													"        const updated = new Date(account.updatedAt).getTime();\r",
													"        pm.expect(updated).to.be.at.least(created);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üìÖ 8. Date Format Validation\r",
													"pm.test(\"üìÖ Valid ISO date formats\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        pm.expect(account.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        pm.expect(account.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üìõ 9. Email Format Validation\r",
													"pm.test(\"üìõ Valid email formats\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        pm.expect(account.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üì± 10. Phone Number Validation\r",
													"pm.test(\"üì± Valid phone number formats\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        // Some numbers might be empty strings\r",
													"        if (account.phonenumber && account.phonenumber !== \"\") {\r",
													"            pm.expect(account.phonenumber).to.match(/^\\+?\\d{7,15}$/);\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// üë§ 11. Profile Validation\r",
													"pm.test(\"üë§ Valid profile information\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    const validGenders = [\"MALE\", \"FEMALE\", \"OTHER\"];\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        const profile = account.profile;\r",
													"        \r",
													"        // Name validation\r",
													"        if (profile.firstName) pm.expect(profile.firstName).to.be.a('string').and.not.empty;\r",
													"        if (profile.lastName) pm.expect(profile.lastName).to.be.a('string').and.not.empty;\r",
													"        \r",
													"        // Nationality validation (ISO 3166-1 alpha-2)\r",
													"        if (profile.nationality) pm.expect(profile.nationality).to.match(/^[A-Z]{2}$/);\r",
													"        \r",
													"        // Logo URL validation\r",
													"        if (profile.logo) pm.expect(profile.logo).to.include('https://');\r",
													"        \r",
													"        // Birth date format\r",
													"        if (profile.birthDate) pm.expect(profile.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
													"        \r",
													"        // Gender validation\r",
													"        pm.expect(validGenders).to.include(profile.gender);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üî¢ 12. Pagination Parameters Enforcement\r",
													"pm.test(\"üî¢ Pagination parameters enforced\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const params = pm.request.url.query;\r",
													"    \r",
													"    const page = parseInt(params.get('page'), 25) || 1;\r",
													"    const limit = parseInt(params.get('limit'), 25) || 25;\r",
													"    \r",
													"    // Handle last page case\r",
													"    const expectedLength = page < res.totalPages ? limit : res.totalItems % limit;\r",
													"    \r",
													"    if (page <= res.totalPages) {\r",
													"        pm.expect(res.items.length).to.be.at.most(limit);\r",
													"    }\r",
													"    \r",
													"    pm.expect(res.page).to.eql(page);\r",
													"});\r",
													"\r",
													"// üîí 13. Security Headers Check\r",
													"// pm.test(\"üîí Security headers present\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"// });\r",
													"\r",
													"// üìù 14. Store First Account for Later Use\r",
													"pm.test(\"üìù Store first account data\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    if (items.length > 0) {\r",
													"        const first = items[0];\r",
													"        pm.environment.set('first_account_id', first.id);\r",
													"        pm.environment.set('first_account_email', first.email);\r",
													"        pm.environment.set('first_profile_id', first.profile.id);\r",
													"        console.log(`üíæ Stored account: ${first.id} (${first.email})`);\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚úÖ 15. Verification Status Validation\r",
													"pm.test(\"‚úÖ All accounts are verified\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        pm.expect(account.isEmailVerified).to.be.true;\r",
													"        // Phone verification might be optional\r",
													"        if (account.phonenumber && account.phonenumber !== \"\") {\r",
													"            pm.expect(account.isPhoneNumberVerified).to.be.true;\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// üåê 16. Logo URL Validation\r",
													"pm.test(\"üåê Valid logo URLs\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"    \r",
													"    items.forEach(account => {\r",
													"        if (account.profile.logo) {\r",
													"            // Check URL format\r",
													"            pm.expect(account.profile.logo).to.match(/^https:\\/\\/.+\\..+\\.com\\/.+/);\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/account?isKybd=true&isActive=true",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"account"
											],
											"query": [
												{
													"key": "isKybd",
													"value": "true"
												},
												{
													"key": "isActive",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì¶ 2. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Top-level validation\r",
													"    pm.expect(res).to.be.an('object').with.keys([\r",
													"        'id', 'email', 'phonenumber', 'isEmailVerified', 'isPhoneNumberVerified',\r",
													"        'isKybd', 'isActive', 'accountType', 'canSettle', 'createdAt', 'updatedAt',\r",
													"        'profile', 'corporationBusinessInfo', 'individualBusinessInfo', 'bankInfo'\r",
													"    ]);\r",
													"    \r",
													"    // Data type validation\r",
													"    pm.expect(res.id).to.be.a('number');\r",
													"    pm.expect(res.email).to.be.a('string');\r",
													"    pm.expect(res.phonenumber).to.be.a('string');\r",
													"    pm.expect(res.isEmailVerified).to.be.a('boolean');\r",
													"    pm.expect(res.isPhoneNumberVerified).to.be.a('boolean');\r",
													"    pm.expect(res.isKybd).to.be.a('boolean');\r",
													"    pm.expect(res.isActive).to.be.a('boolean');\r",
													"    pm.expect(res.canSettle).to.be.a('boolean');\r",
													"    pm.expect(res.accountType).to.be.a('string');\r",
													"    \r",
													"    console.log(`üìÑ Merchant ${res.id}: ${res.email} | Active: ${res.isActive}`);\r",
													"});\r",
													"\r",
													"// üîç 3. Profile Validation\r",
													"pm.test(\"üîç Valid profile structure\", () => {\r",
													"    const profile = pm.response.json().profile;\r",
													"    \r",
													"    pm.expect(profile).to.be.an('object').with.keys([\r",
													"        'id', 'firstName', 'lastName', 'nationality', 'logo', \r",
													"        'birthDate', 'gender', 'createdAt', 'updatedAt'\r",
													"    ]);\r",
													"    \r",
													"    // Data types\r",
													"    pm.expect(profile.id).to.be.a('number');\r",
													"    pm.expect(profile.firstName).to.be.a('string').and.not.empty;\r",
													"    pm.expect(profile.lastName).to.be.a('string').and.not.empty;\r",
													"    pm.expect(profile.nationality).to.be.a('string').and.match(/^[A-Z]{2}$/);\r",
													"    if (profile.logo) pm.expect(profile.logo).to.include('https://');\r",
													"    pm.expect(profile.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
													"    pm.expect(profile.gender).to.be.a('string').and.oneOf(['MALE', 'FEMALE', 'OTHER']);\r",
													"});\r",
													"\r",
													"// üè¢ 4. Corporation Business Info Validation\r",
													"pm.test(\"üè¢ Valid corporation business info\", () => {\r",
													"    const businessInfo = pm.response.json().corporationBusinessInfo;\r",
													"    \r",
													"    // Only validate if present (accountType is CORPORATION)\r",
													"    if (businessInfo) {\r",
													"        pm.expect(businessInfo).to.be.an('object').with.keys([\r",
													"            'id', 'name', 'industryType', 'country', 'province', 'city',\r",
													"            'address', 'lat', 'lng', 'website', 'vatNumber', 'phonenumber',\r",
													"            'createdAt', 'updatedAt'\r",
													"        ]);\r",
													"        \r",
													"        // Data types\r",
													"        pm.expect(businessInfo.id).to.be.a('number');\r",
													"        pm.expect(businessInfo.name).to.be.a('string').and.not.empty;\r",
													"        pm.expect(businessInfo.industryType).to.be.a('string');\r",
													"        pm.expect(businessInfo.country).to.be.a('string');\r",
													"        pm.expect(businessInfo.province).to.be.a('string');\r",
													"        pm.expect(businessInfo.city).to.be.a('string');\r",
													"        pm.expect(businessInfo.address).to.be.a('string');\r",
													"        pm.expect(businessInfo.lat).to.be.a('number');\r",
													"        pm.expect(businessInfo.lng).to.be.a('number');\r",
													"        if (businessInfo.website) pm.expect(businessInfo.website).to.include('.');\r",
													"        if (businessInfo.vatNumber) pm.expect(businessInfo.vatNumber).to.be.a('string');\r",
													"        pm.expect(businessInfo.phonenumber).to.match(/^\\+?\\d{7,15}$/);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üè¶ 5. Bank Info Validation\r",
													"pm.test(\"üè¶ Valid bank information\", () => {\r",
													"    const bankInfo = pm.response.json().bankInfo;\r",
													"    \r",
													"    pm.expect(bankInfo).to.be.an('object').with.keys([\r",
													"        'id', 'bankName', 'cardHolderName', 'iban', 'createdAt', 'updatedAt'\r",
													"    ]);\r",
													"    \r",
													"    // Data types\r",
													"    pm.expect(bankInfo.id).to.be.a('number');\r",
													"    pm.expect(bankInfo.bankName).to.be.a('string').and.not.empty;\r",
													"    pm.expect(bankInfo.cardHolderName).to.be.a('string').and.not.empty;\r",
													"    pm.expect(bankInfo.iban).to.be.a('string').and.not.empty;\r",
													"});\r",
													"\r",
													"// ‚úÖ 6. Account Type Consistency\r",
													"pm.test(\"‚úÖ Account type consistency\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    if (res.accountType === \"CORPORATION\") {\r",
													"        pm.expect(res.corporationBusinessInfo).to.not.be.null;\r",
													"        pm.expect(res.individualBusinessInfo).to.be.null;\r",
													"    } else if (res.accountType === \"INDIVIDUAL\") {\r",
													"        pm.expect(res.individualBusinessInfo).to.not.be.null;\r",
													"        pm.expect(res.corporationBusinessInfo).to.be.null;\r",
													"    }\r",
													"});\r",
													"\r",
													"// ‚è± 7. Timestamp Validation\r",
													"pm.test(\"‚è± Valid timestamps\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    // Main timestamps\r",
													"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    pm.expect(res.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    \r",
													"    // Profile timestamps\r",
													"    pm.expect(res.profile.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    pm.expect(res.profile.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    \r",
													"    // Business info timestamps\r",
													"    if (res.corporationBusinessInfo) {\r",
													"        pm.expect(res.corporationBusinessInfo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        pm.expect(res.corporationBusinessInfo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    }\r",
													"    \r",
													"    // Bank info timestamps\r",
													"    pm.expect(res.bankInfo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"    pm.expect(res.bankInfo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"});\r",
													"\r",
													"// üîÑ 8. Timestamp Consistency\r",
													"pm.test(\"üîÑ UpdatedAt after createdAt\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    const created = new Date(res.createdAt).getTime();\r",
													"    const updated = new Date(res.updatedAt).getTime();\r",
													"    pm.expect(updated).to.be.at.least(created);\r",
													"    \r",
													"    // Profile timestamps\r",
													"    const profileCreated = new Date(res.profile.createdAt).getTime();\r",
													"    const profileUpdated = new Date(res.profile.updatedAt).getTime();\r",
													"    pm.expect(profileUpdated).to.be.at.least(profileCreated);\r",
													"    \r",
													"    // Bank info timestamps\r",
													"    const bankCreated = new Date(res.bankInfo.createdAt).getTime();\r",
													"    const bankUpdated = new Date(res.bankInfo.updatedAt).getTime();\r",
													"    pm.expect(bankUpdated).to.be.at.least(bankCreated);\r",
													"});\r",
													"\r",
													"// üìõ 9. Email Validation\r",
													"pm.test(\"üìõ Valid email format\", () => {\r",
													"    const email = pm.response.json().email;\r",
													"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"});\r",
													"\r",
													"// üì± 10. Phone Number Validation\r",
													"pm.test(\"üì± Valid phone number format\", () => {\r",
													"    const phone = pm.response.json().phonenumber;\r",
													"    pm.expect(phone).to.match(/^\\+?\\d{7,15}$/);\r",
													"});\r",
													"\r",
													"// üó∫Ô∏è 11. Geolocation Validation\r",
													"pm.test(\"üó∫Ô∏è Valid geolocation coordinates\", () => {\r",
													"    const businessInfo = pm.response.json().corporationBusinessInfo;\r",
													"    \r",
													"    if (businessInfo) {\r",
													"        pm.expect(businessInfo.lat).to.be.within(-90, 90);\r",
													"        pm.expect(businessInfo.lng).to.be.within(-180, 180);\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîí 12. Security Headers Check\r",
													"// pm.test(\"üîí Security headers present\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"// });\r",
													"\r",
													"// üìù 13. Store Merchant Data\r",
													"pm.test(\"üìù Store merchant data\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.environment.set('merchant_id', res.id);\r",
													"    pm.environment.set('merchant_email', res.email);\r",
													"    pm.environment.set('profile_id', res.profile.id);\r",
													"    pm.environment.set('bank_info_id', res.bankInfo.id);\r",
													"    \r",
													"    if (res.corporationBusinessInfo) {\r",
													"        pm.environment.set('business_info_id', res.corporationBusinessInfo.id);\r",
													"    }\r",
													"    \r",
													"    console.log(`üíæ Stored merchant: ${res.id} (${res.email})`);\r",
													"});\r",
													"\r",
													"// üíº 14. KYB Status Validation\r",
													"pm.test(\"üíº KYB status matches account type\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    if (res.isKybd) {\r",
													"        if (res.accountType === \"CORPORATION\") {\r",
													"            pm.expect(res.corporationBusinessInfo).to.exist;\r",
													"        } else if (res.accountType === \"INDIVIDUAL\") {\r",
													"            pm.expect(res.individualBusinessInfo).to.exist;\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"// üí≥ 15. Bank Info Validation\r",
													"pm.test(\"üí≥ Valid IBAN format\", () => {\r",
													"    const iban = pm.response.json().bankInfo.iban;\r",
													"    // Basic IBAN validation - real validation would require country-specific checks\r",
													"    pm.expect(iban).to.match(/^[A-Z]{2}\\d{2}\\s?(\\w{4}\\s?){2,7}\\w{1,4}$/);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/account/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"account",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Setting",
							"item": [
								{
									"name": "Callback url",
									"item": [
										{
											"name": "Get all",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{STAFF_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/staff/merchant/setting/callback/:merchantAccountId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"staff",
														"merchant",
														"setting",
														"callback",
														":merchantAccountId"
													],
													"variable": [
														{
															"key": "merchantAccountId",
															"value": "{{MERCHANT_ACCOUNT_ID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{MERCHANT_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"isActive\": false,\r\n    \"callbackUrlId\": 7\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/staff/merchant/setting/callback/:merchantAccountId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"staff",
														"merchant",
														"setting",
														"callback",
														":merchantAccountId"
													],
													"variable": [
														{
															"key": "merchantAccountId",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{STAFF_ACCESS_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"url\": \"tadilo.com\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/staff/merchant/setting/callback/:merchantAccountId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"staff",
														"merchant",
														"setting",
														"callback",
														":merchantAccountId"
													],
													"variable": [
														{
															"key": "merchantAccountId",
															"value": "{{MERCHANT_ACCOUNT_ID}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"isActive\": false,\r\n\t\"callbackUrlId\": 7\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/setting/callback/:merchantAccountId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"setting",
												"callback",
												":merchantAccountId"
											],
											"variable": [
												{
													"key": "merchantAccountId",
													"value": "{{merchant_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"url\": \"https://miropay.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/setting/callback/:merchantAccountId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"setting",
												"callback",
												":merchantAccountId"
											],
											"variable": [
												{
													"key": "merchantAccountId",
													"value": "{{merchant_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/setting/callback/:merchantAccountId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"setting",
												"callback",
												":merchantAccountId"
											],
											"variable": [
												{
													"key": "merchantAccountId",
													"value": "{{merchant_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Internal Payment üíö",
							"item": [
								{
									"name": "Paginated üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status code is 200\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì¶ 2. Response structure validation\r",
													"pm.test(\"üì¶ Response has pagination and items array\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res).to.be.an(\"object\");\r",
													"    pm.expect(res).to.have.property(\"items\").that.is.an(\"array\");\r",
													"    pm.expect(res).to.have.property(\"totalItems\").that.is.a(\"number\");\r",
													"    pm.expect(res).to.have.property(\"totalPages\").that.is.a(\"number\");\r",
													"    pm.expect(res).to.have.property(\"page\").that.is.a(\"number\");\r",
													"    pm.expect(res).to.have.property(\"hasNext\").that.is.a(\"boolean\");\r",
													"    pm.expect(res).to.have.property(\"hasPrev\").that.is.a(\"boolean\");\r",
													"});\r",
													"\r",
													"// üîé 3. Each item has required fields with correct types and formats\r",
													"pm.test(\"üîé Each internal payment item is valid\", () => {\r",
													"    const items = pm.response.json().items;\r",
													"\r",
													"    items.forEach((item, index) => {\r",
													"        pm.expect(item).to.be.an(\"object\");\r",
													"        \r",
													"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
													"        pm.expect(item).to.have.property(\"referenceCode\").that.is.a(\"string\").and.match(\r",
													"            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i\r",
													"        );\r",
													"\r",
													"        pm.expect(item).to.have.property(\"amount\").that.is.a(\"string\");\r",
													"        pm.expect(item.amount).to.match(/^\\d+(\\.\\d+)?$/);  // amount string with number format\r",
													"        \r",
													"        pm.expect(item).to.have.property(\"gateways\").that.is.an(\"array\");\r",
													"        pm.expect(item.gateways.length).to.be.at.least(1);\r",
													"\r",
													"        [\"collectCustomerEmail\", \"collectCustomerPhoneNumber\", \"collectFeeFromCustomer\", \"isActive\"].forEach(flag => {\r",
													"            pm.expect(item).to.have.property(flag).that.is.a(\"boolean\");\r",
													"        });\r",
													"\r",
													"        [\"title\", \"description\", \"creationSource\", \"paymentLink\"].forEach(field => {\r",
													"            pm.expect(item).to.have.property(field).that.is.a(\"string\");\r",
													"        });\r",
													"\r",
													"        pm.expect(item.paymentLink).to.include(\"https://\");\r",
													"\r",
													"        // Date format validation\r",
													"        [\"createdAt\", \"updatedAt\"].forEach(dateField => {\r",
													"            pm.expect(item).to.have.property(dateField).that.is.a(\"string\");\r",
													"            pm.expect(item[dateField]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/internal-payment?page=1&order=ASC&dateFrom=2025-06-29T00:00:00.000Z&dateTo=2025-07-14T00:00:00.000Z",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"internal-payment"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "limit",
													"value": "2",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ASC"
												},
												{
													"key": "status",
													"value": "PENDING",
													"disabled": true
												},
												{
													"key": "referenceCode",
													"value": "63aef4b5-4dbf-4c9d-b6dc-af4ff926dabc",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "2025-06-29T00:00:00.000Z"
												},
												{
													"key": "dateTo",
													"value": "2025-07-14T00:00:00.000Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status code is 200\r",
													"pm.test(\"üü¢ Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üì¶ 2. Response structure validation\r",
													"pm.test(\"üì¶ Response has all required fields\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res).to.be.an(\"object\");\r",
													"\r",
													"    const requiredStringFields = [\r",
													"        \"referenceCode\", \"amount\", \"title\", \"description\", \r",
													"        \"creationSource\", \"paymentLink\"\r",
													"    ];\r",
													"    requiredStringFields.forEach(field => {\r",
													"        pm.expect(res).to.have.property(field).that.is.a(\"string\");\r",
													"    });\r",
													"\r",
													"    pm.expect(res).to.have.property(\"id\").that.is.a(\"number\");\r",
													"\r",
													"    pm.expect(res).to.have.property(\"gateways\").that.is.an(\"array\").and.not.empty;\r",
													"\r",
													"    [\"collectCustomerEmail\", \"collectCustomerPhoneNumber\", \"collectFeeFromCustomer\", \"isActive\"].forEach(flag => {\r",
													"        pm.expect(res).to.have.property(flag).that.is.a(\"boolean\");\r",
													"    });\r",
													"\r",
													"    pm.expect(res.paymentLink).to.include(\"https://\");\r",
													"\r",
													"    // Date fields\r",
													"    [\"createdAt\", \"updatedAt\"].forEach(dateField => {\r",
													"        pm.expect(res).to.have.property(dateField).that.is.a(\"string\");\r",
													"        pm.expect(res[dateField]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üè¶ 3. Merchant Account validation\r",
													"pm.test(\"üè¶ Merchant account structure is valid\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res).to.have.property(\"merchantAccount\").that.is.an(\"object\");\r",
													"\r",
													"    const m = res.merchantAccount;\r",
													"    pm.expect(m).to.have.property(\"id\").that.is.a(\"number\");\r",
													"    pm.expect(m).to.have.property(\"email\").that.is.a(\"string\");\r",
													"    pm.expect(m).to.have.property(\"phonenumber\").that.is.a(\"string\");\r",
													"    [\"isEmailVerified\", \"isPhoneNumberVerified\", \"isKybd\", \"isActive\"].forEach(flag => {\r",
													"        pm.expect(m).to.have.property(flag).that.is.a(\"boolean\");\r",
													"    });\r",
													"    pm.expect(m).to.have.property(\"accountType\").that.is.a(\"string\");\r",
													"\r",
													"    // Date fields in merchantAccount\r",
													"    [\"createdAt\", \"updatedAt\"].forEach(dateField => {\r",
													"        pm.expect(m).to.have.property(dateField).that.is.a(\"string\");\r",
													"        pm.expect(m[dateField]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üîÑ 4. External payments array check\r",
													"pm.test(\"üîÑ External payments is an array\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res).to.have.property(\"externalPayments\").that.is.an(\"array\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/internal-payment/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"internal-payment",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"isActive\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/internal-payment/:internalPaymentId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"internal-payment",
												":internalPaymentId"
											],
											"variable": [
												{
													"key": "internalPaymentId",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Payment Contract üé™ (JADIDE)",
							"item": [
								{
									"name": "List (By Merchant ID)üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check",
													"pm.test(\"üü¢ Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate pagination metadata",
													"pm.test(\"üìä Pagination metadata is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"totalItems\");",
													"    pm.expect(jsonData).to.have.property(\"totalPages\");",
													"    pm.expect(jsonData).to.have.property(\"page\");",
													"    pm.expect(jsonData).to.have.property(\"hasNext\");",
													"    pm.expect(jsonData).to.have.property(\"hasPrev\");",
													"});",
													"",
													"// üîç Validate contract items",
													"pm.test(\"üìÅ Contract items are structured correctly\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\");",
													"",
													"    jsonData.items.forEach((contract) => {",
													"        pm.expect(contract).to.have.property(\"id\");",
													"        pm.expect(contract).to.have.property(\"startingDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(contract).to.have.property(\"expiryDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(contract).to.have.property(\"billingPeriodUnit\").that.is.a(\"number\");",
													"        pm.expect(contract).to.have.property(\"billingPeriod\").that.is.a(\"number\");",
													"        pm.expect(contract).to.have.property(\"isEffective\").that.is.a(\"boolean\");",
													"        pm.expect(contract).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(contract).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    });",
													"});",
													"",
													"// üíæ Save latest contract ID for future use",
													"if (jsonData.items.length > 0) {",
													"    const latestContractId = jsonData.items[0].id;",
													"    pm.environment.set(\"latest_contract_id\", latestContractId);",
													"    console.log(\"üìå Saved latest contract ID:\", latestContractId);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Detail (By Contract ID)üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check",
													"pm.test(\"üü¢ Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate top-level contract fields",
													"pm.test(\"üìÅ Contract detail structure is valid\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"startingDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    pm.expect(jsonData).to.have.property(\"expiryDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    pm.expect(jsonData).to.have.property(\"billingPeriodUnit\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"billingPeriod\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"isEffective\").that.is.a(\"boolean\");",
													"    pm.expect(jsonData).to.have.property(\"createdAt\");",
													"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
													"});",
													"",
													"// üîç Validate apiBillings array",
													"pm.test(\"üì¶ apiBillings array is valid\", function () {",
													"    pm.expect(jsonData.apiBillings).to.be.an(\"array\");",
													"",
													"    jsonData.apiBillings.forEach((billing) => {",
													"        pm.expect(billing).to.have.property(\"id\");",
													"        pm.expect(billing).to.have.property(\"fromDate\");",
													"        pm.expect(billing).to.have.property(\"toDate\");",
													"        pm.expect(billing).to.have.property(\"successCalls\").that.is.a(\"string\");",
													"        pm.expect(billing).to.have.property(\"failedCalls\").that.is.a(\"string\");",
													"        pm.expect(billing).to.have.property(\"createdAt\");",
													"        pm.expect(billing).to.have.property(\"updatedAt\");",
													"        pm.expect(billing).to.have.property(\"rates\").that.is.an(\"array\");",
													"",
													"        // üîç Validate nested rates",
													"        billing.rates.forEach((rate) => {",
													"            pm.expect(rate).to.have.property(\"id\");",
													"            pm.expect(rate).to.have.property(\"roof\").that.is.a(\"number\");",
													"            pm.expect(rate).to.have.property(\"successCallRate\").that.is.a(\"string\");",
													"            pm.expect(rate).to.have.property(\"failCallRate\").that.is.a(\"string\");",
													"            pm.expect(rate).to.have.property(\"createdAt\");",
													"            pm.expect(rate).to.have.property(\"updatedAt\");",
													"        });",
													"",
													"        // üßæ Check invoice field",
													"        pm.expect(billing).to.have.property(\"invoice\");",
													"    });",
													"});",
													"",
													"// üíæ Save contract ID for chaining",
													"pm.environment.set(\"contract_detail_id\", jsonData.id);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/:contractId/detail",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												":contractId",
												"detail"
											],
											"variable": [
												{
													"key": "contractId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Effective (By Merchant ID)üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check",
													"pm.test(\"üü¢ Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate top-level contract fields",
													"pm.test(\"üìÅ Contract is marked as effective\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"isEffective\", true);",
													"    pm.expect(jsonData).to.have.property(\"startingDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    pm.expect(jsonData).to.have.property(\"expiryDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"    pm.expect(jsonData).to.have.property(\"billingPeriodUnit\").that.is.a(\"number\");",
													"    pm.expect(jsonData).to.have.property(\"billingPeriod\").that.is.a(\"number\");",
													"});",
													"",
													"// üîç Validate apiBillings array",
													"pm.test(\"üì¶ apiBillings array is valid\", function () {",
													"    pm.expect(jsonData.apiBillings).to.be.an(\"array\");",
													"",
													"    jsonData.apiBillings.forEach((billing) => {",
													"        pm.expect(billing).to.have.property(\"id\");",
													"        pm.expect(billing).to.have.property(\"fromDate\");",
													"        pm.expect(billing).to.have.property(\"toDate\");",
													"        pm.expect(billing).to.have.property(\"successCalls\").that.is.a(\"string\");",
													"        pm.expect(billing).to.have.property(\"failedCalls\").that.is.a(\"string\");",
													"        pm.expect(billing).to.have.property(\"createdAt\");",
													"        pm.expect(billing).to.have.property(\"updatedAt\");",
													"        pm.expect(billing).to.have.property(\"rates\").that.is.an(\"array\");",
													"",
													"        // üîç Validate nested rates",
													"        billing.rates.forEach((rate) => {",
													"            pm.expect(rate).to.have.property(\"id\");",
													"            pm.expect(rate).to.have.property(\"roof\").that.is.a(\"number\");",
													"            pm.expect(rate).to.have.property(\"successCallRate\").that.is.a(\"string\");",
													"            pm.expect(rate).to.have.property(\"failCallRate\").that.is.a(\"string\");",
													"            pm.expect(rate).to.have.property(\"createdAt\");",
													"            pm.expect(rate).to.have.property(\"updatedAt\");",
													"        });",
													"",
													"        // üßæ Check invoice field",
													"        pm.expect(billing).to.have.property(\"invoice\");",
													"    });",
													"});",
													"",
													"// üíæ Save effective contract ID for future use",
													"pm.environment.set(\"effective_contract_id\", jsonData.id);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/effective/:merchantId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												"effective",
												":merchantId"
											],
											"variable": [
												{
													"key": "merchantId",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Void (Single)",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/:id/void",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												":id",
												"void"
											],
											"variable": [
												{
													"key": "id",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create (By Merchant ID)üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Accept status code 201 for creation",
													"pm.test(\"üü¢ Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate contract metadata",
													"pm.test(\"üìÅ Contract metadata is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"billingPeriod\", 1);",
													"    pm.expect(jsonData).to.have.property(\"billingPeriodUnit\", 3);",
													"    pm.expect(jsonData).to.have.property(\"startingDate\").that.includes(\"2025-07-15\");",
													"    pm.expect(jsonData).to.have.property(\"expiryDate\").that.includes(\"2026-01-15\");",
													"    pm.expect(jsonData).to.have.property(\"isEffective\").that.is.a(\"boolean\");",
													"});",
													"",
													"// üîç Validate apiBillings structure",
													"pm.test(\"üì¶ apiBillings array is present\", function () {",
													"    pm.expect(jsonData.apiBillings).to.be.an(\"array\").with.length.greaterThan(0);",
													"",
													"    jsonData.apiBillings.forEach((billing) => {",
													"        pm.expect(billing).to.have.property(\"id\");",
													"        pm.expect(billing).to.have.property(\"fromDate\");",
													"        pm.expect(billing).to.have.property(\"toDate\");",
													"        pm.expect(billing).to.have.property(\"successCalls\").that.is.a(\"string\");",
													"        pm.expect(billing).to.have.property(\"failedCalls\").that.is.a(\"string\");",
													"        pm.expect(billing).to.have.property(\"createdAt\");",
													"        pm.expect(billing).to.have.property(\"updatedAt\");",
													"    });",
													"});",
													"",
													"// üíæ Save contract ID for future use",
													"pm.environment.set(\"created_contract_id\", jsonData.id);",
													"console.log(\"üìå Saved contract ID:\", jsonData.id);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.0.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"billingPeriod\": 1,\n\t\"billingPeriodUnit\": 3,\n\t\"startingDate\": \"2025-07-15T07:33:06.512Z\",\n\t\"expiryDate\": \"2026-01-15T04:00:06.512Z\",\n\t\"apiBillings\": [\n\t\t{\n\t\t\t\"rates\": [\n\t\t\t\t{\n\t\t\t\t\t\"roof\": 100,\n\t\t\t\t\t\"successCallRate\": 13,\n\t\t\t\t\t\"failCallRate\": 7\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"roof\": 200,\n\t\t\t\t\t\"successCallRate\": 10,\n\t\t\t\t\t\"failCallRate\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"roof\": 300,\n\t\t\t\t\t\"successCallRate\": 8,\n\t\t\t\t\t\"failCallRate\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"roof\": -1,\n\t\t\t\t\t\"successCallRate\": 7,\n\t\t\t\t\t\"failCallRate\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t\n\t\t\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Set Effective (By Merchant ID)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/:contractId/effective",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												":contractId",
												"effective"
											],
											"variable": [
												{
													"key": "contractId",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History (By Merchant ID)üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check",
													"pm.test(\"üü¢ Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üìã Validate items array",
													"pm.test(\"üìÅ Contract history items are valid\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\").with.length.greaterThan(0);",
													"",
													"    jsonData.items.forEach((contract) => {",
													"        pm.expect(contract).to.have.property(\"id\");",
													"        pm.expect(contract).to.have.property(\"startingDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(contract).to.have.property(\"expiryDate\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(contract).to.have.property(\"billingPeriodUnit\").that.is.a(\"number\");",
													"        pm.expect(contract).to.have.property(\"billingPeriod\").that.is.a(\"number\");",
													"        pm.expect(contract).to.have.property(\"isEffective\").that.is.a(\"boolean\");",
													"        pm.expect(contract).to.have.property(\"createdAt\");",
													"        pm.expect(contract).to.have.property(\"updatedAt\");",
													"",
													"        // üîç Validate apiBillings",
													"        if (contract.apiBillings && Array.isArray(contract.apiBillings)) {",
													"            contract.apiBillings.forEach((billing) => {",
													"                pm.expect(billing).to.have.property(\"id\");",
													"                pm.expect(billing).to.have.property(\"fromDate\");",
													"                pm.expect(billing).to.have.property(\"toDate\");",
													"                pm.expect(billing).to.have.property(\"successCalls\").that.is.a(\"string\");",
													"                pm.expect(billing).to.have.property(\"failedCalls\").that.is.a(\"string\");",
													"                pm.expect(billing).to.have.property(\"createdAt\");",
													"                pm.expect(billing).to.have.property(\"updatedAt\");",
													"",
													"                // üîç Validate rates",
													"                if (billing.rates && Array.isArray(billing.rates)) {",
													"                    billing.rates.forEach((rate) => {",
													"                        pm.expect(rate).to.have.property(\"id\");",
													"                        pm.expect(rate).to.have.property(\"roof\").that.is.a(\"number\");",
													"                        pm.expect(rate).to.have.property(\"successCallRate\").that.is.a(\"string\");",
													"                        pm.expect(rate).to.have.property(\"failCallRate\").that.is.a(\"string\");",
													"                        pm.expect(rate).to.have.property(\"createdAt\");",
													"                        pm.expect(rate).to.have.property(\"updatedAt\");",
													"                    });",
													"                } else {",
													"                    console.warn(`‚ö†Ô∏è No rates found in billing ID ${billing.id}`);",
													"                }",
													"            });",
													"        } else {",
													"            console.warn(`‚ö†Ô∏è No apiBillings found in contract ID ${contract.id}`);",
													"        }",
													"    });",
													"});",
													"",
													"// üíæ Save latest contract ID",
													"pm.environment.set(\"latest_contract_id\", jsonData.items[0].id);",
													"console.log(\"üìå Saved latest contract ID:\", jsonData.items[0].id);",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/payment/contract/:merchantId/history",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"payment",
												"contract",
												":merchantId",
												"history"
											],
											"variable": [
												{
													"key": "merchantId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Profile üíö",
							"item": [
								{
									"name": "Upload Logo üíö",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.1"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/N.Mahmoudi/Pictures/Screenshots/Screenshot 2025-09-21 163826.png"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/profile/upload-logo/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"profile",
												"upload-logo",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "20"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Session üíö",
							"item": [
								{
									"name": "Terminate üíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"sessionId\": \"679\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/auth/session/:merchantId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"auth",
												"session",
												":merchantId"
											],
											"variable": [
												{
													"key": "merchantId",
													"value": "{{merchant_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const raw = pm.response.text();\r",
													"const hasBody = raw && raw.trim().length > 0;\r",
													"let body = null;\r",
													"\r",
													"try { body = hasBody ? JSON.parse(raw) : null; } catch (e) {}\r",
													"\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => pm.response.to.have.status(200));\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => pm.expect(pm.response.responseTime).to.be.below(2000));\r",
													"pm.test(\"üßæ Response body is JSON\", () => {\r",
													"    pm.expect(body).to.be.an(\"object\");\r",
													"});\r",
													"pm.test(\"üì¶ Contains sessions array\", () => {\r",
													"    pm.expect(body).to.have.property(\"sessions\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// ---------- Validate sessions ----------\r",
													"if (Array.isArray(body.sessions)) {\r",
													"    body.sessions.forEach((s, idx) => {\r",
													"        pm.test(`üîé Session[${idx}] has required fields`, () => {\r",
													"            pm.expect(s).to.have.property(\"id\").that.is.a(\"string\");\r",
													"            pm.expect(s).to.have.property(\"loginIp\").that.is.a(\"string\");\r",
													"            pm.expect(s).to.have.property(\"sessionId\").that.is.a(\"string\");\r",
													"            pm.expect(s).to.have.property(\"child\");\r",
													"        });\r",
													"\r",
													"        pm.test(`üî¢ Session[${idx}] field types are valid`, () => {\r",
													"            pm.expect(s.child).to.satisfy(val => typeof val === \"number\" || val === null);\r",
													"\r",
													"            // Optional fields: string or null\r",
													"            [\"browser\", \"osName\", \"osVersion\", \"osVersionName\", \"platformType\", \"platformVendor\", \"platformModel\", \"engine\"]\r",
													"                .forEach(f => {\r",
													"                    if (s[f] !== null && s[f] !== undefined) {\r",
													"                        pm.expect(s[f]).to.be.a(\"string\");\r",
													"                    }\r",
													"                });\r",
													"        });\r",
													"    });\r",
													"}\r",
													"\r",
													"// ---------- No sensitive info ----------\r",
													"pm.test(\"üîê No sensitive data leaked\", () => {\r",
													"    const secretRegex = /(secret|api[_-]?key|access[_-]?token|refresh[_-]?token)/i;\r",
													"    pm.expect(raw).to.not.match(secretRegex);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{STAFF_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/staff/merchant/auth/session/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"staff",
												"merchant",
												"auth",
												"session",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{merchant_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Ledger üíö",
					"item": [
						{
							"name": "Gateway Accounts üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const raw = pm.response.text();\r",
											"const hasBody = raw && raw.trim().length > 0;\r",
											"let body = null;\r",
											"\r",
											"try { body = hasBody ? JSON.parse(raw) : null; } catch (e) { /* JSON parse error handled in tests */ }\r",
											"\r",
											"// 1Ô∏è‚É£ Status & Performance\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// 2Ô∏è‚É£ Body presence & JSON validity\r",
											"pm.test(\"üì¶ Response body is valid JSON\", () => {\r",
											"    pm.expect(hasBody, \"response body should not be empty\").to.be.true;\r",
											"    pm.expect(body, \"response should parse as JSON\").to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// 3Ô∏è‚É£ Content-Type header\r",
											"pm.test(\"üîê Content-Type header is application/json\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    // we tolerate charset variations\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// 4Ô∏è‚É£ Top-level structure\r",
											"pm.test(\"üîé Top-level fields exist (id, code, name, isActive, ledgerAccounts)\", () => {\r",
											"    pm.expect(body).to.have.property(\"id\");\r",
											"    pm.expect(body).to.have.property(\"code\");\r",
											"    pm.expect(body).to.have.property(\"name\");\r",
											"    pm.expect(body).to.have.property(\"isActive\");\r",
											"    pm.expect(body).to.have.property(\"ledgerAccounts\");\r",
											"});\r",
											"\r",
											"// 5Ô∏è‚É£ Top-level types\r",
											"pm.test(\"üî¢ Top-level field types are correct\", () => {\r",
											"    pm.expect(body.id).to.satisfy(v => typeof v === \"string\" || typeof v === \"number\");\r",
											"    pm.expect(body.code).to.be.a(\"string\");\r",
											"    pm.expect(body.name).to.be.a(\"string\");\r",
											"    pm.expect(body.isActive).to.be.a(\"boolean\");\r",
											"    pm.expect(body.ledgerAccounts).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// 6Ô∏è‚É£ Ledger accounts array not empty\r",
											"pm.test(\"üìä ledgerAccounts is a non-empty array\", () => {\r",
											"    pm.expect(body.ledgerAccounts.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"// Helper to accept numeric-as-string or number\r",
											"const isNumStringOrNumber = (v) => {\r",
											"    if (v === null || v === undefined) return false;\r",
											"    if (typeof v === \"number\") return true;\r",
											"    if (typeof v === \"string\") return /^-?\\d+(\\.\\d+)?$/.test(v.trim());\r",
											"    return false;\r",
											"};\r",
											"\r",
											"// 7Ô∏è‚É£ Validate each ledgerAccount fields & types\r",
											"body && Array.isArray(body.ledgerAccounts) && body.ledgerAccounts.forEach((acct, i) => {\r",
											"    pm.test(`üßæ ledgerAccounts[${i}] required fields existence`, () => {\r",
											"        pm.expect(acct).to.have.property(\"id\");\r",
											"        pm.expect(acct).to.have.property(\"debitsPending\");\r",
											"        pm.expect(acct).to.have.property(\"debitsPosted\");\r",
											"        pm.expect(acct).to.have.property(\"creditsPending\");\r",
											"        pm.expect(acct).to.have.property(\"creditsPosted\");\r",
											"        pm.expect(acct).to.have.property(\"ledger\");\r",
											"        pm.expect(acct).to.have.property(\"description\");\r",
											"        pm.expect(acct).to.have.property(\"flags\");\r",
											"        pm.expect(acct).to.have.property(\"createdAt\");\r",
											"    });\r",
											"\r",
											"    pm.test(`üî¢ ledgerAccounts[${i}] field types`, () => {\r",
											"        pm.expect(typeof acct.id === \"string\" || typeof acct.id === \"number\").to.be.true;\r",
											"\r",
											"        // numeric-string fields\r",
											"        pm.expect(isNumStringOrNumber(acct.debitsPending), \"debitsPending should be numeric string or number\").to.be.true;\r",
											"        pm.expect(isNumStringOrNumber(acct.debitsPosted), \"debitsPosted should be numeric string or number\").to.be.true;\r",
											"        pm.expect(isNumStringOrNumber(acct.creditsPending), \"creditsPending should be numeric string or number\").to.be.true;\r",
											"        pm.expect(isNumStringOrNumber(acct.creditsPosted), \"creditsPosted should be numeric string or number\").to.be.true;\r",
											"\r",
											"        // ledger is numeric\r",
											"        pm.expect(acct.ledger).to.satisfy(v => typeof v === \"number\" || (typeof v === \"string\" && /^\\d+$/.test(v)), \"ledger should be integer or numeric string\");\r",
											"\r",
											"        pm.expect(acct.description).to.be.a(\"string\");\r",
											"        pm.expect(acct.flags).to.satisfy(v => typeof v === \"number\" || (typeof v === \"string\" && /^\\d+$/.test(v)));\r",
											"        pm.expect(acct.createdAt).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.test(`üìÖ ledgerAccounts[${i}] createdAt is ISO 8601`, () => {\r",
											"        // Accept both milliseconds and seconds fractional formats; basic ISO check:\r",
											"        pm.expect(acct.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"// 8Ô∏è‚É£ Unique IDs\r",
											"pm.test(\"üî¢ ledgerAccounts ids are unique\", () => {\r",
											"    if (Array.isArray(body.ledgerAccounts)) {\r",
											"        const ids = body.ledgerAccounts.map(a => String(a.id));\r",
											"        const unique = [...new Set(ids)];\r",
											"        pm.expect(unique.length).to.equal(ids.length);\r",
											"    } else {\r",
											"        pm.expect.fail(\"ledgerAccounts is not an array\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// 9Ô∏è‚É£ Optional sanity: creditsPosted/debitsPosted are >= 0\r",
											"pm.test(\"üßÆ creditsPosted/debitsPosted are non-negative\", () => {\r",
											"    body.ledgerAccounts.forEach((acct) => {\r",
											"        const debPosted = Number(String(acct.debitsPosted));\r",
											"        const credPosted = Number(String(acct.creditsPosted));\r",
											"        pm.expect(Number.isFinite(debPosted)).to.be.true;\r",
											"        pm.expect(Number.isFinite(credPosted)).to.be.true;\r",
											"        pm.expect(debPosted).to.be.at.least(0);\r",
											"        pm.expect(credPosted).to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"// 1Ô∏è‚É£0Ô∏è‚É£ Save useful values to environment for follow-up requests\r",
											"if (Array.isArray(body.ledgerAccounts) && body.ledgerAccounts.length > 0) {\r",
											"    pm.environment.set(\"LEDGER_GATEWAY_ID\", String(body.id));\r",
											"    pm.environment.set(\"LEDGER_GATEWAY_CODE\", body.code);\r",
											"    pm.environment.set(\"FIRST_LEDGER_ACCOUNT_ID\", String(body.ledgerAccounts[0].id));\r",
											"}\r",
											"\r",
											"// 1Ô∏è‚É£1Ô∏è‚É£ No secrets leaked\r",
											"pm.test(\"üîê Response does not contain obvious secrets/tokens\", () => {\r",
											"    const secretRegex = /(api[_-]?key|access[_-]?token|refresh[_-]?token|password|secret)/i;\r",
											"    pm.expect(raw).to.not.match(secretRegex);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/staff/merchant/ledger/gateway/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"merchant",
										"ledger",
										"gateway",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Merchant Accounts üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// -----------------------------\r",
											"// GET /staff/merchant/ledger/merchant/:id ‚Äî Postman Test Script\r",
											"// Language: English (titles include icons)\r",
											"// -----------------------------\r",
											"\r",
											"const raw = pm.response.text();\r",
											"const hasBody = raw && raw.trim().length > 0;\r",
											"let body = null;\r",
											"\r",
											"try {\r",
											"    body = hasBody ? JSON.parse(raw) : null;\r",
											"} catch (err) {\r",
											"    // parsing error will be asserted below\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 1Ô∏è‚É£ Status & performance\r",
											"// -----------------------------\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"‚è± Response time is reasonable (< 2000ms)\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 2Ô∏è‚É£ Body & headers\r",
											"// -----------------------------\r",
											"pm.test(\"üì¶ Response body is not empty and valid JSON\", () => {\r",
											"    pm.expect(hasBody, \"Response body should not be empty\").to.be.true;\r",
											"    pm.expect(body, \"Response should be valid JSON\").to.be.an(\"object\");\r",
											"});\r",
											"pm.test(\"üîê Content-Type header contains application/json\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 3Ô∏è‚É£ Top-level fields & types\r",
											"// -----------------------------\r",
											"pm.test(\"üîé Top-level fields exist (id, ledgerAccounts)\", () => {\r",
											"    pm.expect(body).to.have.property(\"id\");\r",
											"    pm.expect(body).to.have.property(\"ledgerAccounts\");\r",
											"});\r",
											"pm.test(\"üî¢ Top-level field types are correct\", () => {\r",
											"    pm.expect(String(body.id).length).to.be.greaterThan(0);\r",
											"    pm.expect(body.ledgerAccounts).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// helper: numeric-string or number\r",
											"const isNumStringOrNumber = v => {\r",
											"    if (v === null || v === undefined) return false;\r",
											"    if (typeof v === \"number\") return Number.isFinite(v);\r",
											"    if (typeof v === \"string\") return /^-?\\d+(\\.\\d+)?$/.test(v.trim());\r",
											"    return false;\r",
											"};\r",
											"\r",
											"// -----------------------------\r",
											"// 4Ô∏è‚É£ ledgerAccounts array validation\r",
											"// -----------------------------\r",
											"pm.test(\"üìä ledgerAccounts is a non-empty array\", () => {\r",
											"    pm.expect(Array.isArray(body.ledgerAccounts)).to.be.true;\r",
											"    pm.expect(body.ledgerAccounts.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"body && Array.isArray(body.ledgerAccounts) && body.ledgerAccounts.forEach((acct, i) => {\r",
											"    pm.test(`üßæ ledgerAccounts[${i}] required fields`, () => {\r",
											"        pm.expect(acct).to.have.property(\"id\");\r",
											"        pm.expect(acct).to.have.property(\"debitsPending\");\r",
											"        pm.expect(acct).to.have.property(\"debitsPosted\");\r",
											"        pm.expect(acct).to.have.property(\"creditsPending\");\r",
											"        pm.expect(acct).to.have.property(\"creditsPosted\");\r",
											"        pm.expect(acct).to.have.property(\"userData128\");\r",
											"        pm.expect(acct).to.have.property(\"ledger\");\r",
											"        pm.expect(acct).to.have.property(\"description\");\r",
											"        pm.expect(acct).to.have.property(\"flags\");\r",
											"        pm.expect(acct).to.have.property(\"createdAt\");\r",
											"    });\r",
											"\r",
											"    pm.test(`üî¢ ledgerAccounts[${i}] field types & formats`, () => {\r",
											"        pm.expect(typeof acct.id === \"string\" || typeof acct.id === \"number\").to.be.true;\r",
											"\r",
											"        pm.expect(isNumStringOrNumber(acct.debitsPending), \"debitsPending should be numeric-string or number\").to.be.true;\r",
											"        pm.expect(isNumStringOrNumber(acct.debitsPosted), \"debitsPosted should be numeric-string or number\").to.be.true;\r",
											"        pm.expect(isNumStringOrNumber(acct.creditsPending), \"creditsPending should be numeric-string or number\").to.be.true;\r",
											"        pm.expect(isNumStringOrNumber(acct.creditsPosted), \"creditsPosted should be numeric-string or number\").to.be.true;\r",
											"\r",
											"        pm.expect(isNumStringOrNumber(acct.userData128), \"userData128 should be numeric-string or number\").to.be.true;\r",
											"        pm.expect(typeof acct.description).to.equal(\"string\");\r",
											"        pm.expect(typeof acct.flags === \"number\" || (typeof acct.flags === \"string\" && /^\\d+$/.test(acct.flags))).to.be.true;\r",
											"\r",
											"        // ledger must be integer or numeric string\r",
											"        pm.expect(typeof acct.ledger === \"number\" || (typeof acct.ledger === \"string\" && /^\\d+$/.test(acct.ledger))).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(`üìÖ ledgerAccounts[${i}] createdAt is ISO 8601`, () => {\r",
											"        pm.expect(acct.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"    });\r",
											"\r",
											"    pm.test(`üßÆ ledgerAccounts[${i}] numeric balances are non-negative`, () => {\r",
											"        const dp = Number(String(acct.debitsPosted));\r",
											"        const cp = Number(String(acct.creditsPosted));\r",
											"        pm.expect(Number.isFinite(dp)).to.be.true;\r",
											"        pm.expect(Number.isFinite(cp)).to.be.true;\r",
											"        pm.expect(dp).to.be.at.least(0);\r",
											"        pm.expect(cp).to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 5Ô∏è‚É£ Uniqueness & consistency\r",
											"// -----------------------------\r",
											"pm.test(\"üî¢ ledgerAccounts ids should be unique\", () => {\r",
											"    const ids = body.ledgerAccounts.map(a => String(a.id));\r",
											"    const unique = [...new Set(ids)];\r",
											"    pm.expect(unique.length).to.equal(ids.length);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 6Ô∏è‚É£ Business rules / sanity checks\r",
											"// -----------------------------\r",
											"pm.test(\"üìù Descriptions are meaningful strings\", () => {\r",
											"    body.ledgerAccounts.forEach(acct => {\r",
											"        pm.expect(acct.description.trim().length).to.be.at.least(3);\r",
											"    });\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 7Ô∏è‚É£ Save useful values for follow-up requests\r",
											"// -----------------------------\r",
											"if (Array.isArray(body.ledgerAccounts) && body.ledgerAccounts.length > 0) {\r",
											"    pm.environment.set(\"MERCHANT_LEDGER_ID\", String(body.id));\r",
											"    pm.environment.set(\"FIRST_MERCHANT_LEDGER_ACCOUNT_ID\", String(body.ledgerAccounts[0].id));\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 8Ô∏è‚É£ Security quick-scan\r",
											"// -----------------------------\r",
											"pm.test(\"üîê Response does not contain obvious tokens/secrets\", () => {\r",
											"    const secretRegex = /(api[_-]?key|access[_-]?token|refresh[_-]?token|password|secret)/i;\r",
											"    pm.expect(raw).to.not.match(secretRegex);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/staff/merchant/ledger/merchant/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"merchant",
										"ledger",
										"merchant",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment Details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// raw body handling\r",
											"const raw = pm.response.text();\r",
											"const hasBody = raw && raw.trim().length > 0;\r",
											"let body = null;\r",
											"try {\r",
											"    body = hasBody ? JSON.parse(raw) : null;\r",
											"} catch (e) {\r",
											"    // leave body null, tests below will catch parse error\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 1Ô∏è‚É£ Status & performance\r",
											"// -----------------------------\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"‚è± Response time is reasonable (< 2000ms)\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 2Ô∏è‚É£ Headers & body existence\r",
											"// -----------------------------\r",
											"pm.test(\"üîê Authorization header present in request\", () => {\r",
											"    const authHeader = pm.request.headers.get(\"Authorization\") || pm.request.headers.get(\"authorization\");\r",
											"    pm.expect(authHeader, \"Authorization header should be present\").to.be.a('string');\r",
											"    pm.expect(authHeader).to.include('Bearer');\r",
											"});\r",
											"\r",
											"pm.test(\"üì¶ Response body is not empty and valid JSON\", () => {\r",
											"    pm.expect(hasBody, \"Response body should not be empty\").to.be.true;\r",
											"    pm.expect(body, \"Response should be valid JSON\").to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"üîí Content-Type header includes application/json\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 3Ô∏è‚É£ Top-level fields & types\r",
											"// -----------------------------\r",
											"pm.test(\"üîé Top-level required fields exist\", () => {\r",
											"    pm.expect(body).to.have.property(\"id\");\r",
											"    pm.expect(body).to.have.property(\"createdAt\");\r",
											"    pm.expect(body).to.have.property(\"amount\");\r",
											"    pm.expect(body).to.have.property(\"gateway\");\r",
											"    pm.expect(body).to.have.property(\"erc\");\r",
											"    pm.expect(body).to.have.property(\"referenceCode\");\r",
											"    pm.expect(body).to.have.property(\"srfc\");\r",
											"    pm.expect(body).to.have.property(\"transfers\");\r",
											"});\r",
											"\r",
											"pm.test(\"üî¢ Top-level field types are correct\", () => {\r",
											"    // id: string or number\r",
											"    pm.expect(typeof body.id === \"string\" || typeof body.id === \"number\").to.be.true;\r",
											"\r",
											"    // createdAt ISO string\r",
											"    pm.expect(body.createdAt).to.be.a(\"string\");\r",
											"    pm.expect(body.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"\r",
											"    // amount numeric-string or number\r",
											"    const isNumStringOrNumber = v => {\r",
											"        if (v === null || v === undefined) return false;\r",
											"        if (typeof v === \"number\") return Number.isFinite(v);\r",
											"        if (typeof v === \"string\") return /^-?\\d+(\\.\\d+)?$/.test(v.trim());\r",
											"        return false;\r",
											"    };\r",
											"    pm.expect(isNumStringOrNumber(body.amount), \"amount should be numeric-string or number\").to.be.true;\r",
											"\r",
											"    pm.expect(body.gateway).to.be.a(\"string\");\r",
											"    pm.expect(body.erc).to.be.a(\"string\");\r",
											"    pm.expect(body.referenceCode).to.be.a(\"string\");\r",
											"    pm.expect(body.srfc).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(Array.isArray(body.transfers)).to.be.true;\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 4Ô∏è‚É£ Transfers validation\r",
											"// -----------------------------\r",
											"pm.test(\"üìä Transfers array is non-empty and well-formed\", () => {\r",
											"    pm.expect(body.transfers.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"if (Array.isArray(body.transfers)) {\r",
											"    // unique transfer ids\r",
											"    pm.test(\"üßæ Transfer IDs are unique\", () => {\r",
											"        const ids = body.transfers.map(t => String(t.id));\r",
											"        const unique = [...new Set(ids)];\r",
											"        pm.expect(unique.length).to.equal(ids.length);\r",
											"    });\r",
											"\r",
											"    // per-transfer checks\r",
											"    body.transfers.forEach((t, idx) => {\r",
											"        pm.test(`üîç transfers[${idx}] required fields`, () => {\r",
											"            pm.expect(t).to.have.property(\"id\");\r",
											"            pm.expect(t).to.have.property(\"amount\");\r",
											"            pm.expect(t).to.have.property(\"debitAccountId\");\r",
											"            pm.expect(t).to.have.property(\"creditAccountId\");\r",
											"            pm.expect(t).to.have.property(\"description\");\r",
											"            pm.expect(t).to.have.property(\"createdAt\");\r",
											"        });\r",
											"\r",
											"        pm.test(`üî¢ transfers[${idx}] types & formats`, () => {\r",
											"            pm.expect(typeof t.id === \"string\" || typeof t.id === \"number\").to.be.true;\r",
											"            pm.expect(/^(\\d+|\\d+\\.\\d+)$/.test(String(t.amount)), \"transfer.amount should be numeric-string or number\").to.be.true;\r",
											"            pm.expect(typeof t.debitAccountId === \"string\" || typeof t.debitAccountId === \"number\").to.be.true;\r",
											"            pm.expect(typeof t.creditAccountId === \"string\" || typeof t.creditAccountId === \"number\").to.be.true;\r",
											"            pm.expect(typeof t.description).to.equal(\"string\");\r",
											"            pm.expect(t.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"        });\r",
											"\r",
											"        pm.test(`üí∞ transfers[${idx}] amount non-negative`, () => {\r",
											"            const amt = Number(String(t.amount));\r",
											"            pm.expect(Number.isFinite(amt)).to.be.true;\r",
											"            pm.expect(amt).to.be.at.least(0);\r",
											"        });\r",
											"    });\r",
											"\r",
											"    // sum / consistency checks\r",
											"    pm.test(\"üîÅ Transfers total amount sanity check\", () => {\r",
											"        const totalTransfers = body.transfers.reduce((acc, t) => acc + Number(String(t.amount || 0)), 0);\r",
											"        const mainAmount = Number(String(body.amount));\r",
											"        pm.expect(Number.isFinite(totalTransfers)).to.be.true;\r",
											"        pm.expect(Number.isFinite(mainAmount)).to.be.true;\r",
											"\r",
											"        // Business-safe assertion:\r",
											"        // totalTransfers should be >= main amount (fees/zero transfers possible)\r",
											"        pm.expect(totalTransfers).to.be.at.least(mainAmount);\r",
											"\r",
											"        // It is also reasonable to expect at least one transfer amount to be >= main amount OR equal:\r",
											"        const hasPrimary = body.transfers.some(t => Number(String(t.amount)) >= mainAmount);\r",
											"        pm.expect(hasPrimary, \"At least one transfer should be equal/greater than main amount (primary cash transfer)\").to.be.true;\r",
											"    });\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 5Ô∏è‚É£ IDs & reference storage for follow-up tests\r",
											"// -----------------------------\r",
											"if (body) {\r",
											"    pm.environment.set(\"LEDGER_PAYMENT_ID\", String(body.id));\r",
											"    pm.environment.set(\"LEDGER_PAYMENT_ERC\", String(body.erc));\r",
											"    pm.environment.set(\"LEDGER_PAYMENT_SRFC\", String(body.srfc));\r",
											"    pm.environment.set(\"LEDGER_PAYMENT_REFERENCE\", String(body.referenceCode));\r",
											"    if (Array.isArray(body.transfers) && body.transfers.length > 0) {\r",
											"        pm.environment.set(\"FIRST_LEDGER_TRANSFER_ID\", String(body.transfers[0].id));\r",
											"    }\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 6Ô∏è‚É£ Business-sanity quick rules\r",
											"// -----------------------------\r",
											"pm.test(\"üìù Descriptions for transfers are non-empty and meaningful\", () => {\r",
											"    if (Array.isArray(body.transfers)) {\r",
											"        body.transfers.forEach(t => {\r",
											"            pm.expect(t.description.trim().length).to.be.at.least(3);\r",
											"        });\r",
											"    } else {\r",
											"        pm.expect(Array.isArray(body.transfers)).to.be.true;\r",
											"    }\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 7Ô∏è‚É£ Security quick-scan\r",
											"// -----------------------------\r",
											"pm.test(\"üîê Response does not contain obvious tokens/secrets\", () => {\r",
											"    const secretRegex = /(api[_-]?key|access[_-]?token|refresh[_-]?token|password|secret|private[_-]?key)/i;\r",
											"    pm.expect(raw).to.not.match(secretRegex);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 8Ô∏è‚É£ Optional: warn on unusual values (non-failing)\r",
											"// -----------------------------\r",
											"(() => {\r",
											"    if (body && Array.isArray(body.transfers)) {\r",
											"        const totalTransfers = body.transfers.reduce((acc, t) => acc + Number(String(t.amount || 0)), 0);\r",
											"        const mainAmount = Number(String(body.amount || 0));\r",
											"        if (totalTransfers > mainAmount * 1.5) {\r",
											"            console.warn(\"‚ö†Ô∏è total transfers amount is much larger than main amount ‚Äî investigate (non-blocking).\", { totalTransfers, mainAmount });\r",
											"        }\r",
											"    }\r",
											"})();\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/staff/merchant/ledger/payment/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"merchant",
										"ledger",
										"payment",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Settlement Details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// raw response handling\r",
											"const raw = pm.response.text();\r",
											"const hasBody = raw && raw.trim().length > 0;\r",
											"let body = null;\r",
											"try {\r",
											"    body = hasBody ? JSON.parse(raw) : null;\r",
											"} catch (e) {\r",
											"    // parsing error will be caught in tests\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 1Ô∏è‚É£ Status & performance\r",
											"// -----------------------------\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"‚è± Response time is below 2000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 2Ô∏è‚É£ Headers & body existence\r",
											"// -----------------------------\r",
											"pm.test(\"üîê Authorization header was sent\", () => {\r",
											"    const auth = pm.request.headers.get(\"Authorization\") || pm.request.headers.get(\"authorization\");\r",
											"    pm.expect(auth, \"Authorization must be present\").to.be.a(\"string\");\r",
											"    pm.expect(auth).to.include(\"Bearer\");\r",
											"});\r",
											"\r",
											"pm.test(\"üì¶ Response body is not empty and valid JSON\", () => {\r",
											"    pm.expect(hasBody).to.be.true;\r",
											"    pm.expect(body).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"üîí Content-Type is application/json\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 3Ô∏è‚É£ Top-level fields & types\r",
											"// -----------------------------\r",
											"pm.test(\"üîé Required top-level fields exist\", () => {\r",
											"    [\r",
											"        \"id\", \"amount\", \"transferId\", \"trackingId\", \"transferDate\",\r",
											"        \"bankName\", \"iban\", \"cardHolderName\", \"paidAt\", \"transfers\"\r",
											"    ].forEach(f => pm.expect(body).to.have.property(f));\r",
											"});\r",
											"\r",
											"pm.test(\"üî¢ Top-level field types and formats\", () => {\r",
											"    pm.expect(typeof body.id === \"string\" || typeof body.id === \"number\").to.be.true;\r",
											"    pm.expect(/^-?\\d+(\\.\\d+)?$/.test(String(body.amount))).to.be.true;\r",
											"\r",
											"    // nullable fields\r",
											"    [\"transferId\", \"trackingId\", \"transferDate\"].forEach(f => {\r",
											"        pm.expect([null, \"string\", \"number\"]).to.include(body[f] === null ? null : typeof body[f]);\r",
											"    });\r",
											"\r",
											"    pm.expect(body.bankName).to.be.a(\"string\");\r",
											"    pm.expect(body.iban).to.be.a(\"string\");\r",
											"    pm.expect(body.cardHolderName).to.be.a(\"string\");\r",
											"\r",
											"    pm.expect(body.paidAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"\r",
											"    pm.expect(Array.isArray(body.transfers)).to.be.true;\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 4Ô∏è‚É£ Transfers validation\r",
											"// -----------------------------\r",
											"pm.test(\"üìä Transfers array has at least one element\", () => {\r",
											"    pm.expect(body.transfers.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"if (Array.isArray(body.transfers)) {\r",
											"    // unique IDs\r",
											"    pm.test(\"üßæ Transfer IDs are unique\", () => {\r",
											"        const ids = body.transfers.map(t => String(t.id));\r",
											"        pm.expect(new Set(ids).size).to.equal(ids.length);\r",
											"    });\r",
											"\r",
											"    // check each transfer\r",
											"    body.transfers.forEach((t, idx) => {\r",
											"        pm.test(`üîç transfers[${idx}] required fields`, () => {\r",
											"            [\"id\", \"amount\", \"debitAccountId\", \"creditAccountId\", \"description\", \"createdAt\"].forEach(f => {\r",
											"                pm.expect(t).to.have.property(f);\r",
											"            });\r",
											"        });\r",
											"\r",
											"        pm.test(`üî¢ transfers[${idx}] field types & formats`, () => {\r",
											"            pm.expect(typeof t.id === \"string\" || typeof t.id === \"number\").to.be.true;\r",
											"            pm.expect(/^-?\\d+(\\.\\d+)?$/.test(String(t.amount))).to.be.true;\r",
											"            pm.expect(typeof t.debitAccountId === \"string\" || typeof t.debitAccountId === \"number\").to.be.true;\r",
											"            pm.expect(typeof t.creditAccountId === \"string\" || typeof t.creditAccountId === \"number\").to.be.true;\r",
											"            pm.expect(t.description).to.be.a(\"string\");\r",
											"            pm.expect(t.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"        });\r",
											"\r",
											"        pm.test(`üí∞ transfers[${idx}] amount is non-negative`, () => {\r",
											"            const amt = Number(String(t.amount));\r",
											"            pm.expect(amt).to.be.at.least(0);\r",
											"        });\r",
											"    });\r",
											"\r",
											"    // total checks\r",
											"    pm.test(\"üîÅ Transfers total amount >= settlement amount\", () => {\r",
											"        const totalTransfers = body.transfers.reduce((acc, t) => acc + Number(String(t.amount)), 0);\r",
											"        const settlementAmount = Number(String(body.amount));\r",
											"        pm.expect(totalTransfers).to.be.at.least(settlementAmount);\r",
											"    });\r",
											"\r",
											"    pm.test(\"üíµ At least one transfer matches settlement amount\", () => {\r",
											"        const settlementAmount = Number(String(body.amount));\r",
											"        const hasMatch = body.transfers.some(t => Number(String(t.amount)) === settlementAmount);\r",
											"        pm.expect(hasMatch).to.be.true;\r",
											"    });\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 5Ô∏è‚É£ Business logic sanity\r",
											"// -----------------------------\r",
											"pm.test(\"üìù Transfer descriptions are non-empty\", () => {\r",
											"    body.transfers.forEach(t => {\r",
											"        pm.expect(t.description.trim().length).to.be.at.least(3);\r",
											"    });\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 6Ô∏è‚É£ Security checks\r",
											"// -----------------------------\r",
											"pm.test(\"üîê Response body does not contain sensitive tokens/secrets\", () => {\r",
											"    const secretRegex = /(api[_-]?key|access[_-]?token|refresh[_-]?token|password|secret|private[_-]?key)/i;\r",
											"    pm.expect(raw).to.not.match(secretRegex);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 7Ô∏è‚É£ Save values for chaining\r",
											"// -----------------------------\r",
											"if (body) {\r",
											"    pm.environment.set(\"SETTLEMENT_ID\", String(body.id));\r",
											"    pm.environment.set(\"SETTLEMENT_AMOUNT\", String(body.amount));\r",
											"    pm.environment.set(\"SETTLEMENT_IBAN\", body.iban);\r",
											"    pm.environment.set(\"SETTLEMENT_BANK\", body.bankName);\r",
											"    if (body.transfers && body.transfers.length > 0) {\r",
											"        pm.environment.set(\"SETTLEMENT_TRANSFER_ID\", String(body.transfers[0].id));\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/staff/merchant/ledger/settlement/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"merchant",
										"ledger",
										"settlement",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfers üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Raw response and safe parse\r",
											"const raw = pm.response.text();\r",
											"const hasBody = raw && raw.trim().length > 0;\r",
											"let body = null;\r",
											"try {\r",
											"    body = hasBody ? JSON.parse(raw) : null;\r",
											"} catch (err) {\r",
											"    // Let tests fail with parse error if JSON invalid\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 1Ô∏è‚É£ Status & performance\r",
											"// -----------------------------\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"‚è± Response time is reasonable (< 3000ms)\", () => {\r",
											"    pm.expect(pm.response.responseTime, \"response time (ms)\").to.be.below(3000);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 2Ô∏è‚É£ Body & headers\r",
											"// -----------------------------\r",
											"pm.test(\"üì¶ Response body should be present and JSON\", () => {\r",
											"    pm.expect(hasBody, \"response body present\").to.be.true;\r",
											"    pm.expect(body, \"parsed JSON body\").to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"üîí Content-Type header is JSON\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\").toLowerCase()).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 3Ô∏è‚É£ Top-level required fields & types\r",
											"// -----------------------------\r",
											"pm.test(\"üîé Required top-level fields exist\", () => {\r",
											"    const required = [\r",
											"        \"id\", \"debitsPending\", \"debitsPosted\", \"creditsPending\", \"creditsPosted\",\r",
											"        \"userData128\", \"userData64\", \"userData32\", \"ledger\", \"description\", \"flags\", \"createdAt\", \"transfers\"\r",
											"    ];\r",
											"    required.forEach(f => pm.expect(body, `has field ${f}`).to.have.property(f));\r",
											"});\r",
											"\r",
											"pm.test(\"üî¢ Top-level field types & numeric formats\", () => {\r",
											"    // id can be string\r",
											"    pm.expect(typeof body.id === \"string\" || typeof body.id === \"number\").to.be.true;\r",
											"\r",
											"    // numeric string fields should parse to finite numbers\r",
											"    [\"debitsPending\", \"debitsPosted\", \"creditsPending\", \"creditsPosted\", \"userData128\", \"userData64\", \"userData32\"].forEach(f => {\r",
											"        pm.expect(body).to.have.property(f);\r",
											"        const v = String(body[f]);\r",
											"        pm.expect(Number.isFinite(Number(v)), `${f} should be numeric`).to.be.true;\r",
											"    });\r",
											"\r",
											"    // ledger should be numeric (number)\r",
											"    pm.expect(typeof body.ledger === \"number\").to.be.true;\r",
											"\r",
											"    pm.expect(body.description).to.be.a(\"string\");\r",
											"    pm.expect(Number.isInteger(body.flags) || typeof body.flags === \"number\").to.be.true;\r",
											"    pm.expect(body.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"    pm.expect(Array.isArray(body.transfers)).to.be.true;\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 4Ô∏è‚É£ Transfers array structure & content\r",
											"// -----------------------------\r",
											"pm.test(\"üìä Transfers array should not be empty\", () => {\r",
											"    pm.expect(body.transfers.length, \"transfers length\").to.be.at.least(1);\r",
											"});\r",
											"\r",
											"if (Array.isArray(body.transfers)) {\r",
											"    // uniqueness of transfer IDs\r",
											"    pm.test(\"üßæ Transfer IDs are unique\", () => {\r",
											"        const ids = body.transfers.map(t => String(t.id));\r",
											"        pm.expect(new Set(ids).size, \"unique transfer ids\").to.equal(ids.length);\r",
											"    });\r",
											"\r",
											"    // each transfer has required fields and types\r",
											"    body.transfers.forEach((t, idx) => {\r",
											"        pm.test(`üîç transfers[${idx}] required fields`, () => {\r",
											"            [\"id\", \"amount\", \"debitAccountId\", \"creditAccountId\", \"description\", \"createdAt\"].forEach(f => {\r",
											"                pm.expect(t, `transfers[${idx}] has ${f}`).to.have.property(f);\r",
											"            });\r",
											"        });\r",
											"\r",
											"        pm.test(`üî¢ transfers[${idx}] types & formats`, () => {\r",
											"            pm.expect(typeof t.id === \"string\" || typeof t.id === \"number\").to.be.true;\r",
											"            pm.expect(Number.isFinite(Number(String(t.amount))), \"amount numeric\").to.be.true;\r",
											"            pm.expect(String(t.debitAccountId).length).to.be.at.least(1);\r",
											"            pm.expect(String(t.creditAccountId).length).to.be.at.least(1);\r",
											"            pm.expect(t.description).to.be.a(\"string\");\r",
											"            pm.expect(t.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/);\r",
											"        });\r",
											"\r",
											"        pm.test(`üí∞ transfers[${idx}] amount non-negative`, () => {\r",
											"            const amt = Number(String(t.amount));\r",
											"            pm.expect(amt).to.be.at.least(0);\r",
											"        });\r",
											"    });\r",
											"\r",
											"    // aggregated amounts checks\r",
											"    pm.test(\"üßÆ Aggregated credits/debits make sense relative to ledger posted values\", () => {\r",
											"        const totalCreditsToLedger = body.transfers\r",
											"            .filter(t => String(t.creditAccountId) === String(body.id))\r",
											"            .reduce((s, t) => s + Number(String(t.amount)), 0);\r",
											"\r",
											"        const totalDebitsFromLedger = body.transfers\r",
											"            .filter(t => String(t.debitAccountId) === String(body.id))\r",
											"            .reduce((s, t) => s + Number(String(t.amount)), 0);\r",
											"\r",
											"        // posted credits/debits from top-level should match aggregated numbers (if not exact due to pagination/history, assert >= 0)\r",
											"        const postedDebits = Number(String(body.debitsPosted));\r",
											"        const postedCredits = Number(String(body.creditsPosted));\r",
											"\r",
											"        pm.expect(totalCreditsToLedger).to.be.at.least(0);\r",
											"        pm.expect(totalDebitsFromLedger).to.be.at.least(0);\r",
											"\r",
											"        // If the response contains large posted amounts, at least transfers sum should not exceed posted totals by a huge margin\r",
											"        // (soft sanity): total credits to ledger <= postedCredits OR postedCredits === 0 (unknown history)\r",
											"        if (postedCredits > 0) {\r",
											"            pm.expect(totalCreditsToLedger).to.be.at.most(postedCredits + (postedCredits * 0.5)); // allow 50% slack for partial history\r",
											"        }\r",
											"\r",
											"        if (postedDebits > 0) {\r",
											"            pm.expect(totalDebitsFromLedger).to.be.at.most(postedDebits + (postedDebits * 0.5));\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 5Ô∏è‚É£ Chronology & ordering sanity\r",
											"// -----------------------------\r",
											"pm.test(\"üîÑ Transfers ordered by createdAt ascending or grouped pairs\", () => {\r",
											"    const dates = body.transfers.map(t => new Date(t.createdAt).getTime());\r",
											"    // allow equal timestamps too\r",
											"    for (let i = 0; i < dates.length - 1; i++) {\r",
											"        pm.expect(dates[i]).to.be.at.least(0);\r",
											"    }\r",
											"    // check non-decreasing order (some systems append newest last)\r",
											"    const isNonDecreasing = dates.every((d, i) => i === 0 || d >= dates[i - 1]);\r",
											"    const isNonIncreasing = dates.every((d, i) => i === 0 || d <= dates[i - 1]);\r",
											"    pm.expect(isNonDecreasing || isNonIncreasing).to.be.true;\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 6Ô∏è‚É£ Business-descriptive checks\r",
											"// -----------------------------\r",
											"pm.test(\"üìù Transfer descriptions match expected patterns\", () => {\r",
											"    const pattern = /Withdrawal (owed to merchant|paid to merchant)/i;\r",
											"    body.transfers.forEach((t, idx) => {\r",
											"        pm.expect(t.description).to.match(/Withdrawal/i);\r",
											"        pm.expect(t.description.length).to.be.at.least(10);\r",
											"        pm.expect(t.description).to.match(/(owed|paid)/i);\r",
											"    });\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 7Ô∏è‚É£ Security & privacy checks\r",
											"// -----------------------------\r",
											"pm.test(\"üîê Response does not leak secrets or tokens\", () => {\r",
											"    const secretRegex = /(api[_-]?key|access[_-]?token|refresh[_-]?token|password|secret|private[_-]?key|ssn|passport)/i;\r",
											"    pm.expect(raw).to.not.match(secretRegex);\r",
											"});\r",
											"\r",
											"// -----------------------------\r",
											"// 8Ô∏è‚É£ Save values for chaining (environment variables)\r",
											"// -----------------------------\r",
											"if (body) {\r",
											"    pm.environment.set(\"LEDGER_ID\", String(body.id));\r",
											"    pm.environment.set(\"LEDGER_DESCRIPTION\", body.description ? body.description.slice(0, 200) : \"\");\r",
											"    pm.environment.set(\"LEDGER_DEBITS_POSTED\", String(body.debitsPosted));\r",
											"    pm.environment.set(\"LEDGER_CREDITS_POSTED\", String(body.creditsPosted));\r",
											"    if (Array.isArray(body.transfers) && body.transfers.length > 0) {\r",
											"        pm.environment.set(\"LEDGER_FIRST_TRANSFER_ID\", String(body.transfers[0].id));\r",
											"        pm.environment.set(\"LEDGER_FIRST_TRANSFER_AMOUNT\", String(body.transfers[0].amount));\r",
											"    }\r",
											"}\r",
											"\r",
											"// -----------------------------\r",
											"// 9Ô∏è‚É£ Helpful warnings (do not fail tests) for possible variations\r",
											"// -----------------------------\r",
											"if (!Array.isArray(body.transfers)) {\r",
											"    console.warn(\"‚ö†Ô∏è transfers is not an array ‚Äî downstream checks skipped.\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/staff/merchant/ledger/transfer/:ledgerId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"merchant",
										"ledger",
										"transfer",
										":ledgerId"
									],
									"variable": [
										{
											"key": "ledgerId",
											"value": "715596380754407051269684164797110"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Merchantüíö",
			"item": [
				{
					"name": "Productü§é",
					"item": [
						{
							"name": "Createüíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Check for correct status code",
											"pm.test(\"üü¢ Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// üì¶ Parse response",
											"const jsonData = pm.response.json();",
											"",
											"// üßæ Validate core fields",
											"pm.test(\"üìã Response contains expected fields\", function () {",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\", \"Pizza\");",
											"    pm.expect(jsonData).to.have.property(\"description\", \"Pizza Margaritaac\");",
											"    pm.expect(jsonData).to.have.property(\"amount\", \"250\");",
											"    pm.expect(jsonData).to.have.property(\"imagePath\");",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
											"    pm.expect(jsonData).to.have.property(\"archivedAt\");",
											"});",
											"",
											"// üñºÔ∏è Validate image URL format",
											"pm.test(\"üåê Image path is a valid URL\", function () {",
											"    pm.expect(jsonData.imagePath).to.match(/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif)$/);",
											"});",
											"",
											"// üìÖ Validate timestamp format",
											"pm.test(\"‚è±Ô∏è createdAt and updatedAt are ISO timestamps\", function () {",
											"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"    pm.expect(jsonData.createdAt).to.match(isoRegex);",
											"    pm.expect(jsonData.updatedAt).to.match(isoRegex);",
											"});",
											"",
											"// üóëÔ∏è Check archivedAt is null",
											"pm.test(\"üóÉÔ∏è archivedAt is null\", function () {",
											"    pm.expect(jsonData.archivedAt).to.be.null;",
											"});",
											"",
											"// üíæ Save product ID for future use",
											"pm.environment.set(\"product_id\", jsonData.id);",
											"",
											"// üåê Validate image URL format",
											"pm.test(\"üñºÔ∏è Image path is a valid URL\", function () {",
											"    pm.expect(jsonData.imagePath).to.match(/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif)$/);",
											"});",
											"",
											"// ‚è±Ô∏è Validate timestamp format",
											"pm.test(\"üìÖ createdAt and updatedAt are ISO timestamps\", function () {",
											"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"    pm.expect(jsonData.createdAt).to.match(isoRegex);",
											"    pm.expect(jsonData.updatedAt).to.match(isoRegex);",
											"});",
											"",
											"// üóÉÔ∏è Check archivedAt is null",
											"pm.test(\"üóëÔ∏è archivedAt is null\", function () {",
											"    pm.expect(jsonData.archivedAt).to.be.null;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Pizza",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "351420",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Pizza Margaritaac",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1f087db4-0bbe-4a50-adeb-36bd165e39c2"
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/product/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"product",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Paginate All",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const jsonData = pm.response.json();",
											"",
											"// üìä Validate pagination metadata",
											"pm.test(\"üìä Pagination metadata is valid\", function () {",
											"    pm.expect(jsonData).to.have.property(\"totalItems\").that.is.a(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"totalPages\").that.is.a(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"page\").that.is.a(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"hasNext\").that.is.a(\"boolean\");",
											"    pm.expect(jsonData).to.have.property(\"hasPrev\").that.is.a(\"boolean\");",
											"});",
											"",
											"// üìÅ Validate product items",
											"pm.test(\"üì¶ Product items are valid\", function () {",
											"    pm.expect(jsonData.items).to.be.an(\"array\").with.length.greaterThan(0);",
											"",
											"    jsonData.items.forEach((product) => {",
											"        pm.expect(product).to.have.property(\"id\");",
											"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"amount\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"createdAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T/);",
											"        pm.expect(product).to.have.property(\"updatedAt\").that.matches(/^\\d{4}-\\d{2}-\\d{2}T/);",
											"        pm.expect(product).to.have.property(\"archivedAt\");",
											"",
											"        // Optional imagePath check",
											"        if (product.imagePath !== null) {",
											"            pm.expect(product.imagePath).to.match(/^https?:\\/\\/.+/);",
											"        }",
											"    });",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"const items = res.items;",
											"",
											"// üé≤ Random selection",
											"pm.test(\"üé≤ Randomly select product ID from items\", () => {",
											"    pm.expect(items).to.be.an(\"array\").that.is.not.empty;",
											"",
											"    const randomIndex = Math.floor(Math.random() * items.length);",
											"    const selectedId = items[randomIndex].id;",
											"",
											"    pm.environment.set(\"random_product_id\", selectedId);",
											"    console.log(\"üìå Random product ID saved:\", selectedId);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/product?limit=25&order=ASC&page=1&isArchived=false",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"product"
									],
									"query": [
										{
											"key": "limit",
											"value": "25"
										},
										{
											"key": "order",
											"value": "ASC"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "isArchived",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"pm.test(\"üìÅ Product fields are valid\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.name).to.be.a(\"string\");",
											"    pm.expect(res.description).to.be.a(\"string\");",
											"    pm.expect(res.amount).to.be.a(\"string\");",
											"",
											"    // ‚úÖ Allow imagePath to be null or string",
											"    pm.expect(res.imagePath).to.satisfy(val => val === null || typeof val === \"string\");",
											"",
											"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    pm.expect(res.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    pm.expect(res.archivedAt).to.satisfy(val => val === null || typeof val === \"string\");",
											"});",
											"",
											"",
											"pm.test(\"üì¶ Versions array is valid\", () => {",
											"    pm.expect(res.versions).to.be.an(\"array\").that.is.not.empty;",
											"",
											"    res.versions.forEach(v => {",
											"        pm.expect(v.id).to.be.a(\"string\");",
											"        pm.expect(v.name).to.be.a(\"string\");",
											"        pm.expect(v.description).to.be.a(\"string\");",
											"        pm.expect(v.amount).to.be.a(\"string\");",
											"",
											"        // ‚úÖ Allow imagePath to be null or string",
											"        pm.expect(v.imagePath).to.satisfy(val => val === null || typeof val === \"string\");",
											"",
											"        pm.expect(v.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"        pm.expect(v.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/product/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"product",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_product_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unarchiveü§é",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 201 or 204\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 204]);",
											"});",
											"",
											"// üìå Log the update intent",
											"const reqBody = pm.request.body?.raw;",
											"if (reqBody) {",
											"    try {",
											"        const parsed = JSON.parse(reqBody);",
											"        console.log(\"üîß Product update submitted for:\", pm.request.url.toString());",
											"        console.log(\"üìù Name:\", parsed.name);",
											"        console.log(\"üí∞ Amount:\", parsed.amount);",
											"        console.log(\"üñºÔ∏è ImagePath:\", parsed.imagePath);",
											"        console.log(\"üì¶ Description:\", parsed.description);",
											"    } catch (err) {",
											"        console.warn(\"‚ö†Ô∏è Failed to parse request body:\", err);",
											"    }",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/product/unarchive/:productId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"product",
										"unarchive",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{random_product_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200 or 204\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"",
											"// üìå Log the update intent",
											"const reqBody = pm.request.body?.raw;",
											"if (reqBody) {",
											"    try {",
											"        const parsed = JSON.parse(reqBody);",
											"        console.log(\"üîß Product update submitted for:\", pm.request.url.toString());",
											"        console.log(\"üìù Name:\", parsed.name);",
											"        console.log(\"üí∞ Amount:\", parsed.amount);",
											"        console.log(\"üñºÔ∏è ImagePath:\", parsed.imagePath);",
											"        console.log(\"üì¶ Description:\", parsed.description);",
											"    } catch (err) {",
											"        console.warn(\"‚ö†Ô∏è Failed to parse request body:\", err);",
											"    }",
											"}",
											"",
											"// üíæ Optional: mark update success for chaining",
											"pm.environment.set(\"product_update_success\", true);",
											"pm.environment.set(\"last_updated_product_id\", pm.request.url.variables.get(\"id\"));",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Pizza Family",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "250",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1f087db4-0bbe-4a50-adeb-36bd165e39c2"
										},
										{
											"key": "description",
											"value": "Pizza Margarita Family",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/product/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"product",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_product_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Archiveü§é",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 201 or 204\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 204]);",
											"});",
											"",
											"// üìå Log the update intent",
											"const reqBody = pm.request.body?.raw;",
											"if (reqBody) {",
											"    try {",
											"        const parsed = JSON.parse(reqBody);",
											"        console.log(\"üîß Product update submitted for:\", pm.request.url.toString());",
											"        console.log(\"üìù Name:\", parsed.name);",
											"        console.log(\"üí∞ Amount:\", parsed.amount);",
											"        console.log(\"üñºÔ∏è ImagePath:\", parsed.imagePath);",
											"        console.log(\"üì¶ Description:\", parsed.description);",
											"    } catch (err) {",
											"        console.warn(\"‚ö†Ô∏è Failed to parse request body:\", err);",
											"    }",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/product/archive/:productId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"product",
										"archive",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{random_product_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Contractüíö",
							"item": [
								{
									"name": "List All Invoicesüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/contract/invoice/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"contract",
												"invoice",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Overdue Invoicesüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/contract/invoice/overdue",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"contract",
												"invoice",
												"overdue"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get one for billingüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/contract/invoice/billing/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"contract",
												"invoice",
												"billing",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "My Effective Contractüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/contract/effective/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"contract",
												"effective",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "My Contract Historyüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/contract/history/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"contract",
												"history",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Customerüíö",
					"item": [
						{
							"name": "Paginateüíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"const customers = res.items;",
											"",
											"// üîç Validate customer structure",
											"pm.test(\"üìÅ Customer items are valid\", () => {",
											"    pm.expect(customers).to.be.an(\"array\").that.is.not.empty;",
											"",
											"    customers.forEach(c => {",
											"        pm.expect(c.id).to.be.a(\"string\");",
											"        pm.expect(c.email).to.be.a(\"string\");",
											"        pm.expect(c.phonenumber).to.be.a(\"string\");",
											"        pm.expect(c.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    });",
											"});",
											"",
											"// üé≤ Randomly select a customer ID",
											"pm.test(\"üé≤ Randomly select customer ID\", () => {",
											"    const randomIndex = Math.floor(Math.random() * customers.length);",
											"    const selectedId = customers[randomIndex].id;",
											"",
											"    pm.environment.set(\"random_customer_id\", selectedId);",
											"    console.log(\"üìå Random customer ID saved:\", selectedId);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/customer",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"customer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "External Payment üíö",
					"item": [
						{
							"name": "Paginate üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"// ‚úÖ Status code",
											"pm.test(\"‚úÖ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üìÑ Content-Type header",
											"pm.test(\"üìÑ Content-Type is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// üì¶ Response structure check",
											"pm.test(\"üì¶ Response has items array and pagination info\", () => {",
											"    pm.expect(jsonData).to.have.property(\"items\").that.is.an(\"array\");",
											"    pm.expect(jsonData).to.have.property(\"totalItems\").that.is.a(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"totalPages\").that.is.a(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"page\").that.is.a(\"number\");",
											"    pm.expect(jsonData).to.have.property(\"hasNext\").that.is.a(\"boolean\");",
											"    pm.expect(jsonData).to.have.property(\"hasPrev\").that.is.a(\"boolean\");",
											"});",
											"",
											"// üîé Check first item keys and types if items not empty",
											"if (jsonData.items.length > 0) {",
											"    const item = jsonData.items[0];",
											"    pm.test(\"üîé First item has required properties with correct types\", () => {",
											"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"        pm.expect(new Date(item.createdAt).toString()).to.not.equal(\"Invalid Date\");",
											"        ",
											"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");",
											"        pm.expect(new Date(item.updatedAt).toString()).to.not.equal(\"Invalid Date\");",
											"        ",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"gateway\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"srfc\").that.is.a(\"string\");",
											"        ",
											"        // paidAt can be null or valid date string",
											"        pm.expect(item).to.have.property(\"paidAt\");",
											"        if (item.paidAt !== null) {",
											"            pm.expect(new Date(item.paidAt).toString()).to.not.equal(\"Invalid Date\");",
											"        }",
											"    });",
											"}",
											"",
											"// üé≤ Choose a random item and extract its id",
											"const items = jsonData.items;",
											"const randomIndex = Math.floor(Math.random() * items.length);",
											"const randomItem = items[randomIndex];",
											"const randomId = randomItem.id;",
											"",
											"// üìù Log the random ID",
											"console.log(\"üé≤ Randomly selected ID:\", randomId);",
											"",
											"// üíæ Save the random ID to a variable for use in other requests",
											"pm.environment.set(\"random_payment_id\", randomId);",
											"",
											"// ‚úÖ Validate the ID type",
											"pm.test(\"‚úÖ Random ID is a string\", () => {",
											"    pm.expect(randomId).to.be.a(\"string\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/external?page=1&limit=25&order=DESC",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"external"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "25"
										},
										{
											"key": "order",
											"value": "DESC"
										},
										{
											"key": "status",
											"value": "PENDING",
											"disabled": true
										},
										{
											"key": "isSettled",
											"value": "true",
											"disabled": true
										},
										{
											"key": "dateFrom",
											"value": "2024",
											"disabled": true
										},
										{
											"key": "dateTo",
											"value": "2024",
											"disabled": true
										},
										{
											"key": "amountFrom",
											"value": "90000",
											"disabled": true
										},
										{
											"key": "amountTo",
											"value": "90000",
											"disabled": true
										},
										{
											"key": "isEligible",
											"value": "true",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "FIB",
											"disabled": true
										},
										{
											"key": "srfc",
											"value": "12847123",
											"disabled": true
										},
										{
											"key": "settlementId",
											"value": "20",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"// ‚úÖ Status code\r",
											"pm.test(\"‚úÖ Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// üìÑ Content-Type header\r",
											"pm.test(\"üìÑ Content-Type is application/json\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// üì¶ Top-level properties check\r",
											"pm.test(\"üì¶ Response has all required top-level properties\", () => {\r",
											"    const props = [\r",
											"        \"createdAt\", \"updatedAt\", \"id\", \"gateway\", \"amount\", \"payoutAmount\",\r",
											"        \"payableAmount\", \"ourFeeAmount\", \"ourFeePercent\", \"ourFeeConstant\",\r",
											"        \"feeAmount\", \"feePercent\", \"feeConstant\", \"status\", \"expirationDateTime\",\r",
											"        \"srfc\", \"customerPhoneNumber\", \"customerEmail\", \"isEligible\", \"isSettled\", \"internal\"\r",
											"    ];\r",
											"    props.forEach(prop => {\r",
											"        pm.expect(jsonData).to.have.property(prop);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üìÖ Date validity checks\r",
											"pm.test(\"üìÖ Valid ISO date strings\", () => {\r",
											"    [\"createdAt\", \"updatedAt\", \"expirationDateTime\"].forEach(key => {\r",
											"        pm.expect(new Date(jsonData[key]).toString()).to.not.equal(\"Invalid Date\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// üî¢ Data types and value checks\r",
											"pm.test(\"üî¢ Check data types and values\", () => {\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.gateway).to.be.a(\"string\");\r",
											"\r",
											"    [\"amount\", \"payoutAmount\", \"payableAmount\", \"ourFeeAmount\", \"ourFeeConstant\", \"feeAmount\", \"feeConstant\"].forEach(key => {\r",
											"        pm.expect(jsonData[key]).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    [\"ourFeePercent\", \"feePercent\"].forEach(key => {\r",
											"        pm.expect(jsonData[key]).to.be.a(\"number\");\r",
											"    });\r",
											"\r",
											"    pm.expect(jsonData.status).to.be.oneOf([\"PENDING\", \"TIMED_OUT\", \"FAILED\", \"PAID\", \"CANCELLED\"]);\r",
											"    pm.expect(jsonData.customerPhoneNumber).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.customerEmail).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.isEligible).to.be.a(\"boolean\");\r",
											"    pm.expect(jsonData.isSettled).to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"// üîç Internal object checks\r",
											"pm.test(\"üîç Internal object properties\", () => {\r",
											"    const internal = jsonData.internal;\r",
											"    pm.expect(internal).to.be.an(\"object\");\r",
											"\r",
											"    const internalProps = [\r",
											"        \"createdAt\", \"updatedAt\", \"id\", \"referenceCode\", \"paymentLink\",\r",
											"        \"collectFeeFromCustomer\", \"collectCustomerEmail\", \"collectCustomerPhoneNumber\"\r",
											"    ];\r",
											"    internalProps.forEach(prop => {\r",
											"        pm.expect(internal).to.have.property(prop);\r",
											"    });\r",
											"\r",
											"    [\"createdAt\", \"updatedAt\"].forEach(key => {\r",
											"        pm.expect(new Date(internal[key]).toString()).to.not.equal(\"Invalid Date\");\r",
											"    });\r",
											"\r",
											"    pm.expect(internal.id).to.be.a(\"string\");\r",
											"    pm.expect(internal.referenceCode).to.be.a(\"string\");\r",
											"    pm.expect(internal.paymentLink).to.be.a(\"string\");\r",
											"    pm.expect(internal.collectFeeFromCustomer).to.be.a(\"boolean\");\r",
											"    pm.expect(internal.collectCustomerEmail).to.be.a(\"boolean\");\r",
											"    pm.expect(internal.collectCustomerPhoneNumber).to.be.a(\"boolean\");\r",
											"});\r",
											"\r",
											"// üß© Traces array validation\r",
											"pm.test(\"üß© Traces array structure\", () => {\r",
											"    pm.expect(jsonData.traces).to.be.an(\"array\");\r",
											"    jsonData.traces.forEach(trace => {\r",
											"        pm.expect(trace).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(trace).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"        pm.expect(new Date(trace.createdAt).toString()).to.not.equal(\"Invalid Date\");\r",
											"        pm.expect(trace).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(trace).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(trace).to.have.property(\"merchantMetaData\").that.is.an(\"object\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// üçï Products array validation\r",
											"pm.test(\"üçï Products array structure\", () => {\r",
											"    pm.expect(jsonData.products).to.be.an(\"array\");\r",
											"    jsonData.products.forEach(product => {\r",
											"        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(product).to.have.property(\"imagePath\").that.is.a(\"string\");\r",
											"        pm.expect(product).to.have.property(\"amount\").that.is.a(\"string\");\r",
											"        pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
											"        pm.expect(product).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"        pm.expect(product).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"        pm.expect(new Date(product.createdAt).toString()).to.not.equal(\"Invalid Date\");\r",
											"        pm.expect(new Date(product.updatedAt).toString()).to.not.equal(\"Invalid Date\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/external/details/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"external",
										"details",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_payment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Statistics üíö",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/external/statistics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"external",
										"statistics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Balance üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"// ‚úÖ Status code check\r",
											"pm.test(\"‚úÖ Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// üìÑ Content-Type header check\r",
											"pm.test(\"üìÑ Content-Type is application/json\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// üì¶ Response structure check\r",
											"pm.test(\"üì¶ Response has required properties\", () => {\r",
											"    pm.expect(jsonData).to.have.property(\"balance\");\r",
											"    pm.expect(jsonData).to.have.property(\"eligibleBalance\");\r",
											"});\r",
											"\r",
											"// üî¢ Data type checks\r",
											"pm.test(\"üî¢ Balance and eligibleBalance are strings\", () => {\r",
											"    pm.expect(jsonData.balance).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.eligibleBalance).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// üí∞ Value checks (optional)\r",
											"pm.test(\"üí∞ Balance values are non-negative numbers in string format\", () => {\r",
											"    pm.expect(Number(jsonData.balance)).to.be.at.least(0);\r",
											"    pm.expect(Number(jsonData.eligibleBalance)).to.be.at.least(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/external/balance",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"external",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Status (DEPRECATED)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{STAFF_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/staff/merchant/external-payment/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"staff",
										"merchant",
										"external-payment",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "19"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Internal Payment üíö",
					"item": [
						{
							"name": "Create üíö",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('afterResponse', function () {",
											"    pm.environment.set('MERCHANT_INTERNAL_REFRENCE_CODE', pm.response.json().referenceCode);",
											"});",
											"// === [1] Status code check ===",
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// === [2] Content-Type check ===",
											"pm.test(\"Content-Type includes application/json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// === [3] Response body has required fields ===",
											"const res = pm.response.json();",
											"",
											"pm.test(\"Response has all required fields\", () => {",
											"    const keys = [",
											"        \"createdAt\", \"updatedAt\", \"id\", \"paymentLink\", \"referenceCode\",",
											"        \"title\", \"description\", \"isActive\", \"amount\", \"gateways\",",
											"        \"creationSource\", \"collectFeeFromCustomer\", \"collectCustomerEmail\",",
											"        \"collectCustomerPhoneNumber\", \"ourFeeAmount\", \"externalPayments\"",
											"    ];",
											"    keys.forEach(key => pm.expect(res).to.have.property(key));",
											"});",
											"",
											"// === [4] Check data types ===",
											"pm.test(\"Check field data types\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.paymentLink).to.be.a(\"string\");",
											"    pm.expect(res.referenceCode).to.be.a(\"string\");",
											"    pm.expect(res.title).to.be.a(\"string\");",
											"    pm.expect(res.description).to.be.a(\"string\");",
											"    pm.expect(res.isActive).to.be.a(\"boolean\");",
											"    pm.expect(res.amount).to.be.a(\"string\");",
											"    pm.expect(res.creationSource).to.be.a(\"string\");",
											"    pm.expect(res.collectFeeFromCustomer).to.be.a(\"boolean\");",
											"    pm.expect(res.collectCustomerEmail).to.be.a(\"boolean\");",
											"    pm.expect(res.collectCustomerPhoneNumber).to.be.a(\"boolean\");",
											"    pm.expect(res.ourFeeAmount).to.be.a(\"string\");",
											"    pm.expect(res.externalPayments).to.be.an(\"array\");",
											"});",
											"",
											"// === [5] Check gateways array ===",
											"pm.test(\"Gateways is a non-empty array with correct structure\", () => {",
											"    pm.expect(res.gateways).to.be.an(\"array\").that.is.not.empty;",
											"    res.gateways.forEach(g => {",
											"        pm.expect(g).to.include.all.keys(\"name\", \"code\", \"feeConstant\", \"feePercent\", \"payableAmount\");",
											"        pm.expect(g.name).to.be.a(\"string\");",
											"        pm.expect(g.code).to.be.a(\"string\");",
											"        pm.expect(g.feeConstant).to.be.a(\"number\");",
											"        pm.expect(g.feePercent).to.be.a(\"number\");",
											"        pm.expect(g.payableAmount).to.be.a(\"string\");",
											"    });",
											"});",
											"",
											"// === [6] Validate createdAt and updatedAt format (ISO 8601) ===",
											"pm.test(\"createdAt and updatedAt are ISO 8601 timestamps\", () => {",
											"    const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"    pm.expect(res.createdAt).to.match(iso8601);",
											"    pm.expect(res.updatedAt).to.match(iso8601);",
											"});",
											"",
											"",
											"// === [7] Authorization header presence check ===",
											"pm.test(\"Authorization header is present\", () => {",
											"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"üíæ Store data\", () => {",
											"    const res = pm.response.json();",
											"    pm.environment.set('NEW_REFERENCE_CODE', res.referenceCode);",
											"    pm.environment.set('NEW_PAYMENT_LINK_CODE', res.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.166 Safari/537.36"
									},
									{
										"key": "lang",
										"value": "du",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"gateways\":[\"ZAIN\",\"FAST_PAY\"],\"title\":\"zds\",\"description\":\"\",\"collectFeeFromCustomer\":true,\"collectCustomerEmail\":true,\"collectCustomerPhoneNumber\":true,\"buttonLabel\":\"PAY\",\"products\":[{\"id\":\"1998\",\"suggestedQuantity\":1,\"minQuantity\":1,\"maxQuantity\":99}],\"type\":\"LIMITED\",\"remainingPayments\":10}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create üíö Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('afterResponse', function () {",
											"    pm.environment.set('MERCHANT_INTERNAL_REFRENCE_CODE', pm.response.json().referenceCode);",
											"});",
											"// === [1] Status code check ===",
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// === [2] Content-Type check ===",
											"pm.test(\"Content-Type includes application/json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// === [3] Response body has required fields ===",
											"const res = pm.response.json();",
											"",
											"pm.test(\"Response has all required fields\", () => {",
											"    const keys = [",
											"        \"createdAt\", \"updatedAt\", \"id\", \"paymentLink\", \"referenceCode\",",
											"        \"title\", \"description\", \"isActive\", \"amount\", \"gateways\",",
											"        \"creationSource\", \"collectFeeFromCustomer\", \"collectCustomerEmail\",",
											"        \"collectCustomerPhoneNumber\", \"ourFeeAmount\", \"externalPayments\"",
											"    ];",
											"    keys.forEach(key => pm.expect(res).to.have.property(key));",
											"});",
											"",
											"// === [4] Check data types ===",
											"pm.test(\"Check field data types\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.paymentLink).to.be.a(\"string\");",
											"    pm.expect(res.referenceCode).to.be.a(\"string\");",
											"    pm.expect(res.title).to.be.a(\"string\");",
											"    pm.expect(res.description).to.be.a(\"string\");",
											"    pm.expect(res.isActive).to.be.a(\"boolean\");",
											"    pm.expect(res.amount).to.be.a(\"string\");",
											"    pm.expect(res.creationSource).to.be.a(\"string\");",
											"    pm.expect(res.collectFeeFromCustomer).to.be.a(\"boolean\");",
											"    pm.expect(res.collectCustomerEmail).to.be.a(\"boolean\");",
											"    pm.expect(res.collectCustomerPhoneNumber).to.be.a(\"boolean\");",
											"    pm.expect(res.ourFeeAmount).to.be.a(\"string\");",
											"    pm.expect(res.externalPayments).to.be.an(\"array\");",
											"});",
											"",
											"// === [5] Check gateways array ===",
											"pm.test(\"Gateways is a non-empty array with correct structure\", () => {",
											"    pm.expect(res.gateways).to.be.an(\"array\").that.is.not.empty;",
											"    res.gateways.forEach(g => {",
											"        pm.expect(g).to.include.all.keys(\"name\", \"code\", \"feeConstant\", \"feePercent\", \"payableAmount\");",
											"        pm.expect(g.name).to.be.a(\"string\");",
											"        pm.expect(g.code).to.be.a(\"string\");",
											"        pm.expect(g.feeConstant).to.be.a(\"number\");",
											"        pm.expect(g.feePercent).to.be.a(\"number\");",
											"        pm.expect(g.payableAmount).to.be.a(\"string\");",
											"    });",
											"});",
											"",
											"// === [6] Validate createdAt and updatedAt format (ISO 8601) ===",
											"pm.test(\"createdAt and updatedAt are ISO 8601 timestamps\", () => {",
											"    const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"    pm.expect(res.createdAt).to.match(iso8601);",
											"    pm.expect(res.updatedAt).to.match(iso8601);",
											"});",
											"",
											"",
											"// === [7] Authorization header presence check ===",
											"pm.test(\"Authorization header is present\", () => {",
											"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"üíæ Store data\", () => {",
											"    const res = pm.response.json();",
											"    pm.environment.set('NEW_REFERENCE_CODE', res.referenceCode);",
											"    pm.environment.set('NEW_PAYMENT_LINK_CODE', res.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.166 Safari/537.36"
									},
									{
										"key": "lang",
										"value": "du",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"suggestedAmount\":\"1200\",\n    \"minAmount\":\"900\",\n    \"maxAmount\":\"3000\",\n    \"gateways\":[\"ZAIN\",\"FAST_PAY\"],\n    \"title\":\"mee\",\n    \"description\":\"mede\",\n    \"collectFeeFromCustomer\":true,\n    \"collectCustomerEmail\":true,\n    \"collectCustomerPhoneNumber\":true,\n    \"buttonLabel\":\"PAY\",\n    \"type\":\"LIMITED\",\n    \"remainingPayments\":100\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create üíö fix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('afterResponse', function () {",
											"    pm.environment.set('MERCHANT_INTERNAL_REFRENCE_CODE', pm.response.json().referenceCode);",
											"});",
											"// === [1] Status code check ===",
											"pm.test(\"Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// === [2] Content-Type check ===",
											"pm.test(\"Content-Type includes application/json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// === [3] Response body has required fields ===",
											"const res = pm.response.json();",
											"",
											"pm.test(\"Response has all required fields\", () => {",
											"    const keys = [",
											"        \"createdAt\", \"updatedAt\", \"id\", \"paymentLink\", \"referenceCode\",",
											"        \"title\", \"description\", \"isActive\", \"amount\", \"gateways\",",
											"        \"creationSource\", \"collectFeeFromCustomer\", \"collectCustomerEmail\",",
											"        \"collectCustomerPhoneNumber\", \"ourFeeAmount\", \"externalPayments\"",
											"    ];",
											"    keys.forEach(key => pm.expect(res).to.have.property(key));",
											"});",
											"",
											"// === [4] Check data types ===",
											"pm.test(\"Check field data types\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.paymentLink).to.be.a(\"string\");",
											"    pm.expect(res.referenceCode).to.be.a(\"string\");",
											"    pm.expect(res.title).to.be.a(\"string\");",
											"    pm.expect(res.description).to.be.a(\"string\");",
											"    pm.expect(res.isActive).to.be.a(\"boolean\");",
											"    pm.expect(res.amount).to.be.a(\"string\");",
											"    pm.expect(res.creationSource).to.be.a(\"string\");",
											"    pm.expect(res.collectFeeFromCustomer).to.be.a(\"boolean\");",
											"    pm.expect(res.collectCustomerEmail).to.be.a(\"boolean\");",
											"    pm.expect(res.collectCustomerPhoneNumber).to.be.a(\"boolean\");",
											"    pm.expect(res.ourFeeAmount).to.be.a(\"string\");",
											"    pm.expect(res.externalPayments).to.be.an(\"array\");",
											"});",
											"",
											"// === [5] Check gateways array ===",
											"pm.test(\"Gateways is a non-empty array with correct structure\", () => {",
											"    pm.expect(res.gateways).to.be.an(\"array\").that.is.not.empty;",
											"    res.gateways.forEach(g => {",
											"        pm.expect(g).to.include.all.keys(\"name\", \"code\", \"feeConstant\", \"feePercent\", \"payableAmount\");",
											"        pm.expect(g.name).to.be.a(\"string\");",
											"        pm.expect(g.code).to.be.a(\"string\");",
											"        pm.expect(g.feeConstant).to.be.a(\"number\");",
											"        pm.expect(g.feePercent).to.be.a(\"number\");",
											"        pm.expect(g.payableAmount).to.be.a(\"string\");",
											"    });",
											"});",
											"",
											"// === [6] Validate createdAt and updatedAt format (ISO 8601) ===",
											"pm.test(\"createdAt and updatedAt are ISO 8601 timestamps\", () => {",
											"    const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
											"    pm.expect(res.createdAt).to.match(iso8601);",
											"    pm.expect(res.updatedAt).to.match(iso8601);",
											"});",
											"",
											"",
											"// === [7] Authorization header presence check ===",
											"pm.test(\"Authorization header is present\", () => {",
											"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"üíæ Store data\", () => {",
											"    const res = pm.response.json();",
											"    pm.environment.set('NEW_REFERENCE_CODE', res.referenceCode);",
											"    pm.environment.set('NEW_PAYMENT_LINK_CODE', res.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.166 Safari/537.36"
									},
									{
										"key": "lang",
										"value": "du",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\":\"3000\",\"gateways\":\n    [\"ASIA_PAY\",\"ZAIN\",\"FAST_PAY\",\"YANA\",\"NASS_WALLET\",\"FIB\"],\n    \"title\":\"mee\",\n    \"description\":\"mede\",\n    \"collectFeeFromCustomer\":true,\n    \"collectCustomerEmail\":true,\n    \"collectCustomerPhoneNumber\":true,\n    \"buttonLabel\":\"PAY\",\n    \"type\":\"LIMITED\",\n    \"remainingPayments\":100\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Paginate üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"‚úÖ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ Response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ items array exists and is not empty\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.items).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.items.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ Each item contains required fields\", function () {\r",
											"    const items = pm.response.json().items;\r",
											"    items.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"title\");\r",
											"        pm.expect(item).to.have.property(\"amount\");\r",
											"        pm.expect(item).to.have.property(\"isActive\");\r",
											"        pm.expect(item).to.have.property(\"paymentLink\");\r",
											"        pm.expect(item).to.have.property(\"referenceCode\");\r",
											"        pm.expect(item).to.have.property(\"collectCustomerEmail\");\r",
											"        pm.expect(item).to.have.property(\"collectCustomerPhoneNumber\");\r",
											"        pm.expect(item).to.have.property(\"gateways\");\r",
											"        pm.expect(item.gateways).to.be.an(\"array\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ Pagination metadata exists\", function () {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"totalItems\");\r",
											"    pm.expect(res).to.have.property(\"totalPages\");\r",
											"    pm.expect(res).to.have.property(\"page\");\r",
											"    pm.expect(res).to.have.property(\"hasNext\");\r",
											"    pm.expect(res).to.have.property(\"hasPrev\");\r",
											"});\r",
											"// üì¶ Parse response\r",
											"const res = pm.response.json();\r",
											"const activeItems = res.items.filter(item => item.isActive);\r",
											"\r",
											"// üé≤ Random selection\r",
											"pm.test(\"üé≤ Randomly select active payment ID\", () => {\r",
											"    pm.expect(activeItems).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * activeItems.length);\r",
											"    const selectedId = activeItems[randomIndex].id;\r",
											"\r",
											"    pm.environment.set(\"random_active_payment_id\", selectedId);\r",
											"    console.log(\"üìå Random active payment ID saved:\", selectedId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal?limit=10&page=1&order=DESC",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "order",
											"value": "DESC"
										},
										{
											"key": "dateFrom",
											"value": "2025-07-18T00:00:00.000Z",
											"disabled": true
										},
										{
											"key": "dateTo",
											"value": "",
											"disabled": true
										},
										{
											"key": "amountFrom",
											"value": "2001",
											"disabled": true
										},
										{
											"key": "amountTo",
											"value": "10000",
											"disabled": true
										},
										{
											"key": "referenceCode",
											"value": "fa1d4069-ffa5-4d78-bcee-580d1c9e4543",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"‚úÖ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ Response is JSON (with charset allowed)\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"‚úÖ Response has required fields\", function () {\r",
											"    const json = pm.response.json();\r",
											"    const requiredFields = [\r",
											"        \"createdAt\", \"updatedAt\", \"id\", \"paymentLink\", \"referenceCode\", \"title\",\r",
											"        \"description\", \"isActive\", \"amount\", \"gateways\", \"creationSource\",\r",
											"        \"collectFeeFromCustomer\", \"collectCustomerEmail\", \"collectCustomerPhoneNumber\",\r",
											"        \"ourFeeAmount\", \"externalPayments\"\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(json).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ `gateways` is array with expected structure\", function () {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    pm.expect(gateways).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    gateways.forEach(gw => {\r",
											"        pm.expect(gw).to.include.all.keys(\"name\", \"code\", \"feeConstant\", \"feePercent\", \"payableAmount\");\r",
											"        pm.expect(gw.name).to.be.a(\"string\");\r",
											"        pm.expect(gw.code).to.be.a(\"string\");\r",
											"        pm.expect(gw.feeConstant).to.be.a(\"number\");\r",
											"        pm.expect(gw.feePercent).to.be.a(\"number\");\r",
											"        pm.expect(gw.payableAmount).to.be.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"‚úÖ Payment link format is valid\", function () {\r",
											"    const link = pm.response.json().paymentLink;\r",
											"    pm.expect(link).to.match(/^https:\\/\\/.+\\/pay\\/live\\/[a-f0-9-]{36}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"‚úÖ Amount is a valid number string\", function () {\r",
											"    const amount = pm.response.json().amount;\r",
											"    pm.expect(amount).to.match(/^\\d+$/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal/details/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal",
										"details",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{NEW_PAYMENT_LINK_CODE}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Statistics üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Validate payment statistics structure",
											"pm.test(\"üìä Response contains all expected payment stats\", () => {",
											"    pm.expect(res).to.have.property(\"allPayments\").that.is.a(\"number\");",
											"    pm.expect(res).to.have.property(\"activePayments\").that.is.a(\"number\");",
											"    pm.expect(res).to.have.property(\"deActivePayments\").that.is.a(\"number\");",
											"});",
											"",
											"// üîç Logical consistency check",
											"pm.test(\"üîç active + deActive equals allPayments\", () => {",
											"    const total = res.activePayments + res.deActivePayments;",
											"    pm.expect(total).to.eql(res.allPayments);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal/statistics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal",
										"statistics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200 or 204\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"",
											"// üìå Log the update intent",
											"const req = pm.request.body ? pm.request.body.raw || pm.request.body : {};",
											"const parsed = typeof req === \"string\" ? JSON.parse(req) : req;",
											"",
											"console.log(\"üîß Payment update submitted for:\", pm.request.url.toString());",
											"console.log(\"üìù Title:\", parsed.title);",
											"console.log(\"üí∞ Amount:\", parsed.amount);",
											"console.log(\"üì¶ Gateways:\", parsed.gateways);",
											"console.log(\"üîÅ Redirect URL:\", parsed.afterPaymentActions?.customerRedirectUrl);",
											"console.log(\"üì® Custom Message:\", parsed.afterPaymentActions?.customMessage);",
											"",
											"// üíæ Optional: mark update success for chaining",
											"pm.environment.set(\"payment_update_success\", true);",
											"pm.environment.set(\"last_updated_payment_id\", pm.request.url.variables.get(\"paymentId\"));",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"UNLIMITED\",\r\n    \"amount\": \"230000\",\r\n    \"title\": \"Create Payment Test\",\r\n    \"description\": \"This is the test Payment Link \",\r\n    \"gateways\": [\r\n        \"NASS_WALLET\",\r\n        \"ZAIN\"\r\n    ],\r\n    \"afterPaymentActions\": {\r\n\t\t\"customerRedirectUrl\": \"https://foo.bar.com\",\r\n\t\t\"customMessage\": \"mamad felasho biar\"\r\n\t},\r\n    \"collectCustomerEmail\": true,\r\n    \"collectCustomerPhoneNumber\": true,\r\n    \"collectFeeFromCustomer\": true,\r\n    \"isActive\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/payment/live/internal/update/:paymentId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"payment",
										"live",
										"internal",
										"update",
										":paymentId"
									],
									"variable": [
										{
											"key": "paymentId",
											"value": "{{random_active_payment_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ticket üíö",
					"item": [
						{
							"name": "Create ticket üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"üü¢ Status code is 201 (Created)\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"üßæ Response is a valid JSON object\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"üîç Response contains all expected keys\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"id\");\r",
											"    pm.expect(json).to.have.property(\"title\");\r",
											"    pm.expect(json).to.have.property(\"subject\");\r",
											"    pm.expect(json).to.have.property(\"status\");\r",
											"    pm.expect(json).to.have.property(\"createdAt\");\r",
											"    pm.expect(json).to.have.property(\"updatedAt\");\r",
											"    pm.expect(json).to.have.property(\"canAnswer\").that.is.a(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"üìÖ createdAt & updatedAt are valid ISO timestamps\", function () {\r",
											"    const json = pm.response.json();\r",
											"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
											"    pm.expect(json.createdAt).to.match(isoRegex);\r",
											"    pm.expect(json.updatedAt).to.match(isoRegex);\r",
											"});\r",
											"\r",
											"pm.test(\"üì≠ Ticket is not closed or replied yet\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json.closedAt).to.be.null;\r",
											"    pm.expect(json.repliedAt).to.be.null;\r",
											"    pm.expect(json.closedBy).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"üß∑ Ticket ID is a number\", function () {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json.id).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"üíæ Store ticket data for later use\", () => {\r",
											"    const res = pm.response.json();\r",
											"    pm.environment.set('ticket_id', res.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "So HOT dfdgz"
										},
										{
											"key": "subject",
											"value": "TECHNICAL_SUPPORT"
										},
										{
											"key": "text",
											"value": "Hi, Everything is in the air"
										},
										{
											"key": "files",
											"type": "file",
											"src": "postman-cloud:///1f06d1b8-ca8c-4260-91c5-745f4b62ac00"
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/ticket",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"ticket"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ticket list paginated üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// üü¢ 1. Status Code Check\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// ‚è± 2. Performance Check\r",
											"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// üõ° 3. Authorization Validation\r",
											"pm.test(\"üõ° Authorization header present\", () => {\r",
											"    pm.expect(pm.request.headers.has('Authorization')).to.be.true;\r",
											"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
											"});\r",
											"\r",
											"// üì¶ 4. Response Structure Validation\r",
											"pm.test(\"üì¶ Valid response structure\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    // Top-level validation\r",
											"    pm.expect(response).to.be.an('object').with.keys([\r",
											"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
											"    ]);\r",
											"    \r",
											"    // Items array validation\r",
											"    pm.expect(response.items).to.be.an('array');\r",
											"    response.items.forEach(item => {\r",
											"        pm.expect(item).to.include.keys(\r",
											"            'id', 'canAnswer', 'repliedAt', 'status', 'subject',\r",
											"            'title', 'closedAt', 'closedBy', 'createdAt', 'updatedAt'\r",
											"        );\r",
											"    });\r",
											"});\r",
											"\r",
											"// üî¢ 5. Pagination Validation\r",
											"pm.test(\"üî¢ Valid pagination data\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    pm.expect(res.totalItems).to.be.a('number').and.at.least(0);\r",
											"    pm.expect(res.totalPages).to.be.a('number').and.at.least(1);\r",
											"    pm.expect(res.page).to.be.a('number').and.at.least(1);\r",
											"    pm.expect(res.hasNext).to.be.a('boolean');\r",
											"    pm.expect(res.hasPrev).to.be.a('boolean');\r",
											"    \r",
											"    // Consistency checks\r",
											"    pm.expect(res.items.length).to.be.at.most(res.totalItems);\r",
											"    pm.expect(res.page).to.be.at.most(res.totalPages);\r",
											"});\r",
											"\r",
											"// üîç 6. Data Type Validation\r",
											"pm.test(\"üîç Correct data types in items\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.items.forEach(item => {\r",
											"        // Primitive types\r",
											"        pm.expect(item.id).to.be.a('string');\r",
											"        pm.expect(item.canAnswer).to.be.a('boolean');\r",
											"        pm.expect(item.status).to.be.a('string');\r",
											"        pm.expect(item.subject).to.be.a('string');\r",
											"        pm.expect(item.title).to.be.a('string');\r",
											"        \r",
											"        // ISO 8601 date validation\r",
											"        pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"        pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"        \r",
											"        // Nullable fields\r",
											"        ['repliedAt', 'closedAt'].forEach(field => {\r",
											"            pm.expect(item[field]).to.satisfy(val => \r",
											"                val === null || typeof val === 'string'\r",
											"            );\r",
											"        });\r",
											"        \r",
											"        // ClosedBy validation - UPDATED TO INCLUDE MERCHANT\r",
											"        pm.expect(item.closedBy).to.satisfy(val => \r",
											"            val === null || ['STAFF', 'SYSTEM', 'USER', 'MERCHANT'].includes(val)\r",
											"        );\r",
											"    });\r",
											"});\r",
											"\r",
											"// üß™ 7. Enum Value Validation\r",
											"pm.test(\"üß™ Valid enum values in items\", () => {\r",
											"    const res = pm.response.json();\r",
											"    const validStatuses = ['OPEN', 'CLOSED', 'PENDING', 'IN_PROGRESS', 'RESOLVED'];\r",
											"    const validSubjects = [\r",
											"  'TECHNICAL_SUPPORT',\r",
											"  'PAYMENT_ISSUE',\r",
											"  'ACCOUNT_MANAGEMENT',\r",
											"  'OTHER',\r",
											"  'KYB',\r",
											"  'MERCHANT_2FA_REQUEST',\r",
											"  'API_INTEGRATION_HELP',\r",
											"  'BILLING_QUESTION',\r",
											"  'PAYMENT_LINK_ISSUE',\r",
											"  'Account kyb Request' // ‚úÖ Add this\r",
											"];\r",
											"    res.items.forEach(item => {\r",
											"        pm.expect(validStatuses).to.include(item.status);\r",
											"        pm.expect(validSubjects).to.include(item.subject);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// üîÑ 8. Consistency Checks\r",
											"pm.test(\"üîÑ Data consistency\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.items.forEach(item => {\r",
											"        // Closed tickets should have closedAt timestamp\r",
											"        if (item.status === 'CLOSED') {\r",
											"            pm.expect(item.closedAt).to.not.be.null;\r",
											"            pm.expect(item.closedBy).to.not.be.null;\r",
											"            pm.expect(item.closedBy).to.be.oneOf(['STAFF', 'SYSTEM', 'USER', 'MERCHANT']);\r",
											"        }\r",
											"        \r",
											"        // Timestamp relationships\r",
											"        const createdAt = new Date(item.createdAt);\r",
											"        const updatedAt = new Date(item.updatedAt);\r",
											"        pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
											"    });\r",
											"});\r",
											"\r",
											"// üìä 9. Pagination Logic\r",
											"pm.test(\"üìä Pagination flags accuracy\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    // hasNext should be true when page < totalPages\r",
											"    pm.expect(res.hasNext).to.equal(res.page < res.totalPages);\r",
											"    \r",
											"    // hasPrev should be true when page > 1\r",
											"    pm.expect(res.hasPrev).to.equal(res.page > 1);\r",
											"});\r",
											"\r",
											"// üßÆ 10. Item Count Validation\r",
											"pm.test(\"üßÆ Items count matches pagination\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    if (res.totalItems > 0) {\r",
											"        pm.expect(res.items.length).to.be.at.least(1);\r",
											"    } else {\r",
											"        pm.expect(res.items).to.be.empty;\r",
											"    }\r",
											"});\r",
											"\r",
											"// üîÑ 11. Pagination Parameters Check (UPDATED)\r",
											"pm.test(\"üîÑ Pagination parameters behavior\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    // Get page size from environment or use response length\r",
											"    const pageSize = pm.environment.get(\"PAGE_SIZE\") || res.items.length;\r",
											"    \r",
											"    // For first page with items\r",
											"    if (res.totalItems > 0) {\r",
											"        pm.expect(res.items.length).to.equal(\r",
											"            Math.min(res.totalItems, pageSize)\r",
											"        );\r",
											"    }\r",
											"    \r",
											"    // Page should always be at least 1\r",
											"    pm.expect(res.page).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"pm.test(\"üíæ Store last ticket data\", () => {\r",
											"    const res = pm.response.json();\r",
											"    pm.environment.set('ticket_id', res.items.id);\r",
											"});\r",
											"\r",
											"// ‚úÖ Status code check\r",
											"pm.test(\"üü¢ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// üì¶ Parse response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// üßπ Filter tickets with status OPEN\r",
											"const openTickets = jsonData.items.filter(ticket => ticket.status === \"OPEN\");\r",
											"\r",
											"// üß™ Validate open tickets exist\r",
											"pm.test(\"üì¨ Open tickets are available\", function () {\r",
											"    pm.expect(openTickets.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"// üé≤ Select a random OPEN ticket ID\r",
											"const randomIndex = Math.floor(Math.random() * openTickets.length);\r",
											"const randomTicketId = openTickets[randomIndex].id;\r",
											"\r",
											"// üíæ Save to environment\r",
											"pm.environment.set(\"random_open_ticket_id\", randomTicketId);\r",
											"console.log(\"üéØ Random OPEN ticket ID selected:\", randomTicketId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/ticket",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"ticket"
									],
									"query": [
										{
											"key": "status",
											"value": "OPEN",
											"disabled": true
										},
										{
											"key": "subject",
											"value": "PAYMENT",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ticket details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// üü¢ 1. Status Code Check\r",
											"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// ‚è± 2. Performance Check\r",
											"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"// üõ° 3. Authorization Validation\r",
											"pm.test(\"üõ° Authorization header present\", () => {\r",
											"    pm.expect(pm.request.headers.has('Authorization')).to.be.true;\r",
											"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
											"});\r",
											"\r",
											"// üß© 4. Response Structure Validation\r",
											"pm.test(\"üß© Valid response structure\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.an('object').with.keys([\r",
											"        'createdAt', 'updatedAt', 'id', 'canAnswer',\r",
											"        'repliedAt', 'status', 'subject', 'title',\r",
											"        'closedAt', 'closedBy', 'messages'\r",
											"    ]);\r",
											"    \r",
											"    // Validate messages array\r",
											"    pm.expect(response.messages).to.be.an('array');\r",
											"    response.messages.forEach(msg => {\r",
											"        pm.expect(msg).to.include.keys('id', 'createdAt', 'text', 'attachments', 'staffAccount');\r",
											"        \r",
											"        // Validate attachments\r",
											"        pm.expect(msg.attachments).to.be.an('array');\r",
											"        msg.attachments.forEach(att => {\r",
											"            pm.expect(att).to.be.an('object').with.keys('id', 'url');\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"üîç Correct data types\", () => {\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    // Top-level validation\r",
											"    pm.expect(res.id).to.be.a('string'); // ‚úÖ FIXED\r",
											"    pm.expect(res.canAnswer).to.be.a('boolean');\r",
											"    pm.expect(res.status).to.be.a('string');\r",
											"    pm.expect(res.subject).to.be.a('string');\r",
											"    pm.expect(res.title).to.be.a('string');\r",
											"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"    pm.expect(res.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"\r",
											"    // Nullable fields\r",
											"    ['repliedAt', 'closedAt'].forEach(field => {\r",
											"        pm.expect(res[field]).to.satisfy(val => val === null || typeof val === 'string');\r",
											"    });\r",
											"\r",
											"    pm.expect(res.closedBy).to.satisfy(val => \r",
											"        val === null || ['STAFF', 'SYSTEM', 'USER', 'MERCHANT'].includes(val)\r",
											"    );\r",
											"\r",
											"    // Message validation\r",
											"    res.messages.forEach(msg => {\r",
											"        pm.expect(msg.id).to.be.a('string'); // IDs are strings in your response\r",
											"        pm.expect(msg.text).to.be.a('string');\r",
											"        pm.expect(msg.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"\r",
											"        msg.attachments.forEach(att => {\r",
											"            pm.expect(att.id).to.be.a('string'); // Also string in your response\r",
											"            pm.expect(att.url).to.be.a('string');\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// üß™ 6. Enum Value Validation\r",
											"pm.test(\"üß™ Valid enum values\", () => {\r",
											"    const res = pm.response.json();\r",
											"    const validStatuses = ['OPEN', 'CLOSED', 'IN_PROGRESS', 'PENDING', 'RESOLVED'];\r",
											"    const validSubjects = ['TECHNICAL_SUPPORT', 'PAYMENT_ISSUE', 'ACCOUNT_MANAGEMENT', 'OTHER', 'KYB', 'API_INTEGRATION_HELP', 'Account kyb Request', 'PAYMENT_LINK_ISSUE', 'BILLING_QUESTION'];\r",
											"    const validClosedBy = ['STAFF', 'SYSTEM', 'USER', 'MERCHANT', null];\r",
											"    \r",
											"    pm.expect(validStatuses, `Invalid status: ${res.status}`).to.include(res.status);\r",
											"    pm.expect(validSubjects, `Invalid subject: ${res.subject}`).to.include(res.subject);\r",
											"    pm.expect(validClosedBy, `Invalid closedBy: ${res.closedBy}`).to.include(res.closedBy);\r",
											"});\r",
											"\r",
											"// // ‚ö† 7. Nullable Field Handling (UPDATED)\r",
											"// pm.test(\"‚ö† Nullable fields check\", () => {\r",
											"//     const res = pm.response.json();\r",
											"    \r",
											"//     [res.repliedAt, res.closedAt].forEach(field => {\r",
											"//         pm.expect(field).to.satisfy(val => \r",
											"//             val === null || val.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)\r",
											"//         );\r",
											"//     });\r",
											"    \r",
											"//     // StaffAccount in messages should be null or object\r",
											"//     res.messages.forEach(msg => {\r",
											"//         pm.expect(msg.staffAccount).to.satisfy(val => \r",
											"//             val === null || (typeof val === 'object' && val.hasOwnProperty('id'))\r",
											"//         );\r",
											"//     });\r",
											"// });\r",
											"\r",
											"// üîó 8. Attachment URL Validation\r",
											"pm.test(\"üîó Valid attachment URLs\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    res.messages.forEach(msg => {\r",
											"        msg.attachments.forEach(att => {\r",
											"            pm.expect(att.url).to.match(/^https?:\\/\\/.+/);\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// üìä 9. Data Consistency\r",
											"pm.test(\"üìä Data consistency checks\", () => {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    // Timestamp relationships\r",
											"    const createdAt = new Date(res.createdAt);\r",
											"    const updatedAt = new Date(res.updatedAt);\r",
											"    pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());\r",
											"    \r",
											"    // Closed tickets should have closedAt and closedBy\r",
											"    if (res.status === 'CLOSED') {\r",
											"        pm.expect(res.closedAt).to.not.be.null;\r",
											"        pm.expect(res.closedBy).to.be.oneOf(['STAFF', 'SYSTEM', 'USER', 'MERCHANT']);\r",
											"    }\r",
											"    \r",
											"    // Messages should be in chronological order\r",
											"    for (let i = 0; i < res.messages.length - 1; i++) {\r",
											"        const current = new Date(res.messages[i].createdAt).getTime();\r",
											"        const next = new Date(res.messages[i + 1].createdAt).getTime();\r",
											"        pm.expect(current).to.be.lessThan(next);\r",
											"    }\r",
											"});\r",
											"\r",
											"// üíæ 10. Store Ticket Data\r",
											"pm.test(\"üíæ Store ticket data for later use\", () => {\r",
											"    const res = pm.response.json();\r",
											"    pm.environment.set('ticket_id', res.id);\r",
											"    pm.environment.set('last_message_id', res.messages[res.messages.length - 1]?.id || null);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/ticket/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"ticket",
										":id"
									],
									"query": [
										{
											"key": "id",
											"value": "1",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_open_ticket_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create message üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Accept 200 or 201 for successful submission",
											"pm.test(\"üü¢ Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// üì¶ Parse response",
											"const jsonData = pm.response.json();",
											"",
											"// üìã Validate ticket response structure",
											"pm.test(\"üìÅ Ticket response contains expected fields\", function () {",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
											"});",
											"",
											"// üíæ Save ticket ID for chaining",
											"pm.environment.set(\"submitted_ticket_id\", jsonData.id);",
											"console.log(\"üìå Submitted ticket ID:\", jsonData.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "text",
											"value": "salam  xddsd"
										},
										{
											"key": "files",
											"type": "file",
											"src": "postman-cloud:///1f06d1b8-ca8c-4260-91c5-745f4b62ac00"
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/ticket/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"ticket",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_open_ticket_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Close ticket üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 204 or 200\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 200]);",
											"});",
											"",
											"// üìå Get the ticket ID used in the request",
											"const ticketId = pm.request.url.variables.get(\"id\") || pm.environment.get(\"random_open_ticket_id\");",
											"",
											"// üíæ Save the updated ticket ID",
											"pm.environment.set(\"last_updated_ticket_id\", ticketId);",
											"console.log(\"‚úÖ PATCH applied to ticket ID:\", ticketId);",
											"",
											"// üß† Optional: mark status as updated",
											"pm.environment.set(\"ticket_status_updated\", true);",
											"pm.environment.set(\"ticket_update_time\", new Date().toISOString());",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/ticket/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"ticket",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_open_ticket_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Gateway üíö",
					"item": [
						{
							"name": "Get üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Check status code\r",
											"pm.test(\"‚úÖ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// ‚úÖ Check response is JSON\r",
											"pm.test(\"‚úÖ Response is a valid JSON\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// ‚úÖ Check 'gateways' array exists\r",
											"pm.test(\"‚úÖ Response contains 'gateways' array\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"gateways\");\r",
											"    pm.expect(jsonData.gateways).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// ‚úÖ Check each gateway has required fields\r",
											"pm.test(\"‚úÖ Each gateway has id, name, code, isActive, feeConstant, feePercent\", function () {\r",
											"    const gateways = pm.response.json().gateways;\r",
											"    gateways.forEach(gateway => {\r",
											"        pm.expect(gateway).to.have.property(\"id\");\r",
											"        pm.expect(gateway).to.have.property(\"name\");\r",
											"        pm.expect(gateway).to.have.property(\"code\");\r",
											"        pm.expect(gateway).to.have.property(\"isActive\");\r",
											"        pm.expect(gateway).to.have.property(\"feeConstant\");\r",
											"        pm.expect(gateway).to.have.property(\"feePercent\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// üì¶ Parse response\r",
											"const res = pm.response.json();\r",
											"const gateways = res.gateways;\r",
											"\r",
											"// üé≤ Random selection\r",
											"pm.test(\"üé≤ Randomly select gateway ID\", () => {\r",
											"    pm.expect(gateways).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * gateways.length);\r",
											"    const selectedId = gateways[randomIndex].id;\r",
											"\r",
											"    pm.environment.set(\"random_gateway_id\", selectedId);\r",
											"    console.log(\"üìå Random gateway ID saved:\", selectedId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/gateway",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"gateway"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Gateway üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code must be 200\r",
											"pm.test(\"‚úÖ Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// üö´ Ensure response body is empty\r",
											"pm.test(\"üö´ Response body should be empty\", () => {\r",
											"    pm.expect(pm.response.text()).to.eql(\"\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"isActive\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/gateway/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"gateway",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{random_gateway_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credit Card",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"isActive\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/credit-card/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"credit-card",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KYB üíö",
					"item": [
						{
							"name": "1. Primary info üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check\r",
											"pm.test(\"üü¢ Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"// üì¶ Parse response\r",
											"const res = pm.response.json();\r",
											"\r",
											"// üîç Validate response structure\r",
											"pm.test(\"üìÅ Response contains KYB ID\", function () {\r",
											"    pm.expect(res).to.have.property(\"id\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// üíæ Save KYB ID for chaining\r",
											"pm.environment.set(\"kyb_primary_id\", res.id);\r",
											"console.log(\"üìå KYB primary ID saved:\", res.id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Naeim\",\n\t\"lastName\": \"Mahmoudi\",\n\t\"nationality\": \"Iraq\",\n\t\"birthDate\": \"1991-05-31\",\n\t\"gender\": \"MALE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/primary",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"primary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Individual business Info üíö",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"businessName\": \"mamad foroshi\",\n\t\"industryType\": \"mamad sazan\",\n\t\"country\": \"Iraq\",\n\t\"province\": \"Erbil\",\n\t\"city\": \"Soleymanie\",\n\t\"address\": \"kdsafkdjfij ajfdk jaj iefj ja jfdij    \",\n\t\"geoLocation\": {\n\t\t\"lat\": -30.3,\n\t\t\"lng\": 23.45\n\t},\n\t\"website\": \"mamad.com\"\n}\t",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/individual",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"individual"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Corporation business Info ü©µ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Validate response structure",
											"pm.test(\"üìÅ Response contains KYB corporation ID\", function () {",
											"    pm.expect(res).to.have.property(\"id\").that.is.a(\"string\");",
											"});",
											"",
											"// üíæ Save KYB corporation ID for chaining",
											"pm.environment.set(\"kyb_corporation_id\", res.id);",
											"console.log(\"üìå KYB corporation ID saved:\", res.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"businessName\": \"MiroShop\",\n\t\"industryType\": \"FINANCIAL_SERVICES\",\n\t\"country\": \"Iraq\",\n\t\"province\": \"Erbil\",\n\t\"city\": \"Erbil\",\n\t\"address\": \"100M Street - MiroTech, Erbil, Erbil Governorate, 44001, Iraq\",\n\t\"vatNumber\": \"35155152d\",\n    \"website\": \"https://mirotech.com/\",\n\t\"businessPhoneNumber\": \"+9647701234567\",\n\t\"geoLocation\": {\n\t\t\"lat\": 36.216722,\n\t\t\"lng\": 43.983812\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/corporation",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"corporation"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Bank Info üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Validate response structure",
											"pm.test(\"üè¶ Response contains bank info ID\", function () {",
											"    pm.expect(res).to.have.property(\"id\").that.is.a(\"string\");",
											"});",
											"",
											"// üíæ Save bank info ID for chaining as request param",
											"pm.environment.set(\"kyb_bank_info_id\", res.id);",
											"console.log(\"üìå KYB bank info ID saved for param use:\", res.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"bankName\": \"RT Bank\",\n\t\"cardHolderName\": \"Naeim Mahmoudi\",\n\t\"iban\":\"IQ20CBIQ861800101010500\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/bank-info",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"bank-info"
									]
								}
							},
							"response": []
						},
						{
							"name": "details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Top-level fields",
											"pm.test(\"üìÅ Top-level KYB fields are valid\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.status).to.be.a(\"string\");",
											"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"});",
											"",
											"// üë§ Primary contact info",
											"pm.test(\"üë§ Primary contact info is valid\", () => {",
											"    const contact = res.primaryContactInfo;",
											"    pm.expect(contact).to.be.an(\"object\");",
											"    pm.expect(contact.firstName).to.be.a(\"string\");",
											"    pm.expect(contact.lastName).to.be.a(\"string\");",
											"    pm.expect(contact.nationality).to.be.a(\"string\");",
											"    pm.expect(contact.gender).to.be.oneOf([\"MALE\", \"FEMALE\", \"OTHER\"]);",
											"    pm.expect(contact.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"// üè¢ Corporate business info",
											"pm.test(\"üè¢ Corporate business info is valid\", () => {",
											"    const corp = res.corporateBusinessInfo;",
											"    pm.expect(corp).to.be.an(\"object\");",
											"    pm.expect(corp.businessName).to.be.a(\"string\");",
											"    pm.expect(corp.industryType).to.be.a(\"string\");",
											"    pm.expect(corp.country).to.be.a(\"string\");",
											"    pm.expect(corp.province).to.be.a(\"string\");",
											"    pm.expect(corp.city).to.be.a(\"string\");",
											"    pm.expect(corp.address).to.be.a(\"string\");",
											"    pm.expect(corp.website).to.be.a(\"string\");",
											"    pm.expect(corp.vatNumber).to.be.a(\"string\");",
											"    pm.expect(corp.businessPhoneNumber).to.be.a(\"string\");",
											"",
											"    // üåç GeoLocation",
											"    pm.expect(corp.geoLocation).to.be.an(\"object\");",
											"    pm.expect(corp.geoLocation.lat).to.be.a(\"number\");",
											"    pm.expect(corp.geoLocation.lng).to.be.a(\"number\");",
											"});",
											"",
											"// üè¶ Bank info",
											"pm.test(\"üè¶ Bank info is valid\", () => {",
											"    const bank = res.bankInfo;",
											"    pm.expect(bank).to.be.an(\"object\");",
											"    pm.expect(bank.bankName).to.be.a(\"string\");",
											"    pm.expect(bank.cardHolderName).to.be.a(\"string\");",
											"    pm.expect(bank.iban).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/details/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"details",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{kyb_bank_info_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Finalize üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200 or 201\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Validate response structure",
											"pm.test(\"üìÅ Finalize response contains KYB ID\", () => {",
											"    pm.expect(res).to.have.property(\"id\").that.is.a(\"string\");",
											"});",
											"",
											"// üíæ Save finalized KYB ID for chaining",
											"pm.environment.set(\"kyb_finalized_id\", res.id);",
											"console.log(\"üìå Finalized KYB ID saved:\", res.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/finalize",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"finalize"
									]
								}
							},
							"response": []
						},
						{
							"name": "paginated üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Get the first item from the items array",
											"var firstItem = jsonData.items && jsonData.items.length > 0 ? jsonData.items[0] : null;",
											"",
											"if (firstItem && firstItem.id) {",
											"    pm.environment.set('KYC_ID', firstItem.id);",
											"    pm.test('KYC_ID environment variable is set', function () {",
											"        pm.expect(pm.environment.get('KYC_ID')).to.eql(firstItem.id);",
											"    });",
											"} else {",
											"    pm.test('KYC_ID environment variable is not set because no valid item was found', function () {",
											"        pm.expect(pm.environment.get('KYC_ID')).to.be.undefined;",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb"
									],
									"query": [
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ASC",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 201 or 204\", () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 204]);",
											"});",
											"",
											"// üìå Log the target used in the upload",
											"const target = pm.request.body.formdata.find(field => field.key === \"target\")?.value;",
											"console.log(\"üì§ KYB document uploaded for target:\", target);",
											"",
											"// üß† Optional: mark upload status for chaining",
											"pm.environment.set(\"kyb_upload_success\", true);",
											"pm.environment.set(\"kyb_upload_target\", target);",
											"pm.environment.set(\"kyb_upload_timestamp\", new Date().toISOString());",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/home/kimia/Downloads/kyb-53-26e307e3-bce0-4001-a1df-58c5f433f0d5.pdf"
										},
										{
											"key": "target",
											"value": "10"
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/upload",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload paginated üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Validate pagination metadata",
											"pm.test(\"üìä Pagination metadata is valid\", () => {",
											"    pm.expect(res.totalItems).to.be.a(\"number\");",
											"    pm.expect(res.totalPages).to.be.a(\"number\");",
											"    pm.expect(res.page).to.be.a(\"number\");",
											"    pm.expect(res.hasNext).to.be.a(\"boolean\");",
											"    pm.expect(res.hasPrev).to.be.a(\"boolean\");",
											"});",
											"",
											"// üìÅ Validate each uploaded item",
											"pm.test(\"üìÅ Uploaded items are valid\", () => {",
											"    res.items.forEach(item => {",
											"        pm.expect(item.id).to.be.a(\"string\");",
											"        pm.expect(item.target).to.be.a(\"string\"); // If target is numeric, use 'string' or 'number' based on actual type",
											"        pm.expect(item.url).to.be.a(\"string\");",
											"        pm.expect(item.url).to.match(/^https:\\/\\/.+/);",
											"    });",
											"});",
											"",
											"// üíæ Save latest uploaded document ID and target for chaining",
											"if (res.items.length > 0) {",
											"    const latest = res.items[0];",
											"    pm.environment.set(\"kyb_latest_upload_id\", latest.id);",
											"    pm.environment.set(\"kyb_latest_upload_target\", latest.target);",
											"    console.log(\"üìå Latest KYB upload saved:\", latest.id, \"Target:\", latest.target);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/upload",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"upload"
									],
									"query": [
										{
											"key": "target",
											"value": "2",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "order",
											"value": "ASC",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Active üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Top-level fields",
											"pm.test(\"üìÅ Top-level KYB fields are valid\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.status).to.be.a(\"string\");",
											"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"});",
											"",
											"// üë§ Primary contact info",
											"pm.test(\"üë§ Primary contact info is valid\", () => {",
											"    const contact = res.primaryContactInfo;",
											"    pm.expect(contact).to.be.an(\"object\");",
											"    pm.expect(contact.firstName).to.be.a(\"string\");",
											"    pm.expect(contact.lastName).to.be.a(\"string\");",
											"    pm.expect(contact.nationality).to.be.a(\"string\");",
											"    pm.expect(contact.gender).to.be.oneOf([\"MALE\", \"FEMALE\", \"OTHER\"]);",
											"    pm.expect(contact.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"// üè¢ Corporate business info",
											"pm.test(\"üè¢ Corporate business info is valid\", () => {",
											"    const corp = res.corporateBusinessInfo;",
											"    pm.expect(corp).to.be.an(\"object\");",
											"    pm.expect(corp.businessName).to.be.a(\"string\");",
											"    pm.expect(corp.industryType).to.be.a(\"string\");",
											"    pm.expect(corp.country).to.be.a(\"string\");",
											"    pm.expect(corp.province).to.be.a(\"string\");",
											"    pm.expect(corp.city).to.be.a(\"string\");",
											"    pm.expect(corp.address).to.be.a(\"string\");",
											"    pm.expect(corp.website).to.be.a(\"string\");",
											"    pm.expect(corp.vatNumber).to.be.a(\"string\");",
											"    pm.expect(corp.businessPhoneNumber).to.be.a(\"string\");",
											"",
											"    // üåç GeoLocation",
											"    pm.expect(corp.geoLocation).to.be.an(\"object\");",
											"    pm.expect(corp.geoLocation.lat).to.be.a(\"number\");",
											"    pm.expect(corp.geoLocation.lng).to.be.a(\"number\");",
											"});",
											"",
											"// üè¶ Bank info",
											"pm.test(\"üè¶ Bank info is valid\", () => {",
											"    const bank = res.bankInfo;",
											"    pm.expect(bank).to.be.an(\"object\");",
											"    pm.expect(bank.bankName).to.be.a(\"string\");",
											"    pm.expect(bank.cardHolderName).to.be.a(\"string\");",
											"    pm.expect(bank.iban).to.be.a(\"string\");",
											"});",
											"",
											"// üßæ Optional: Save KYB ID for chaining",
											"pm.environment.set(\"kyb_active_id\", res.id);",
											"console.log(\"üìå Active KYB ID saved:\", res.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/active",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"active"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Status code check",
											"pm.test(\"üü¢ Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"",
											"// üîç Top-level fields",
											"pm.test(\"üìÅ Top-level KYB fields are valid\", () => {",
											"    pm.expect(res.id).to.be.a(\"string\");",
											"    pm.expect(res.status).to.be.a(\"string\");",
											"    pm.expect(res.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"});",
											"",
											"// üë§ Primary contact info",
											"pm.test(\"üë§ Primary contact info is valid\", () => {",
											"    const contact = res.primaryContactInfo;",
											"    pm.expect(contact).to.be.an(\"object\");",
											"    pm.expect(contact.firstName).to.be.a(\"string\");",
											"    pm.expect(contact.lastName).to.be.a(\"string\");",
											"    pm.expect(contact.nationality).to.be.a(\"string\");",
											"    pm.expect(contact.gender).to.be.oneOf([\"MALE\", \"FEMALE\", \"OTHER\"]);",
											"    pm.expect(contact.birthDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"});",
											"",
											"// üè¢ Corporate business info",
											"pm.test(\"üè¢ Corporate business info is valid\", () => {",
											"    const corp = res.corporateBusinessInfo;",
											"    pm.expect(corp).to.be.an(\"object\");",
											"    pm.expect(corp.businessName).to.be.a(\"string\");",
											"    pm.expect(corp.industryType).to.be.a(\"string\");",
											"    pm.expect(corp.country).to.be.a(\"string\");",
											"    pm.expect(corp.province).to.be.a(\"string\");",
											"    pm.expect(corp.city).to.be.a(\"string\");",
											"    pm.expect(corp.address).to.be.a(\"string\");",
											"    pm.expect(corp.website).to.be.a(\"string\");",
											"    pm.expect(corp.vatNumber).to.be.a(\"string\");",
											"    pm.expect(corp.businessPhoneNumber).to.be.a(\"string\");",
											"",
											"    // üåç GeoLocation",
											"    pm.expect(corp.geoLocation).to.be.an(\"object\");",
											"    pm.expect(corp.geoLocation.lat).to.be.a(\"number\");",
											"    pm.expect(corp.geoLocation.lng).to.be.a(\"number\");",
											"});",
											"",
											"// üè¶ Bank info",
											"pm.test(\"üè¶ Bank info is valid\", () => {",
											"    const bank = res.bankInfo;",
											"    pm.expect(bank).to.be.an(\"object\");",
											"    pm.expect(bank.bankName).to.be.a(\"string\");",
											"    pm.expect(bank.cardHolderName).to.be.a(\"string\");",
											"    pm.expect(bank.iban).to.be.a(\"string\");",
											"});",
											"",
											"// üßæ Optional: Save KYB ID for chaining",
											"pm.environment.set(\"kyb_active_id\", res.id);",
											"console.log(\"üìå Active KYB ID saved:\", res.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/kyb/contract",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"kyb",
										"contract"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Settlement üíö",
					"item": [
						{
							"name": "Create üíö",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let secret = pm.environment.get(\"MERCHANT_SECRET\");\r",
											"let lamdaUrl = pm.environment.get(\"LAMDA_OTP_GENERATOR_BASE_URL\");\r",
											"\r",
											"// Corrected: Use template literals with backticks\r",
											"const requestUrl = `${lamdaUrl}?secret=${secret}`;\r",
											"\r",
											"pm.sendRequest(requestUrl, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"OTP fetch failed:\", err);\r",
											"    } else {\r",
											"        // Added response status check\r",
											"        if (res.code === 200) {\r",
											"            const otp = res.json().token;\r",
											"            pm.environment.set(\"MERCHANT_OTP_CODE\", otp);\r",
											"        } else {\r",
											"            console.log(\"Failed to get OTP. Status:\", res.code, \"Response:\", res.body);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is handled correctly\", function () {\r",
											"    const status = pm.response.code;\r",
											"\r",
											"    if (status === 201) {\r",
											"        pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
											"        console.log(\"‚úÖ Settlement created with ID:\", pm.response.json().id);\r",
											"    } \r",
											"    \r",
											"    else if (status === 422) {\r",
											"        const jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.message).to.include(\"older than 24 hours\");\r",
											"        console.warn(\"‚ö†Ô∏è Settlement not allowed:\", jsonData.message);\r",
											"    } \r",
											"    \r",
											"    else if (status === 429) {\r",
											"        const jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.message).to.include(\"in process\");\r",
											"        console.warn(\"‚è≥ Too many requests:\", jsonData.message);\r",
											"    } \r",
											"    \r",
											"    else {\r",
											"        pm.expect.fail(\"‚ùå Unexpected status code: \" + status);\r",
											"    }\r",
											"});\r",
											"pm.environment.set('settlementID', pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mfaCode\": \"{{MERCHANT_OTP_CODE}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/settlement",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"settlement"
									]
								}
							},
							"response": []
						},
						{
							"name": "Paginated üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ 1. Status Code Check\r",
											"pm.test(\"‚úÖ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// üì¶ 2. Response Structure Validation\r",
											"pm.test(\"üì¶ Valid response structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    // Top-level validation\r",
											"    pm.expect(jsonData).to.have.keys([\r",
											"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
											"    ]);\r",
											"    \r",
											"    // Pagination data types\r",
											"    pm.expect(jsonData.totalItems).to.be.a('number');\r",
											"    pm.expect(jsonData.totalPages).to.be.a('number');\r",
											"    pm.expect(jsonData.page).to.be.a('number');\r",
											"    pm.expect(jsonData.hasNext).to.be.a('boolean');\r",
											"    pm.expect(jsonData.hasPrev).to.be.a('boolean');\r",
											"    \r",
											"    // Items array validation\r",
											"    pm.expect(jsonData.items).to.be.an('array');\r",
											"    console.log(\"üìÑ Total Items:\", jsonData.totalItems, \"| Page:\", jsonData.page, \"/\", jsonData.totalPages);\r",
											"});\r",
											"\r",
											"// üìë 3. Item Structure Validation\r",
											"pm.test(\"üìë Each item contains required fields\", function () {\r",
											"    const items = pm.response.json().items;\r",
											"    \r",
											"    items.forEach((item, index) => {\r",
											"        pm.expect(item).to.include.keys([\r",
											"            \"id\", \"status\", \"amount\", \"iban\", \r",
											"            \"bankName\", \"cardHolderName\", \"createdAt\", \"updatedAt\"\r",
											"        ]);\r",
											"        \r",
											"        console.log(`‚úîÔ∏è Item ${index + 1} - ID ${item.id}, Status: ${item.status}`);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üü¢ 4. Status Consistency Check\r",
											"pm.test(\"üü¢ Status values are valid\", function () {\r",
											"    const validStatuses = [\"CANCELED\", \"PENDING\", \"PAID\", \"REJECTED\"];\r",
											"    const items = pm.response.json().items;\r",
											"    \r",
											"    items.forEach(item => {\r",
											"        pm.expect(validStatuses).to.include(item.status);\r",
											"    });\r",
											"});\r",
											"\r",
											"// üîç 5. Data Type Validation\r",
											"pm.test(\"üîç Correct data types in items\", function () {\r",
											"    const items = pm.response.json().items;\r",
											"    \r",
											"    items.forEach(item => {\r",
											"        pm.expect(item.id).to.be.a('number');\r",
											"        pm.expect(item.status).to.be.a('string');\r",
											"        pm.expect(item.amount).to.be.a('string');\r",
											"        pm.expect(item.iban).to.be.a('string');\r",
											"        pm.expect(item.bankName).to.be.a('string');\r",
											"        pm.expect(item.cardHolderName).to.be.a('string');\r",
											"        pm.expect(item.createdAt).to.be.a('string');\r",
											"        pm.expect(item.updatedAt).to.be.a('string');\r",
											"        \r",
											"        // ISO 8601 date validation\r",
											"        pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"        pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"// ‚è± 6. Chronological Order Validation\r",
											"pm.test(\"‚è± Items in reverse chronological order\", function () {\r",
											"    const items = pm.response.json().items;\r",
											"    \r",
											"    for (let i = 0; i < items.length - 1; i++) {\r",
											"        const currentDate = new Date(items[i].createdAt);\r",
											"        const nextDate = new Date(items[i + 1].createdAt);\r",
											"        pm.expect(currentDate.getTime()).to.be.greaterThan(nextDate.getTime());\r",
											"    }\r",
											"});\r",
											"\r",
											"// üìù 7. Store First Item for Later Use\r",
											"pm.test(\"üìù Store first settlement id\", function () {\r",
											"    const items = pm.response.json().items;\r",
											"    if (items.length > 0) {\r",
											"        const firstItem = items[0];\r",
											"        pm.environment.set('first_settlement_id', firstItem.id);\r",
											"        pm.environment.set('first_settlement_amount', firstItem.amount);\r",
											"    }\r",
											"});\r",
											"\r",
											"// üîÑ 8. Pagination Consistency Check\r",
											"pm.test(\"üîÑ Pagination flags accuracy\", function () {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    // hasNext should be true when page < totalPages\r",
											"    pm.expect(res.hasNext).to.equal(res.page < res.totalPages);\r",
											"    \r",
											"    // hasPrev should be true when page > 1\r",
											"    pm.expect(res.hasPrev).to.equal(res.page > 1);\r",
											"    \r",
											"    // Items count consistency\r",
											"    pm.expect(res.items.length).to.be.at.most(res.totalItems);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/settlement?page=1&limit=1&order=ASC",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"settlement"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "order",
											"value": "ASC"
										},
										{
											"key": "status",
											"value": "REJECTED",
											"disabled": true
										},
										{
											"key": "dateFrom",
											"value": "2025-07-15T00:00:00.000Z",
											"disabled": true
										},
										{
											"key": "dateTo",
											"value": "2025-07-18T00:00:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Details üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"‚úÖ Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"üìÑ Response has required settlement fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const requiredFields = [\r",
											"        \"id\", \"status\", \"amount\", \"bankName\", \"cardHolderName\",\r",
											"        \"iban\", \"createdAt\", \"updatedAt\", \"isCreatedBySystem\", \"traces\"\r",
											"    ];\r",
											"    \r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(jsonData).to.have.property(field);\r",
											"    });\r",
											"\r",
											"    pm.expect(jsonData.amount).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.status).to.be.oneOf([\"PENDING\", \"REJECTED\", \"CANCELED\", \"PAID\"]);\r",
											"});\r",
											"\r",
											"pm.test(\"üßæ Timestamps are valid ISO strings\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    const timestampFields = [\"createdAt\", \"updatedAt\", \"canceledAt\"];\r",
											"    timestampFields.forEach(field => {\r",
											"        if (jsonData[field] !== null) {\r",
											"            pm.expect(new Date(jsonData[field]).toISOString()).to.eql(jsonData[field]);\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"üîç Traces are present and valid\", function () {\r",
											"    const traces = pm.response.json().traces;\r",
											"    pm.expect(traces).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    traces.forEach((trace, index) => {\r",
											"        pm.expect(trace).to.have.property(\"id\");\r",
											"        pm.expect(trace).to.have.property(\"status\");\r",
											"        pm.expect(trace).to.have.property(\"createdAt\");\r",
											"        pm.expect(trace).to.have.property(\"description\");\r",
											"\r",
											"        console.log(`üìå Trace ${index + 1} - ${trace.status}: ${trace.description}`);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"üß∑ Optional fields are either null or valid\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const optionalFields = [\r",
											"        \"attachmentUrl\", \"resultNote\", \"paidAt\", \"rejectedAt\",\r",
											"        \"transferId\", \"trackingId\", \"transferDate\"\r",
											"    ];\r",
											"\r",
											"    optionalFields.forEach(field => {\r",
											"        pm.expect(jsonData).to.have.property(field);\r",
											"        // No strict type check here, just ensuring the field exists\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/settlement/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"settlement",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{settlementID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Statistics üíö",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/merchant/settlement/statistics",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"settlement",
										"statistics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const statusCode = pm.response.code;\r",
											"const responseText = pm.response.text();\r",
											"\r",
											"// üì¶ Check response status\r",
											"pm.test(\"‚úÖ Status code is correct\", function () {\r",
											"    pm.expect(statusCode).to.be.oneOf([200, 422]);\r",
											"});\r",
											"\r",
											"// üì≠ Review the response body\r",
											"pm.test(\"üì≠ Response body is correct\", function () {\r",
											"    if (statusCode === 200) {\r",
											"        pm.expect(responseText).to.eql(\"\");\r",
											"    } else if (statusCode === 422) {\r",
											"        const jsonData = pm.response.json();\r",
											"        pm.expect(jsonData).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.message).to.include(\"you cannot cancel\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/10.3.1"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/merchant/settlement/:id",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"settlement",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{settlementID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Setting üíö",
					"item": [
						{
							"name": "Update üíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Check if response status is 200 OK\r",
											"pm.test(\"‚úÖ Status code is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// üì¶ Optional: Validate if body is empty or undefined\r",
											"pm.test(\"üì≠ Response body is empty or not present\", function () {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body === \"\" || body === undefined).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "User-Agent",
										"value": "insomnia/11.2.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"callbackUrl\": \"https://google.com\",\n\t\"inactiveGateways\": [\"ZAIN\"],\n\t\"expirationDurationInMinute\": 5,\n\t\"collectEmail\": false,\n\t\"collectPhonenumber\": false\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/setting/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"setting",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Testüíö",
					"item": [
						{
							"name": "Internal Payment üíö",
							"item": [
								{
									"name": "Paginate üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// üü¢ 1. Status Code Check\r",
													"pm.test(\"‚úÖ Status code is 200 OK\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// ‚è± 2. Performance Check\r",
													"pm.test(\"‚è± Response time < 2000ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"// üõ° 3. Authorization Validation\r",
													"pm.test(\"üõ° Authorization header present\", () => {\r",
													"    pm.request.headers.has('Authorization');\r",
													"    pm.expect(pm.request.headers.get('Authorization')).to.include('Bearer');\r",
													"});\r",
													"\r",
													"// üì¶ 4. Response Structure Validation\r",
													"pm.test(\"üì¶ Valid response structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    // Top-level validation\r",
													"    pm.expect(response).to.be.an('object').with.keys([\r",
													"        'items', 'totalItems', 'totalPages', 'page', 'hasNext', 'hasPrev'\r",
													"    ]);\r",
													"    \r",
													"    // Items array validation\r",
													"    pm.expect(response.items).to.be.an('array');\r",
													"    response.items.forEach(item => {\r",
													"        pm.expect(item).to.include.keys(\r",
													"            'paymentLink', 'referenceCode', 'title', 'isActive', 'amount',\r",
													"            'collectCustomerEmail', 'collectCustomerPhoneNumber',\r",
													"            'createdAt', 'id', 'gateways'\r",
													"        );\r",
													"    });\r",
													"});\r",
													"\r",
													"// üî¢ 5. Pagination Validation\r",
													"pm.test(\"üî¢ Valid pagination data\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    pm.expect(res.totalItems).to.be.a('number').and.at.least(0);\r",
													"    pm.expect(res.totalPages).to.be.a('number').and.at.least(1);\r",
													"    pm.expect(res.page).to.be.a('number').and.at.least(1);\r",
													"    pm.expect(res.hasNext).to.be.a('boolean');\r",
													"    pm.expect(res.hasPrev).to.be.a('boolean');\r",
													"    \r",
													"    // Consistency checks\r",
													"    pm.expect(res.items.length).to.equal(res.totalItems);\r",
													"    pm.expect(res.page).to.equal(1);\r",
													"    pm.expect(res.totalPages).to.equal(1);\r",
													"});\r",
													"\r",
													"// üîç 6. Data Type Validation\r",
													"pm.test(\"üîç Correct data types in items\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    if (res.items.length > 0) {\r",
													"        const item = res.items[0];\r",
													"        \r",
													"        // Primitive types\r",
													"        pm.expect(item.id).to.be.a('number');\r",
													"        pm.expect(item.title).to.be.a('string');\r",
													"        pm.expect(item.isActive).to.be.a('boolean');\r",
													"        pm.expect(item.amount).to.be.a('string');\r",
													"        pm.expect(item.collectCustomerEmail).to.be.a('boolean');\r",
													"        pm.expect(item.collectCustomerPhoneNumber).to.be.a('boolean');\r",
													"        \r",
													"        // UUID validation\r",
													"        pm.expect(item.referenceCode).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
													"        \r",
													"        // ISO 8601 date validation\r",
													"        pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
													"        \r",
													"        // Gateway array validation\r",
													"        pm.expect(item.gateways).to.be.an('array');\r",
													"        item.gateways.forEach(gateway => {\r",
													"            pm.expect(gateway).to.be.a('string');\r",
													"        });\r",
													"    }\r",
													"});\r",
													"\r",
													"// üîó 7. Payment Link Validation\r",
													"pm.test(\"üîó Valid payment URLs\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.paymentLink).to.match(/^https:\\/\\/kaknoos\\.com\\/pay\\/test\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\r",
													"        pm.expect(item.paymentLink).to.include(item.referenceCode);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üí∞ 8. Amount Validation\r",
													"pm.test(\"üí∞ Valid amount format\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.amount).to.match(/^\\d+(\\.\\d{1,2})?$/);\r",
													"        pm.expect(Number(item.amount)).to.be.a('number').above(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"// üß™ 9. Gateway Validation\r",
													"pm.test(\"üß™ Valid payment gateways\", () => {\r",
													"    const res = pm.response.json();\r",
													"    const validGateways = [\"FIB\", \"ZAIN\", \"MTN\", \"ZIRA\", \"MANUAL\"];\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        item.gateways.forEach(gateway => {\r",
													"            pm.expect(validGateways).to.include(gateway);\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚öô 10. Boolean Field Validation\r",
													"pm.test(\"‚öô Boolean fields consistency\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.isActive).to.be.a('boolean');\r",
													"        pm.expect(item.collectCustomerEmail).to.be.a('boolean');\r",
													"        pm.expect(item.collectCustomerPhoneNumber).to.be.a('boolean');\r",
													"    });\r",
													"});\r",
													"\r",
													"// üìä 11. Data Consistency Checks\r",
													"pm.test(\"üìä Consistent item properties\", () => {\r",
													"    const res = pm.response.json();\r",
													"    \r",
													"    res.items.forEach(item => {\r",
													"        pm.expect(item.title.length).to.be.at.least(3);\r",
													"        pm.expect(item.id).to.be.a('number').above(0);\r",
													"        pm.expect(new Date(item.createdAt).getTime()).to.be.lessThan(Date.now());\r",
													"    });\r",
													"});\r",
													"\r",
													"// // üîê 12. Security Checks\r",
													"// pm.test(\"üîê Secure response headers\", () => {\r",
													"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
													"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
													"//     pm.response.to.not.have.header('X-Powered-By');\r",
													"// });\r",
													"\r",
													"// üßÆ 13. Pagination Flag Validation\r",
													"pm.test(\"üßÆ Pagination flags accuracy\", () => {\r",
													"    const res = pm.response.json();\r",
													"    pm.expect(res.hasNext).to.be.false;\r",
													"    pm.expect(res.hasPrev).to.be.false;\r",
													"});\r",
													"\r",
													"// üìù 14. Environment Variable Storage (Optional)\r",
													"pm.test(\"üìù Store first payment link\", () => {\r",
													"    if (pm.response.json().items.length > 0) {\r",
													"        const firstPayment = pm.response.json().items[0];\r",
													"        pm.environment.set('TEST_PAYMENT_LINK', firstPayment.paymentLink);\r",
													"        pm.environment.set('TEST_REFERENCE_CODE', firstPayment.referenceCode);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/test/internal/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"test",
												"internal",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "25",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "order",
													"value": "ASC",
													"disabled": true
												},
												{
													"key": "status",
													"value": "PAID",
													"disabled": true
												},
												{
													"key": "dateFrom",
													"value": "",
													"disabled": true
												},
												{
													"key": "dateTo",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Details üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"üîê Authorization required\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
													"    pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Bearer\");\r",
													"});\r",
													"\r",
													"pm.test(\"üì¶ Response format is JSON\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const res = pm.response.json();\r",
													"\r",
													"// üî¢ Validate Field Types\r",
													"pm.test(\"üî¢ Field types are correct\", function () {\r",
													"    pm.expect(typeof res.id).to.eql(\"number\");\r",
													"    pm.expect(typeof res.paymentLink).to.eql(\"string\");\r",
													"    pm.expect(typeof res.referenceCode).to.eql(\"string\");\r",
													"    pm.expect(typeof res.title).to.eql(\"string\");\r",
													"    pm.expect(typeof res.description).to.eql(\"string\");\r",
													"    pm.expect(typeof res.isActive).to.eql(\"boolean\");\r",
													"    pm.expect(typeof res.amount).to.be.oneOf([\"string\", \"number\"]);\r",
													"    pm.expect(typeof res.creationSource).to.eql(\"string\");\r",
													"    pm.expect(typeof res.collectFeeFromCustomer).to.eql(\"boolean\");\r",
													"    pm.expect(typeof res.collectCustomerEmail).to.eql(\"boolean\");\r",
													"    pm.expect(typeof res.collectCustomerPhoneNumber).to.eql(\"boolean\");\r",
													"    pm.expect(typeof res.ourFeeAmount).to.be.oneOf([\"string\", \"number\"]);\r",
													"});\r",
													"\r",
													"// üß© Gateways structure & values\r",
													"pm.test(\"üß© Gateways have correct structure\", function () {\r",
													"    pm.expect(Array.isArray(res.gateways)).to.be.true;\r",
													"    res.gateways.forEach(gateway => {\r",
													"        pm.expect(typeof gateway.name).to.eql(\"string\");\r",
													"        pm.expect(typeof gateway.code).to.eql(\"string\");\r",
													"        pm.expect(typeof gateway.feeConstant).to.be.oneOf([\"number\", \"string\"]);\r",
													"        pm.expect(typeof gateway.feePercent).to.be.oneOf([\"number\", \"string\"]);\r",
													"        pm.expect(typeof gateway.payableAmount).to.be.oneOf([\"number\", \"string\"]);\r",
													"    });\r",
													"});\r",
													"\r",
													"// ‚è± Timestamps are valid ISO format\r",
													"pm.test(\"‚è± CreatedAt and UpdatedAt are valid ISO strings\", function () {\r",
													"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
													"    pm.expect(res.createdAt).to.match(isoRegex);\r",
													"    pm.expect(res.updatedAt).to.match(isoRegex);\r",
													"});\r",
													"\r",
													"// üìÑ Optional Field Check\r",
													"pm.test(\"üìÑ externalPayments is an array\", function () {\r",
													"    pm.expect(Array.isArray(res.externalPayments)).to.be.true;\r",
													"});\r",
													"\r",
													"// üö¶ Status Code Check\r",
													"pm.test(\"üö¶ Status code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// üîí No sensitive fields in response\r",
													"pm.test(\"üîí No sensitive data exposed\", function () {\r",
													"    const forbiddenFields = ['password', 'token', 'secret'];\r",
													"    const responseBody = JSON.stringify(res);\r",
													"    forbiddenFields.forEach(field => {\r",
													"        pm.expect(responseBody.includes(field)).to.eql(false);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/11.2.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/test/internal/details/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"test",
												"internal",
												"details",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{Internal_Payment_Test}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Status code check\r",
													"pm.test(\"‚úÖ Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// üßæ Parse JSON response\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"// üîé Basic keys presence\r",
													"pm.test(\"üîë Response contains expected keys\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"paymentLink\");\r",
													"    pm.expect(jsonData).to.have.property(\"referenceCode\");\r",
													"    pm.expect(jsonData).to.have.property(\"gateways\");\r",
													"    pm.expect(jsonData).to.have.property(\"amount\");\r",
													"    pm.expect(jsonData).to.have.property(\"ourFeeAmount\");\r",
													"    pm.expect(jsonData).to.have.property(\"collectCustomerEmail\", true);\r",
													"    pm.expect(jsonData).to.have.property(\"collectCustomerPhoneNumber\", true);\r",
													"});\r",
													"\r",
													"// üîÅ Check array of gateways\r",
													"pm.test(\"üîÅ Gateways contain expected entries\", function () {\r",
													"    const gatewayCodes = jsonData.gateways.map(g => g.code);\r",
													"    pm.expect(gatewayCodes).to.include.members([\"FIB\", \"ZAIN\"]);\r",
													"});\r",
													"\r",
													"\r",
													"// üîó Payment link format check\r",
													"pm.test(\"üîó Payment link is a valid URL\", function () {\r",
													"    pm.expect(jsonData.paymentLink).to.match(/^https:\\/\\/kaknoos\\.com\\/pay\\/test\\/[a-f0-9\\-]{36}$/);\r",
													"});\r",
													"\r",
													"pm.environment.set('Internal_Payment_Test', pm.response.json().id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"amount\": \"350\",\n\t\"gateways\": [\"FIB\", \"ZAIN\"],\n  \"title\": \"TEST Link\",\n  \"description\": \"Test Description\",\n  \"collectFeeFromCustomer\": false,\n  \"collectCustomerEmail\": true,\n  \"collectCustomerPhoneNumber\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/test/internal/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"test",
												"internal",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel üíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/10.3.0"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/test/internal/cancel/:id",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"test",
												"internal",
												"cancel",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{Internal_Payment_Test}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Statistics üíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/payment/test/internal/statistics",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"payment",
												"test",
												"internal",
												"statistics"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Productüíö",
							"item": [
								{
									"name": "unarchive",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/test/product/unarchive/:productId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"test",
												"product",
												"unarchive",
												":productId"
											],
											"variable": [
												{
													"key": "productId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Pizza",
													"type": "text"
												},
												{
													"key": "description",
													"value": "Updated",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "250",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f087db4-0bbe-4a50-adeb-36bd165e39c2"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/test/product/:productId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"test",
												"product",
												":productId"
											],
											"variable": [
												{
													"key": "productId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Archiveüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/test/product/archive/:productId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"test",
												"product",
												"archive",
												":productId"
											],
											"variable": [
												{
													"key": "productId",
													"value": "{{product_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Paginate Allüíö",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/merchant/test/product",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"test",
												"product"
											]
										}
									},
									"response": []
								},
								{
									"name": "Createüíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ‚úÖ Check for correct status code",
													"pm.test(\"üü¢ Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// üì¶ Parse response",
													"const jsonData = pm.response.json();",
													"",
													"// üßæ Validate core fields",
													"pm.test(\"üìã Response contains expected fields\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\", \"Pizza\");",
													"    pm.expect(jsonData).to.have.property(\"description\", \"Pizza Margaritaac\");",
													"    pm.expect(jsonData).to.have.property(\"amount\", \"250\");",
													"    pm.expect(jsonData).to.have.property(\"imagePath\");",
													"    pm.expect(jsonData).to.have.property(\"createdAt\");",
													"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
													"    pm.expect(jsonData).to.have.property(\"archivedAt\");",
													"});",
													"",
													"// üñºÔ∏è Validate image URL format",
													"pm.test(\"üåê Image path is a valid URL\", function () {",
													"    pm.expect(jsonData.imagePath).to.match(/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif)$/);",
													"});",
													"",
													"// üìÖ Validate timestamp format",
													"pm.test(\"‚è±Ô∏è createdAt and updatedAt are ISO timestamps\", function () {",
													"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
													"    pm.expect(jsonData.createdAt).to.match(isoRegex);",
													"    pm.expect(jsonData.updatedAt).to.match(isoRegex);",
													"});",
													"",
													"// üóëÔ∏è Check archivedAt is null",
													"pm.test(\"üóÉÔ∏è archivedAt is null\", function () {",
													"    pm.expect(jsonData.archivedAt).to.be.null;",
													"});",
													"",
													"// üíæ Save product ID for future use",
													"pm.environment.set(\"product_id\", jsonData.id);",
													"",
													"// üåê Validate image URL format",
													"pm.test(\"üñºÔ∏è Image path is a valid URL\", function () {",
													"    pm.expect(jsonData.imagePath).to.match(/^https?:\\/\\/.+\\.(jpg|jpeg|png|gif)$/);",
													"});",
													"",
													"// ‚è±Ô∏è Validate timestamp format",
													"pm.test(\"üìÖ createdAt and updatedAt are ISO timestamps\", function () {",
													"    const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;",
													"    pm.expect(jsonData.createdAt).to.match(isoRegex);",
													"    pm.expect(jsonData.updatedAt).to.match(isoRegex);",
													"});",
													"",
													"// üóÉÔ∏è Check archivedAt is null",
													"pm.test(\"üóëÔ∏è archivedAt is null\", function () {",
													"    pm.expect(jsonData.archivedAt).to.be.null;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Pizza",
													"type": "text"
												},
												{
													"key": "description",
													"value": "Updated",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "250",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1f087db4-0bbe-4a50-adeb-36bd165e39c2"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/test/product/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"test",
												"product",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Sessionüíö",
					"item": [
						{
							"name": "Terminateüíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Check for successful deletion (commonly 200 or 204)",
											"pm.test(\"üü¢ Status code is 200 or 204\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
											"});",
											"",
											"// üßπ Optionally clear sessionId from environment",
											"pm.environment.unset(\"sessionId\");",
											"",
											"// üìã Log confirmation",
											"console.log(\"Session deleted:\", pm.request.url.toString());",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/aegis/merchant/auth/session/:sessionId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"aegis",
										"merchant",
										"auth",
										"session",
										":sessionId"
									],
									"variable": [
										{
											"key": "sessionId",
											"value": "{{random_session_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get  allüíö",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// üì¶ Parse response",
											"const res = pm.response.json();",
											"const sessions = res.sessions;",
											"",
											"// ‚úÖ Basic response checks",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has sessions array\", () => {",
											"    pm.expect(sessions).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// üîç Validate structure of each session",
											"pm.test(\"Each session has required fields\", () => {",
											"    sessions.forEach((session, index) => {",
											"        pm.expect(session).to.have.property(\"id\").that.is.a(\"string\");",
											"        pm.expect(session).to.have.property(\"loginIp\").that.is.a(\"string\");",
											"        pm.expect(session).to.have.property(\"sessionId\").that.is.a(\"string\");",
											"        pm.expect(session).to.have.property(\"child\").that.is.a(\"number\");",
											"        pm.expect(session).to.have.property(\"browser\").that.is.a(\"string\");",
											"        pm.expect(session).to.have.property(\"osName\").that.is.a(\"string\");",
											"        pm.expect(session).to.have.property(\"platformType\").that.is.a(\"string\");",
											"        pm.expect(session).to.have.property(\"engine\").that.is.a(\"string\");",
											"    });",
											"});",
											"",
											"// üéØ Randomly select a session ID",
											"pm.test(\"üéØ Randomly select session ID from sessions\", () => {",
											"    const randomIndex = Math.floor(Math.random() * sessions.length);",
											"    const selectedId = sessions[randomIndex].id;",
											"    pm.environment.set(\"random_session_id\", selectedId);",
											"    console.log(\"üìå Random session ID saved:\", selectedId);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/aegis/merchant/auth/session/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"aegis",
										"merchant",
										"auth",
										"session",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Coupon ü§é",
					"item": [
						{
							"name": "Promo code",
							"item": [
								{
									"name": "Create",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"codes\": [\n\t\t{\n\t\t\t\"code\": \"ljhgydcgkil\",\n\t\t\t\"effectiveFrom\": \"2025-11-23T00:00:00Z\",\n\t\t\t\"effectiveTo\": \"2025-11-28T00:00:00Z\",\n            \"maxRedemptions\": 10,\n            \"isActive\": true\n\t\t\t\n\t\t}\n        // {\n\t\t// \t\"code\": \"CKZSXLKELSKDE\",\n\t\t// \t\"effectiveFrom\": \"2025-11-23T00:00:00Z\",\n\t\t// \t\"effectiveTo\": \"2025-11-28T00:00:00Z\",\n        //     \"maxRedemptions\": 10,\n        //     \"isActive\": true\n\t\t\t\n\t\t// }\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/promo-code/:couponId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"promo-code",
												":couponId"
											],
											"variable": [
												{
													"key": "couponId",
													"value": "28"
												}
											]
										}
									},
									"response": [
										{
											"name": "Create",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"codes\": [\n        {\n            \"code\": \"12341567\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/merchant/promo-code/:couponId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"merchant",
														"promo-code",
														":couponId"
													],
													"variable": [
														{
															"key": "couponId",
															"value": "2"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Date",
													"value": "Wed, 22 Oct 2025 07:44:20 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												},
												{
													"key": "Content-Length",
													"value": "0"
												}
											],
											"cookie": [],
											"body": null
										}
									]
								},
								{
									"name": "Paginateüíö",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response is JSON\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Root level properties are correct\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"items\").that.is.an(\"array\");",
													"    pm.expect(jsonData).to.have.property(\"totalItems\", 2);",
													"    pm.expect(jsonData).to.have.property(\"totalPages\", 1);",
													"    pm.expect(jsonData).to.have.property(\"page\", 1);",
													"    pm.expect(jsonData).to.have.property(\"hasNext\", false);",
													"    pm.expect(jsonData).to.have.property(\"hasPrev\", false);",
													"});",
													"",
													"pm.test(\"Each promo code item has required fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.items.forEach((item, index) => {",
													"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");",
													"        pm.expect(item).to.have.property(\"code\").that.is.a(\"string\");",
													"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");",
													"        pm.expect(item).to.have.property(\"redeemedCount\").that.is.a(\"number\");",
													"        pm.expect(item).to.have.property(\"maxRedemptions\").that.is.a(\"number\");",
													"        pm.expect(item).to.have.property(\"isActive\", true);",
													"        pm.expect(item).to.have.property(\"effectiveFrom\").that.satisfies(val => val === null || typeof val === \"string\");",
													"        pm.expect(item).to.have.property(\"effectiveTo\").that.satisfies(val => val === null || typeof val === \"string\");",
													"    });",
													"});",
													"// üì¶ Parse response",
													"const res = pm.response.json();",
													"const items = res.items;",
													"",
													"// üéØ Random selection",
													"pm.test(\"üéØ Randomly select promo ID from items\", () => {",
													"    pm.expect(items).to.be.an(\"array\").that.is.not.empty;",
													"",
													"    const randomIndex = Math.floor(Math.random() * items.length);",
													"    const selectedId = items[randomIndex].id;",
													"",
													"    pm.environment.set(\"random_promo_id\", selectedId);",
													"    console.log(\"üìå Random promo ID:\", selectedId);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/promo-code?dateFrom=2020&dateTo=2030&isActive=true",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"promo-code"
											],
											"query": [
												{
													"key": "dateFrom",
													"value": "2020"
												},
												{
													"key": "dateTo",
													"value": "2030"
												},
												{
													"key": "isActive",
													"value": "true"
												},
												{
													"key": "couponId",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "Paginate",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/merchant/promo-code?dateFrom=2020&dateTo=2030&isActive=true&couponId=2",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"merchant",
														"promo-code"
													],
													"query": [
														{
															"key": "dateFrom",
															"value": "2020"
														},
														{
															"key": "dateTo",
															"value": "2030"
														},
														{
															"key": "isActive",
															"value": "true"
														},
														{
															"key": "couponId",
															"value": "2"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "406"
												},
												{
													"key": "ETag",
													"value": "W/\"196-z9xMUg2/yLsWeLbUuSdzy+NwiEs\""
												},
												{
													"key": "Date",
													"value": "Wed, 22 Oct 2025 07:45:47 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"items\": [\n        {\n            \"createdAt\": \"2025-10-22T07:44:20.666Z\",\n            \"id\": \"4\",\n            \"code\": \"12341567\",\n            \"effectiveFrom\": null,\n            \"effectiveTo\": null,\n            \"redeemedCount\": 0,\n            \"maxRedemptions\": -1,\n            \"isActive\": true\n        },\n        {\n            \"createdAt\": \"2025-10-22T07:43:36.458Z\",\n            \"id\": \"3\",\n            \"code\": \"12341124\",\n            \"effectiveFrom\": null,\n            \"effectiveTo\": null,\n            \"redeemedCount\": 0,\n            \"maxRedemptions\": -1,\n            \"isActive\": true\n        }\n    ],\n    \"totalItems\": 2,\n    \"totalPages\": 1,\n    \"page\": 1,\n    \"hasNext\": false,\n    \"hasPrev\": false\n}"
										}
									]
								},
								{
									"name": "Detailsüíö",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/promo-code/:promoId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"promo-code",
												":promoId"
											],
											"variable": [
												{
													"key": "promoId",
													"value": "{{random_promo_id}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Details",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/merchant/promo-code/:promoId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"merchant",
														"promo-code",
														":promoId"
													],
													"variable": [
														{
															"key": "promoId",
															"value": "2"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "161"
												},
												{
													"key": "ETag",
													"value": "W/\"a1-fp18tvUX3KVu4/vU2tFNAfa7Rkk\""
												},
												{
													"key": "Date",
													"value": "Wed, 22 Oct 2025 07:47:12 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"createdAt\": \"2025-10-22T07:31:23.670Z\",\n    \"id\": \"2\",\n    \"code\": \"CODE1234\",\n    \"effectiveFrom\": null,\n    \"effectiveTo\": null,\n    \"redeemedCount\": 0,\n    \"maxRedemptions\": -1,\n    \"isActive\": true\n}"
										}
									]
								},
								{
									"name": "Update",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{MERCHANT_ACCESS_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isActive\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/promo-code/:promoId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"promo-code",
												":promoId"
											],
											"variable": [
												{
													"key": "promoId",
													"value": "2"
												}
											]
										}
									},
									"response": [
										{
											"name": "Update",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isActive\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/merchant/promo-code/:promoId",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"merchant",
														"promo-code",
														":promoId"
													],
													"variable": [
														{
															"key": "promoId",
															"value": "2"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Date",
													"value": "Wed, 22 Oct 2025 07:48:31 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												},
												{
													"key": "Content-Length",
													"value": "0"
												}
											],
											"cookie": [],
											"body": null
										}
									]
								}
							]
						},
						{
							"name": "Create",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Coupon\",\n    // \"constant\": \"1\", \n    \"percent\": 2.00, // Just one of the percent or constant is allowed, max decimal points = 2\n    \"isActive\": true, // optional default >>> true\n    \"minAmount\": \"1000\", // optional\n    \"productIds\": [\"74\"] // optional\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/coupon",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"coupon"
									]
								}
							},
							"response": [
								{
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/coupon/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"coupon",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-g8XH0Dum5CMsI43ax61J3a/Qg5Q\""
										},
										{
											"key": "Date",
											"value": "Wed, 22 Oct 2025 07:16:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"1\"\n}"
								},
								{
									"name": "With min amount",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true, \n    \"minAmount\": \"1000\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/coupon/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"coupon",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-vKxK8YqO9ibwq6Pqmm+U51mLrC4\""
										},
										{
											"key": "Date",
											"value": "Wed, 22 Oct 2025 07:19:11 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"2\"\n}"
								},
								{
									"name": "With product ids",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true, \n    \"minAmount\": \"1000\", \n    \"productIds\": [\"1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/coupon/",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"coupon",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-GPrRUgKK9Zpz0mwITJ4b911lcBQ\""
										},
										{
											"key": "Date",
											"value": "Wed, 22 Oct 2025 07:19:41 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"4\"\n}"
								}
							]
						},
						{
							"name": "Details",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true, \n    \"minAmount\": \"1000\", \n    \"productIds\": [\"1\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/coupon/:couponId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"coupon",
										":couponId"
									],
									"variable": [
										{
											"key": "couponId",
											"value": "27"
										}
									]
								}
							},
							"response": [
								{
									"name": "Details",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true, \n    \"minAmount\": \"1000\", \n    \"productIds\": [\"1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/coupon/:couponId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"coupon",
												":couponId"
											],
											"variable": [
												{
													"key": "couponId",
													"value": "3"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "171"
										},
										{
											"key": "ETag",
											"value": "W/\"ab-03oFD7sz9Avq54S1j7MQJBA87Tk\""
										},
										{
											"key": "Date",
											"value": "Wed, 22 Oct 2025 07:21:12 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"updatedAt\": \"2025-10-22T07:19:40.253Z\",\n    \"createdAt\": \"2025-10-22T07:19:40.253Z\",\n    \"id\": \"3\",\n    \"constant\": \"1\",\n    \"percent\": 0,\n    \"name\": \"Test Coupon\",\n    \"minAmount\": \"1000\",\n    \"isActive\": true\n}"
								}
							]
						},
						{
							"name": "Update",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/coupon/:couponId",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"coupon",
										":couponId"
									],
									"variable": [
										{
											"key": "couponId",
											"value": "3"
										}
									]
								}
							},
							"response": [
								{
									"name": "Update",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isActive\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/coupon/:couponId",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"coupon",
												":couponId"
											],
											"variable": [
												{
													"key": "couponId",
													"value": "3"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Oct 2025 07:26:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										},
										{
											"key": "Content-Length",
											"value": "0"
										}
									],
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Paginate",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{MERCHANT_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true, \n    \"minAmount\": \"1000\", \n    \"productIds\": [\"10\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/merchant/coupon/?dateFrom=2020&dateTo=2030&isActive=true",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"merchant",
										"coupon",
										""
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "2020"
										},
										{
											"key": "dateTo",
											"value": "2030"
										},
										{
											"key": "isActive",
											"value": "true"
										}
									]
								}
							},
							"response": [
								{
									"name": "Details",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Coupon\",\n    \"constant\": \"1\", \n    //\"percent\": 2.0 // Just one of the percent or constant is allowed\n    \"isActive\": true, \n    \"minAmount\": \"1000\", \n    \"productIds\": [\"1\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/merchant/coupon/?dateFrom=2020&dateTo=2030&isActive=true",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"merchant",
												"coupon",
												""
											],
											"query": [
												{
													"key": "dateFrom",
													"value": "2020"
												},
												{
													"key": "dateTo",
													"value": "2030"
												},
												{
													"key": "isActive",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "767"
										},
										{
											"key": "ETag",
											"value": "W/\"2ff-/de/wKc/Efis3DhHX2XWrNQf4mU\""
										},
										{
											"key": "Date",
											"value": "Wed, 22 Oct 2025 07:25:01 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"items\": [\n        {\n            \"updatedAt\": \"2025-10-22T07:19:41.905Z\",\n            \"createdAt\": \"2025-10-22T07:19:41.905Z\",\n            \"id\": \"4\",\n            \"constant\": \"1\",\n            \"percent\": 0,\n            \"name\": \"Test Coupon\",\n            \"minAmount\": \"1000\",\n            \"isActive\": true\n        },\n        {\n            \"updatedAt\": \"2025-10-22T07:19:40.253Z\",\n            \"createdAt\": \"2025-10-22T07:19:40.253Z\",\n            \"id\": \"3\",\n            \"constant\": \"1\",\n            \"percent\": 0,\n            \"name\": \"Test Coupon\",\n            \"minAmount\": \"1000\",\n            \"isActive\": true\n        },\n        {\n            \"updatedAt\": \"2025-10-22T07:19:11.965Z\",\n            \"createdAt\": \"2025-10-22T07:19:11.965Z\",\n            \"id\": \"2\",\n            \"constant\": \"1\",\n            \"percent\": 0,\n            \"name\": \"Test Coupon\",\n            \"minAmount\": \"1000\",\n            \"isActive\": true\n        },\n        {\n            \"updatedAt\": \"2025-10-22T07:16:59.743Z\",\n            \"createdAt\": \"2025-10-22T07:16:59.743Z\",\n            \"id\": \"1\",\n            \"constant\": \"1\",\n            \"percent\": 0,\n            \"name\": \"Test Coupon\",\n            \"minAmount\": \"0\",\n            \"isActive\": true\n        }\n    ],\n    \"totalItems\": 4,\n    \"totalPages\": 1,\n    \"page\": 1,\n    \"hasNext\": false,\n    \"hasPrev\": false\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Customer üíö",
			"item": [
				{
					"name": "Test",
					"item": [
						{
							"name": "Select Payment Gateway",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"gateway\": \"ZAIN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/payment/test/customer/:code",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"payment",
										"test",
										"customer",
										":code"
									],
									"variable": [
										{
											"key": "code",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Payment",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"gateway\": \"ZAIN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/payment/test/customer/:code",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"payment",
										"test",
										"customer",
										":code"
									],
									"variable": [
										{
											"key": "code",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Status",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"gateway\": \"FIB\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/payment/test/customer/status/:code",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"payment",
										"test",
										"customer",
										"status",
										":code"
									],
									"variable": [
										{
											"key": "code",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Finalize",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"pay\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/payment/test/customer/finalize/:code",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"payment",
										"test",
										"customer",
										"finalize",
										":code"
									],
									"variable": [
										{
											"key": "code",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "https://merchant.pallawan.com/pay/live/fb00e87d-5450-4e64-bd3c-8d7ccc834f25ww",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://merchant.pallawan.com/pay/live/fb00e87d-5450-4e64-bd3c-8d7ccc834f25ww",
									"protocol": "https",
									"host": [
										"merchant",
										"pallawan",
										"com"
									],
									"path": [
										"pay",
										"live",
										"fb00e87d-5450-4e64-bd3c-8d7ccc834f25ww"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Select Payment Gateway üíö",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üü¢ 1. Status Code Check\r",
									"pm.test(\"‚úÖ Status code is OK\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// ‚è± 2. Performance Check\r",
									"pm.test(\"‚è± Response time < 3000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// üì¶ 3. Response Structure Validation\r",
									"pm.test(\"üì¶ Valid response structure\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    // Top-level validation\r",
									"    pm.expect(response).to.be.an('object').with.keys([\r",
									"        'srfc', 'needRedirect', 'redirectUrl', 'gateway', 'fibData'\r",
									"    ]);\r",
									"    \r",
									"    // FIB Data validation\r",
									"    if (response.gateway === 'FIB') {\r",
									"        pm.expect(response.fibData).to.be.an('object').with.keys([\r",
									"            'code', 'qrCode', 'personalLink', 'businessLink', 'corporationLink'\r",
									"        ]);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üîç 4. Data Type Validation\r",
									"pm.test(\"üîç Correct data types\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    pm.expect(res.srfc).to.be.a('string');\r",
									"    pm.expect(res.needRedirect).to.be.a('boolean');\r",
									"    pm.expect(res.gateway).to.be.a('string');\r",
									"    \r",
									"    // Nullable field\r",
									"    pm.expect(res.redirectUrl).to.satisfy(val => val === null || typeof val === 'string');\r",
									"    \r",
									"    // FIB Data types\r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.expect(res.fibData.code).to.be.a('string');\r",
									"        pm.expect(res.fibData.qrCode).to.be.a('string');\r",
									"        pm.expect(res.fibData.personalLink).to.be.a('string');\r",
									"        pm.expect(res.fibData.businessLink).to.be.a('string');\r",
									"        pm.expect(res.fibData.corporationLink).to.be.a('string');\r",
									"    }\r",
									"});\r",
									"\r",
									"// üîê 5. SRFC Validation - UPDATED\r",
									"pm.test(\"üîê Valid SRFC format\", () => {\r",
									"    const res = pm.response.json();\r",
									"    // Corrected regex to allow 17 alphanumeric characters\r",
									"    pm.expect(res.srfc).to.match(/^[a-z0-9]{17}$/);\r",
									"});\r",
									"\r",
									"// üîó 6. FIB Link Validation\r",
									"pm.test(\"üîó Valid FIB links when gateway is FIB\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        const { fibData } = res;\r",
									"        \r",
									"        // Validate QR code format\r",
									"        pm.expect(fibData.qrCode).to.match(/^data:image\\/png;base64,[a-zA-Z0-9+/=]+$/);\r",
									"        \r",
									"        // Validate link formats\r",
									"        const linkPattern = /^https:\\/\\/[a-z-]+\\.first-iraqi-bank\\.co\\/\\?link=https:\\/\\/[a-z-]+\\.first-iraqi-bank\\.co\\/onlinePayment\\?identifier%3D[a-zA-Z0-9]+&apn=com\\.firstiraqibank\\.[a-z]+&ibi=com\\.firstiraqibank\\.[a-z]+$/;\r",
									"        \r",
									"        pm.expect(fibData.personalLink).to.match(linkPattern);\r",
									"        pm.expect(fibData.businessLink).to.match(linkPattern);\r",
									"        pm.expect(fibData.corporationLink).to.match(linkPattern);\r",
									"        \r",
									"        // Validate identifier consistency\r",
									"        const identifier = fibData.code.replace(/-/g, '');\r",
									"        pm.expect(fibData.personalLink).to.include(identifier);\r",
									"        pm.expect(fibData.businessLink).to.include(identifier);\r",
									"        pm.expect(fibData.corporationLink).to.include(identifier);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üß™ 7. Gateway Validation\r",
									"pm.test(\"üß™ Valid gateway response\", () => {\r",
									"    const res = pm.response.json();\r",
									"    const validGateways = [\"FIB\", \"ZAIN\"];\r",
									"    pm.expect(validGateways).to.include(res.gateway);\r",
									"});\r",
									"\r",
									"// ‚öô 8. Redirect Validation\r",
									"pm.test(\"‚öô Redirect behavior correct\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.expect(res.needRedirect).to.be.false;\r",
									"        pm.expect(res.redirectUrl).to.be.null;\r",
									"    } else {\r",
									"        pm.expect(res.needRedirect).to.be.true;\r",
									"        pm.expect(res.redirectUrl).to.match(/^https?:\\/\\/.+/);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üìù 9. Environment Variable Storage\r",
									"pm.test(\"üìù Store payment references\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    pm.environment.set('PAYMENT_SRFC', res.srfc);\r",
									"    pm.environment.set('PAYMENT_GATEWAY', res.gateway);\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.environment.set('FIB_CODE', res.fibData.code);\r",
									"        pm.environment.set('FIB_QR_CODE', res.fibData.qrCode);\r",
									"        pm.environment.set('PERSONAL_PAYMENT_LINK', res.fibData.personalLink);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üîí 10. Security Headers Check\r",
									"// pm.test(\"üîí Security headers present\", () => {\r",
									"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
									"//     pm.response.to.have.header('Strict-Transport-Security');\r",
									"//     pm.response.to.not.have.header('X-Powered-By');\r",
									"// });\r",
									"\r",
									"// üì± 11. Mobile Deep Link Validation\r",
									"pm.test(\"üì± Valid mobile deep links\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        const { fibData } = res;\r",
									"        \r",
									"        pm.expect(fibData.personalLink).to.include('apn=com.firstiraqibank.personal');\r",
									"        pm.expect(fibData.businessLink).to.include('apn=com.firstiraqibank.business');\r",
									"        pm.expect(fibData.corporationLink).to.include('apn=com.firstiraqibank.corporate');\r",
									"        \r",
									"        pm.expect(fibData.personalLink).to.include('ibi=com.firstiraqibank.personal');\r",
									"        pm.expect(fibData.businessLink).to.include('ibi=com.firstiraqibank.business');\r",
									"        pm.expect(fibData.corporationLink).to.include('ibi=com.firstiraqibank.corporate');\r",
									"    }\r",
									"});\r",
									"\r",
									"// üß© 12. FIB Code Validation\r",
									"pm.test(\"üß© Valid FIB code format\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.expect(res.fibData.code).to.match(/^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "insomnia/10.3.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerEmail\": \"n.mahmoudi@terminal101.co\",\n  \"customerPhonenumber\":\"+9647701234567\",\n  \"gateway\": \"FIB\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment/customer/:code",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment",
								"customer",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "a8b9fca2-c783-48cd-8036-badfcaa87119"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ZAIN Payment Gateway üíö",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üü¢ 1. Status Code Check\r",
									"pm.test(\"‚úÖ Status code is OK\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// ‚è± 2. Performance Check\r",
									"pm.test(\"‚è± Response time < 3000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									"// üîç 4. Data Type Validation\r",
									"pm.test(\"üîç Correct data types\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    pm.expect(res.srfc).to.be.a('string');\r",
									"    pm.expect(res.needRedirect).to.be.a('boolean');\r",
									"    pm.expect(res.gateway).to.be.a('string');\r",
									"    \r",
									"    // Nullable field\r",
									"    pm.expect(res.redirectUrl).to.satisfy(val => val === null || typeof val === 'string');\r",
									"    \r",
									"    // FIB Data types\r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.expect(res.fibData.code).to.be.a('string');\r",
									"        pm.expect(res.fibData.qrCode).to.be.a('string');\r",
									"        pm.expect(res.fibData.personalLink).to.be.a('string');\r",
									"        pm.expect(res.fibData.businessLink).to.be.a('string');\r",
									"        pm.expect(res.fibData.corporationLink).to.be.a('string');\r",
									"    }\r",
									"});\r",
									"\r",
									"// üîê 5. SRFC Validation - UPDATED\r",
									"pm.test(\"üîê Valid SRFC format\", () => {\r",
									"    const res = pm.response.json();\r",
									"    // Corrected regex to allow 17 alphanumeric characters\r",
									"    pm.expect(res.srfc).to.match(/^[a-z0-9]{17}$/);\r",
									"});\r",
									"\r",
									"// üîó 6. FIB Link Validation\r",
									"pm.test(\"üîó Valid FIB links when gateway is FIB\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        const { fibData } = res;\r",
									"        \r",
									"        // Validate QR code format\r",
									"        pm.expect(fibData.qrCode).to.match(/^data:image\\/png;base64,[a-zA-Z0-9+/=]+$/);\r",
									"        \r",
									"        // Validate link formats\r",
									"        const linkPattern = /^https:\\/\\/[a-z-]+\\.first-iraqi-bank\\.co\\/\\?link=https:\\/\\/[a-z-]+\\.first-iraqi-bank\\.co\\/onlinePayment\\?identifier%3D[a-zA-Z0-9]+&apn=com\\.firstiraqibank\\.[a-z]+&ibi=com\\.firstiraqibank\\.[a-z]+$/;\r",
									"        \r",
									"        pm.expect(fibData.personalLink).to.match(linkPattern);\r",
									"        pm.expect(fibData.businessLink).to.match(linkPattern);\r",
									"        pm.expect(fibData.corporationLink).to.match(linkPattern);\r",
									"        \r",
									"        // Validate identifier consistency\r",
									"        const identifier = fibData.code.replace(/-/g, '');\r",
									"        pm.expect(fibData.personalLink).to.include(identifier);\r",
									"        pm.expect(fibData.businessLink).to.include(identifier);\r",
									"        pm.expect(fibData.corporationLink).to.include(identifier);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üß™ 7. Gateway Validation\r",
									"pm.test(\"üß™ Valid gateway response\", () => {\r",
									"    const res = pm.response.json();\r",
									"    const validGateways = [\"FIB\", \"ZAIN\"];\r",
									"    pm.expect(validGateways).to.include(res.gateway);\r",
									"});\r",
									"\r",
									"// ‚öô 8. Redirect Validation\r",
									"pm.test(\"‚öô Redirect behavior correct\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.expect(res.needRedirect).to.be.false;\r",
									"        pm.expect(res.redirectUrl).to.be.null;\r",
									"    } else {\r",
									"        pm.expect(res.needRedirect).to.be.true;\r",
									"        pm.expect(res.redirectUrl).to.match(/^https?:\\/\\/.+/);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üìù 9. Environment Variable Storage\r",
									"pm.test(\"üìù Store payment references\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    pm.environment.set('PAYMENT_SRFC', res.srfc);\r",
									"    pm.environment.set('PAYMENT_GATEWAY', res.gateway);\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.environment.set('FIB_CODE', res.fibData.code);\r",
									"        pm.environment.set('FIB_QR_CODE', res.fibData.qrCode);\r",
									"        pm.environment.set('PERSONAL_PAYMENT_LINK', res.fibData.personalLink);\r",
									"    }\r",
									"});\r",
									"\r",
									"// üîí 10. Security Headers Check\r",
									"// pm.test(\"üîí Security headers present\", () => {\r",
									"//     pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"//     pm.response.to.have.header('X-Content-Type-Options', 'nosniff');\r",
									"//     pm.response.to.have.header('Strict-Transport-Security');\r",
									"//     pm.response.to.not.have.header('X-Powered-By');\r",
									"// });\r",
									"\r",
									"// üì± 11. Mobile Deep Link Validation\r",
									"pm.test(\"üì± Valid mobile deep links\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        const { fibData } = res;\r",
									"        \r",
									"        pm.expect(fibData.personalLink).to.include('apn=com.firstiraqibank.personal');\r",
									"        pm.expect(fibData.businessLink).to.include('apn=com.firstiraqibank.business');\r",
									"        pm.expect(fibData.corporationLink).to.include('apn=com.firstiraqibank.corporate');\r",
									"        \r",
									"        pm.expect(fibData.personalLink).to.include('ibi=com.firstiraqibank.personal');\r",
									"        pm.expect(fibData.businessLink).to.include('ibi=com.firstiraqibank.business');\r",
									"        pm.expect(fibData.corporationLink).to.include('ibi=com.firstiraqibank.corporate');\r",
									"    }\r",
									"});\r",
									"\r",
									"// üß© 12. FIB Code Validation\r",
									"pm.test(\"üß© Valid FIB code format\", () => {\r",
									"    const res = pm.response.json();\r",
									"    \r",
									"    if (res.gateway === 'FIB') {\r",
									"        pm.expect(res.fibData.code).to.match(/^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "insomnia/10.3.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerEmail\": \"n.mahmoudi@terminal101.co\",\n  \"customerPhonenumber\":\"+9647701234567\",\n  \"gateway\": \"ZAIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment/customer/:code",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment",
								"customer",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "a8b9fca2-c783-48cd-8036-badfcaa87119"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment  üíö",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"‚úÖStatus code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖResponse is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖMerchant info exists\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"merchant\");\r",
									"    pm.expect(responseJson.merchant).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson.merchant).to.have.property(\"logo\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖTitle and description exist\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"title\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"description\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖGateways array is valid\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"gateways\").that.is.an(\"array\").with.length.above(0);\r",
									"\r",
									"    responseJson.gateways.forEach(gateway => {\r",
									"        pm.expect(gateway).to.have.property(\"feePercent\").that.is.a(\"number\");\r",
									"        pm.expect(gateway).to.have.property(\"feeConstant\").that.is.a(\"number\");\r",
									"        pm.expect(gateway).to.have.property(\"code\").that.is.a(\"string\");\r",
									"        pm.expect(gateway).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        pm.expect(gateway).to.have.property(\"payableAmount\").that.is.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖCheck other payment properties\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"amount\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"ourFeeAmount\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"collectCustomerPhoneNumber\").that.is.a(\"boolean\");\r",
									"    pm.expect(responseJson).to.have.property(\"collectCustomerEmail\").that.is.a(\"boolean\");\r",
									"    pm.expect(responseJson).to.have.property(\"collectFeeFromCustomer\").that.is.a(\"boolean\");\r",
									"    pm.expect(responseJson).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "insomnia/10.3.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment/customer/:code",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment",
								"customer",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "{{NEW_REFERENCE_CODE}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status üíö",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"‚úÖStatus code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖResponse is JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖResponse has required properties\", () => {\r",
									"    pm.expect(responseJson).to.have.property(\"status\").that.is.a(\"string\");\r",
									"    pm.expect(responseJson).to.have.property(\"paidAt\");\r",
									"    pm.expect(responseJson).to.have.property(\"srfc\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖStatus value is valid\", () => {\r",
									"    const validStatuses = [\"PENDING\", \"PAID\", \"FAILED\", \"CANCELLED\"];\r",
									"    pm.expect(validStatuses).to.include(responseJson.status);\r",
									"});\r",
									"\r",
									"pm.test(\"‚úÖpaidAt is either null or a valid date\", () => {\r",
									"    if (responseJson.paidAt !== null) {\r",
									"        const date = new Date(responseJson.paidAt);\r",
									"        pm.expect(date.toString()).to.not.equal(\"Invalid Date\");\r",
									"    } else {\r",
									"        pm.expect(responseJson.paidAt).to.be.null;\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "insomnia/10.3.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"gateway\": \"FIB\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/payment/customer/status/:code",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"payment",
								"customer",
								"status",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "0es64258105241371"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"protocolProfileBehavior": {
				"followRedirects": true,
				"disableUrlEncoding": false,
				"disableCookies": false
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "insomnia/10.3.1"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/watchdog",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"watchdog"
					]
				}
			},
			"response": []
		}
	]
}
